# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
TASMET nonlinear thermoacoustic code
"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TaSMET', [dirname(__file__)])
        except ImportError:
            import _TaSMET
            return _TaSMET
        if fp is not None:
            try:
                _mod = imp.load_module('_TaSMET', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TaSMET = swig_import_helper()
    del swig_import_helper
else:
    import _TaSMET
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def clearConsole():
    return _TaSMET.clearConsole()
clearConsole = _TaSMET.clearConsole

def setTASMETTracer(arg1):
    return _TaSMET.setTASMETTracer(arg1)
setTASMETTracer = _TaSMET.setTASMETTracer

_TaSMET.none_swigconstant(_TaSMET)
none = _TaSMET.none

_TaSMET.rho_swigconstant(_TaSMET)
rho = _TaSMET.rho

_TaSMET.m_swigconstant(_TaSMET)
m = _TaSMET.m

_TaSMET.T_swigconstant(_TaSMET)
T = _TaSMET.T

_TaSMET.p_swigconstant(_TaSMET)
p = _TaSMET.p

_TaSMET.Ts_swigconstant(_TaSMET)
Ts = _TaSMET.Ts

_TaSMET.Tw_swigconstant(_TaSMET)
Tw = _TaSMET.Tw

_TaSMET.mH_swigconstant(_TaSMET)
mH = _TaSMET.mH

_TaSMET.U_swigconstant(_TaSMET)
U = _TaSMET.U

_TaSMET.u_swigconstant(_TaSMET)
u = _TaSMET.u

_TaSMET.mu_swigconstant(_TaSMET)
mu = _TaSMET.mu

_TaSMET.Q_swigconstant(_TaSMET)
Q = _TaSMET.Q

_TaSMET.Qs_swigconstant(_TaSMET)
Qs = _TaSMET.Qs

_TaSMET.F_swigconstant(_TaSMET)
F = _TaSMET.F

_TaSMET.x_swigconstant(_TaSMET)
x = _TaSMET.x

_TaSMET.Z_swigconstant(_TaSMET)
Z = _TaSMET.Z

_TaSMET.left_swigconstant(_TaSMET)
left = _TaSMET.left

_TaSMET.right_swigconstant(_TaSMET)
right = _TaSMET.right
class Globalconf(_object):
    """Proxy of C++ tasystem::Globalconf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Globalconf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Globalconf, name)
    __repr__ = _swig_repr

    def __init__(self, Nf, freq, gasstring, T0, p0):
        """
        __init__(tasystem::Globalconf self, us Nf, d freq, string const & gasstring, d T0, d p0) -> Globalconf

        Parameters:
            Nf: us
            freq: d
            gasstring: string const &
            T0: d
            p0: d

        """
        this = _TaSMET.new_Globalconf(Nf, freq, gasstring, T0, p0)
        try:
            self.this.append(this)
        except:
            self.this = this

    def airSTP(Nf, freq):
        """
        airSTP(us Nf, d freq) -> Globalconf

        Parameters:
            Nf: us
            freq: d

        """
        return _TaSMET.Globalconf_airSTP(Nf, freq)

    if _newclass:
        airSTP = staticmethod(airSTP)
    __swig_getmethods__["airSTP"] = lambda x: airSTP

    def heliumSTP(Nf, freq):
        """
        heliumSTP(us Nf, d freq) -> Globalconf

        Parameters:
            Nf: us
            freq: d

        """
        return _TaSMET.Globalconf_heliumSTP(Nf, freq)

    if _newclass:
        heliumSTP = staticmethod(heliumSTP)
    __swig_getmethods__["heliumSTP"] = lambda x: heliumSTP

    def Nf(self):
        """
        Nf(Globalconf self) -> us const &

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_Nf(self)


    def Ns(self):
        """
        Ns(Globalconf self) -> us const &

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_Ns(self)

    __swig_destroy__ = _TaSMET.delete_Globalconf
    __del__ = lambda self: None

    def getomg(self):
        """
        getomg(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_getomg(self)


    def getfreq(self):
        """
        getfreq(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_getfreq(self)


    def meshPeclet(self, dx, u):
        """
        meshPeclet(Globalconf self, d dx, d u) -> d

        Parameters:
            dx: d
            u: d

        """
        return _TaSMET.Globalconf_meshPeclet(self, dx, u)


    def c0(self):
        """
        c0(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_c0(self)


    def rho0(self):
        """
        rho0(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_rho0(self)


    def deltanu0(self):
        """
        deltanu0(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_deltanu0(self)


    def deltanu0min(self):
        """
        deltanu0min(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_deltanu0min(self)


    def T0(self):
        """
        T0(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_T0(self)


    def p0(self):
        """
        p0(Globalconf self) -> d

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_p0(self)


    def setNf(self, arg2):
        """
        setNf(Globalconf self, us arg2)

        Parameters:
            arg2: us

        """
        return _TaSMET.Globalconf_setNf(self, arg2)


    def setomg(self, omg):
        """
        setomg(Globalconf self, d omg)

        Parameters:
            omg: d

        """
        return _TaSMET.Globalconf_setomg(self, omg)


    def setfreq(self, freq):
        """
        setfreq(Globalconf self, d freq)

        Parameters:
            freq: d

        """
        return _TaSMET.Globalconf_setfreq(self, freq)

    __swig_setmethods__["iDFT"] = _TaSMET.Globalconf_iDFT_set
    __swig_getmethods__["iDFT"] = _TaSMET.Globalconf_iDFT_get
    if _newclass:
        iDFT = _swig_property(_TaSMET.Globalconf_iDFT_get, _TaSMET.Globalconf_iDFT_set)
    __swig_setmethods__["fDFT"] = _TaSMET.Globalconf_fDFT_set
    __swig_getmethods__["fDFT"] = _TaSMET.Globalconf_fDFT_get
    if _newclass:
        fDFT = _swig_property(_TaSMET.Globalconf_fDFT_get, _TaSMET.Globalconf_fDFT_set)
    __swig_setmethods__["DDTfd"] = _TaSMET.Globalconf_DDTfd_set
    __swig_getmethods__["DDTfd"] = _TaSMET.Globalconf_DDTfd_get
    if _newclass:
        DDTfd = _swig_property(_TaSMET.Globalconf_DDTfd_get, _TaSMET.Globalconf_DDTfd_set)
    __swig_setmethods__["DDTtd"] = _TaSMET.Globalconf_DDTtd_set
    __swig_getmethods__["DDTtd"] = _TaSMET.Globalconf_DDTtd_get
    if _newclass:
        DDTtd = _swig_property(_TaSMET.Globalconf_DDTtd_get, _TaSMET.Globalconf_DDTtd_set)
    __swig_setmethods__["ddt"] = _TaSMET.Globalconf_ddt_set
    __swig_getmethods__["ddt"] = _TaSMET.Globalconf_ddt_get
    if _newclass:
        ddt = _swig_property(_TaSMET.Globalconf_ddt_get, _TaSMET.Globalconf_ddt_set)
    __swig_setmethods__["iddt"] = _TaSMET.Globalconf_iddt_set
    __swig_getmethods__["iddt"] = _TaSMET.Globalconf_iddt_get
    if _newclass:
        iddt = _swig_property(_TaSMET.Globalconf_iddt_get, _TaSMET.Globalconf_iddt_set)

    def setGas(self, mat):
        """
        setGas(Globalconf self, string const & mat)

        Parameters:
            mat: string const &

        """
        return _TaSMET.Globalconf_setGas(self, mat)


    def gas(self):
        """
        gas(Globalconf self) -> gases::Gas const &

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_gas(self)


    def show(self):
        """
        show(Globalconf self)

        Parameters:
            self: tasystem::Globalconf const *

        """
        return _TaSMET.Globalconf_show(self)

Globalconf_swigregister = _TaSMET.Globalconf_swigregister
Globalconf_swigregister(Globalconf)

def Globalconf_airSTP(Nf, freq):
    """
    Globalconf_airSTP(us Nf, d freq) -> Globalconf

    Parameters:
        Nf: us
        freq: d

    """
    return _TaSMET.Globalconf_airSTP(Nf, freq)

def Globalconf_heliumSTP(Nf, freq):
    """
    Globalconf_heliumSTP(us Nf, d freq) -> Globalconf

    Parameters:
        Nf: us
        freq: d

    """
    return _TaSMET.Globalconf_heliumSTP(Nf, freq)

class var(_object):
    """Proxy of C++ tasystem::var class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, var, name)
    __repr__ = _swig_repr

    def setDofNr(self, Dofnr):
        """
        setDofNr(var self, us Dofnr)

        Parameters:
            Dofnr: us

        """
        return _TaSMET.var_setDofNr(self, Dofnr)


    def getDofNr(self):
        """
        getDofNr(var self) -> int

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_getDofNr(self)


    def __init__(self, *args):
        """
        __init__(tasystem::var self) -> var
        __init__(tasystem::var self, var o) -> var

        Parameters:
            o: tasystem::var const &

        __init__(tasystem::var self, Globalconf arg2) -> var

        Parameters:
            arg2: tasystem::Globalconf const &

        __init__(tasystem::var self, Globalconf arg2, double arg3) -> var

        Parameters:
            arg2: tasystem::Globalconf const &
            arg3: double

        __init__(tasystem::var self, Globalconf arg2, vd const & data, bool adata=True) -> var

        Parameters:
            arg2: tasystem::Globalconf const &
            data: vd const &
            adata: bool

        __init__(tasystem::var self, Globalconf arg2, vd const & data) -> var

        Parameters:
            arg2: tasystem::Globalconf const &
            data: vd const &

        __init__(tasystem::var self, Globalconf arg2, vc const & data) -> var

        Parameters:
            arg2: tasystem::Globalconf const &
            data: vc const &

        """
        this = _TaSMET.new_var(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_var
    __del__ = lambda self: None

    def gc(self):
        """
        gc(var self) -> Globalconf

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_gc(self)


    def tdata(self):
        """
        tdata(var self) -> vd const &

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_tdata(self)


    def adata(self):
        """
        adata(var self) -> vd const &

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_adata(self)


    def __call__(self, *args):
        """
        __call__(var self, us i) -> d

        Parameters:
            i: us

        __call__(var self) -> vd const &

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var___call__(self, *args)


    def timeResponse(self, nperiod=2, ninst=100):
        """
        timeResponse(var self, us nperiod=2, us ninst=100) -> vd

        Parameters:
            nperiod: us
            ninst: us

        timeResponse(var self, us nperiod=2) -> vd

        Parameters:
            nperiod: us

        timeResponse(var self) -> vd

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_timeResponse(self, nperiod, ninst)


    def timeResponseTime(self, nperiod=2, ninst=100):
        """
        timeResponseTime(var self, us nperiod=2, us ninst=100) -> vd

        Parameters:
            nperiod: us
            ninst: us

        timeResponseTime(var self, us nperiod=2) -> vd

        Parameters:
            nperiod: us

        timeResponseTime(var self) -> vd

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_timeResponseTime(self, nperiod, ninst)


    def settdata(self, *args):
        """
        settdata(var self, double value)

        Parameters:
            value: double

        settdata(var self, vd const & values)

        Parameters:
            values: vd const &

        """
        return _TaSMET.var_settdata(self, *args)


    def setadata(self, *args):
        """
        setadata(var self, vd const & values)

        Parameters:
            values: vd const &

        setadata(var self, us freq, double val)

        Parameters:
            freq: us
            val: double

        setadata(var self, vc const & values)

        Parameters:
            values: vc const &

        """
        return _TaSMET.var_setadata(self, *args)


    def getcRes(self):
        """
        getcRes(var self) -> vc

        Parameters:
            self: tasystem::var const *

        """
        return _TaSMET.var_getcRes(self)

var_swigregister = _TaSMET.var_swigregister
var_swigregister(var)

class SegConBase(_object):
    """Proxy of C++ segment::SegConBase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegConBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SegConBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _TaSMET.delete_SegConBase
    __del__ = lambda self: None

    def __repr__(self):
        """
        __repr__(SegConBase self) -> char const *

        Parameters:
            self: segment::SegConBase const *

        """
        return _TaSMET.SegConBase___repr__(self)


    def getName(self):
        """
        getName(SegConBase self) -> std::string const &

        Parameters:
            self: segment::SegConBase const *

        """
        return _TaSMET.SegConBase_getName(self)


    def getID(self):
        """
        getID(SegConBase self) -> std::string const &

        Parameters:
            self: segment::SegConBase const *

        """
        return _TaSMET.SegConBase_getID(self)


    def setName(self, name):
        """
        setName(SegConBase self, std::string const & name)

        Parameters:
            name: std::string const &

        """
        return _TaSMET.SegConBase_setName(self, name)


    def setID(self, id):
        """
        setID(SegConBase self, std::string const & id)

        Parameters:
            id: std::string const &

        """
        return _TaSMET.SegConBase_setID(self, id)


    def arbitrateMassEq(self):
        """
        arbitrateMassEq(SegConBase self) -> int

        Parameters:
            self: segment::SegConBase const *

        """
        return _TaSMET.SegConBase_arbitrateMassEq(self)


    def error(self):
        """
        error(SegConBase self) -> vd

        Parameters:
            self: segment::SegConBase const *

        """
        return _TaSMET.SegConBase_error(self)

SegConBase_swigregister = _TaSMET.SegConBase_swigregister
SegConBase_swigregister(SegConBase)

class PhaseConstraint(_object):
    """Proxy of C++ tasystem::PhaseConstraint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var"] = _TaSMET.PhaseConstraint_var_set
    __swig_getmethods__["var"] = _TaSMET.PhaseConstraint_var_get
    if _newclass:
        var = _swig_property(_TaSMET.PhaseConstraint_var_get, _TaSMET.PhaseConstraint_var_set)
    __swig_setmethods__["freqnr"] = _TaSMET.PhaseConstraint_freqnr_set
    __swig_getmethods__["freqnr"] = _TaSMET.PhaseConstraint_freqnr_get
    if _newclass:
        freqnr = _swig_property(_TaSMET.PhaseConstraint_freqnr_get, _TaSMET.PhaseConstraint_freqnr_set)
    __swig_setmethods__["pos"] = _TaSMET.PhaseConstraint_pos_set
    __swig_getmethods__["pos"] = _TaSMET.PhaseConstraint_pos_get
    if _newclass:
        pos = _swig_property(_TaSMET.PhaseConstraint_pos_get, _TaSMET.PhaseConstraint_pos_set)

    def __init__(self, *args):
        """
        __init__(tasystem::PhaseConstraint self, Varnr var, us freqnr=2, tasystem::Pos pos) -> PhaseConstraint

        Parameters:
            var: enum Varnr
            freqnr: us
            pos: enum tasystem::Pos

        __init__(tasystem::PhaseConstraint self, Varnr var, us freqnr=2) -> PhaseConstraint

        Parameters:
            var: enum Varnr
            freqnr: us

        __init__(tasystem::PhaseConstraint self, Varnr var) -> PhaseConstraint

        Parameters:
            var: enum Varnr

        """
        this = _TaSMET.new_PhaseConstraint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_PhaseConstraint
    __del__ = lambda self: None
PhaseConstraint_swigregister = _TaSMET.PhaseConstraint_swigregister
PhaseConstraint_swigregister(PhaseConstraint)

class Connector(SegConBase):
    """Proxy of C++ segment::Connector class"""
    __swig_setmethods__ = {}
    for _s in [SegConBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connector, name, value)
    __swig_getmethods__ = {}
    for _s in [SegConBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Connector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TaSMET.delete_Connector
    __del__ = lambda self: None

    def copy(self, arg2):
        """
        copy(Connector self, TaSystem arg2) -> Connector

        Parameters:
            arg2: tasystem::TaSystem const &

        """
        return _TaSMET.Connector_copy(self, arg2)

Connector_swigregister = _TaSMET.Connector_swigregister
Connector_swigregister(Connector)

class DuctBc(Connector):
    """Proxy of C++ duct::DuctBc class"""
    __swig_setmethods__ = {}
    for _s in [Connector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuctBc, name, value)
    __swig_getmethods__ = {}
    for _s in [Connector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuctBc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TaSMET.delete_DuctBc
    __del__ = lambda self: None
DuctBc_swigregister = _TaSMET.DuctBc_swigregister
DuctBc_swigregister(DuctBc)

class DuctConnector(Connector):
    """Proxy of C++ duct::DuctConnector class"""
    __swig_setmethods__ = {}
    for _s in [Connector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuctConnector, name, value)
    __swig_getmethods__ = {}
    for _s in [Connector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuctConnector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::DuctConnector self, string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2, d K1to2=0, d K2to1=0) -> DuctConnector

        Parameters:
            seg1: string const &
            pos1: enum duct::Pos
            seg2: string const &
            pos2: enum duct::Pos
            K1to2: d
            K2to1: d

        __init__(duct::DuctConnector self, string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2, d K1to2=0) -> DuctConnector

        Parameters:
            seg1: string const &
            pos1: enum duct::Pos
            seg2: string const &
            pos2: enum duct::Pos
            K1to2: d

        __init__(duct::DuctConnector self, string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2) -> DuctConnector

        Parameters:
            seg1: string const &
            pos1: enum duct::Pos
            seg2: string const &
            pos2: enum duct::Pos

        __init__(duct::DuctConnector self, DuctConnector arg2, TaSystem arg3) -> DuctConnector

        Parameters:
            arg2: duct::DuctConnector const &
            arg3: tasystem::TaSystem const &

        """
        this = _TaSMET.new_DuctConnector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self, s):
        """
        copy(DuctConnector self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.DuctConnector_copy(self, s)

    __swig_destroy__ = _TaSMET.delete_DuctConnector
    __del__ = lambda self: None

    def error(self):
        """
        error(DuctConnector self) -> vd

        Parameters:
            self: duct::DuctConnector const *

        """
        return _TaSMET.DuctConnector_error(self)

DuctConnector_swigregister = _TaSMET.DuctConnector_swigregister
DuctConnector_swigregister(DuctConnector)

class DuctPistonConnector(Connector):
    """Proxy of C++ mech::DuctPistonConnector class"""
    __swig_setmethods__ = {}
    for _s in [Connector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuctPistonConnector, name, value)
    __swig_getmethods__ = {}
    for _s in [Connector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuctPistonConnector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mech::DuctPistonConnector self, string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos, d KDuctPiston=0, d KPistonDuct=0) -> DuctPistonConnector

        Parameters:
            ductid: string const &
            ductpos: enum mech::Pos
            pistonid: string const &
            pistonpos: enum mech::Pos
            KDuctPiston: d
            KPistonDuct: d

        __init__(mech::DuctPistonConnector self, string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos, d KDuctPiston=0) -> DuctPistonConnector

        Parameters:
            ductid: string const &
            ductpos: enum mech::Pos
            pistonid: string const &
            pistonpos: enum mech::Pos
            KDuctPiston: d

        __init__(mech::DuctPistonConnector self, string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos) -> DuctPistonConnector

        Parameters:
            ductid: string const &
            ductpos: enum mech::Pos
            pistonid: string const &
            pistonpos: enum mech::Pos

        __init__(mech::DuctPistonConnector self, DuctPistonConnector arg2, TaSystem arg3) -> DuctPistonConnector

        Parameters:
            arg2: mech::DuctPistonConnector const &
            arg3: tasystem::TaSystem const &

        """
        this = _TaSMET.new_DuctPistonConnector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self, s):
        """
        copy(DuctPistonConnector self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.DuctPistonConnector_copy(self, s)

    __swig_destroy__ = _TaSMET.delete_DuctPistonConnector
    __del__ = lambda self: None

    def error(self):
        """
        error(DuctPistonConnector self) -> vd

        Parameters:
            self: mech::DuctPistonConnector const *

        """
        return _TaSMET.DuctPistonConnector_error(self)

DuctPistonConnector_swigregister = _TaSMET.DuctPistonConnector_swigregister
DuctPistonConnector_swigregister(DuctPistonConnector)

class PressureBc(DuctBc):
    """Proxy of C++ duct::PressureBc class"""
    __swig_setmethods__ = {}
    for _s in [DuctBc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PressureBc, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctBc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PressureBc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::PressureBc self, string const & segid, duct::Pos position, var p, var Ts, var T) -> PressureBc

        Parameters:
            segid: string const &
            position: enum duct::Pos
            p: tasystem::var const &
            Ts: tasystem::var const &
            T: tasystem::var const &

        __init__(duct::PressureBc self, string const & segid, duct::Pos position, var p, var Ts) -> PressureBc

        Parameters:
            segid: string const &
            position: enum duct::Pos
            p: tasystem::var const &
            Ts: tasystem::var const &

        __init__(duct::PressureBc self, string const & segid, duct::Pos position, var p) -> PressureBc

        Parameters:
            segid: string const &
            position: enum duct::Pos
            p: tasystem::var const &

        """
        this = _TaSMET.new_PressureBc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self, s):
        """
        copy(PressureBc self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.PressureBc_copy(self, s)


    def error(self):
        """
        error(PressureBc self) -> vd

        Parameters:
            self: duct::PressureBc const *

        """
        return _TaSMET.PressureBc_error(self)

    __swig_destroy__ = _TaSMET.delete_PressureBc
    __del__ = lambda self: None
PressureBc_swigregister = _TaSMET.PressureBc_swigregister
PressureBc_swigregister(PressureBc)

class AdiabaticWall(DuctBc):
    """Proxy of C++ duct::AdiabaticWall class"""
    __swig_setmethods__ = {}
    for _s in [DuctBc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdiabaticWall, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctBc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdiabaticWall, name)
    __repr__ = _swig_repr

    def __init__(self, segid, position, arbitrateMass=False):
        """
        __init__(duct::AdiabaticWall self, string const & segid, duct::Pos position, bool arbitrateMass=False) -> AdiabaticWall

        Parameters:
            segid: string const &
            position: enum duct::Pos
            arbitrateMass: bool

        __init__(duct::AdiabaticWall self, string const & segid, duct::Pos position) -> AdiabaticWall

        Parameters:
            segid: string const &
            position: enum duct::Pos

        """
        this = _TaSMET.new_AdiabaticWall(segid, position, arbitrateMass)
        try:
            self.this.append(this)
        except:
            self.this = this

    def arbitrateMassEq(self):
        """
        arbitrateMassEq(AdiabaticWall self) -> int

        Parameters:
            self: duct::AdiabaticWall const *

        """
        return _TaSMET.AdiabaticWall_arbitrateMassEq(self)

    __swig_destroy__ = _TaSMET.delete_AdiabaticWall
    __del__ = lambda self: None

    def copy(self, arg2):
        """
        copy(AdiabaticWall self, TaSystem arg2) -> Connector

        Parameters:
            arg2: tasystem::TaSystem const &

        """
        return _TaSMET.AdiabaticWall_copy(self, arg2)


    def error(self):
        """
        error(AdiabaticWall self) -> vd

        Parameters:
            self: duct::AdiabaticWall const *

        """
        return _TaSMET.AdiabaticWall_error(self)

AdiabaticWall_swigregister = _TaSMET.AdiabaticWall_swigregister
AdiabaticWall_swigregister(AdiabaticWall)

class IsoTWall(DuctBc):
    """Proxy of C++ duct::IsoTWall class"""
    __swig_setmethods__ = {}
    for _s in [DuctBc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoTWall, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctBc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoTWall, name)
    __repr__ = _swig_repr

    def __init__(self, segid, position, Tbc, arbitrateMass=False):
        """
        __init__(duct::IsoTWall self, string const & segid, duct::Pos position, var Tbc, bool arbitrateMass=False) -> IsoTWall

        Parameters:
            segid: string const &
            position: enum duct::Pos
            Tbc: tasystem::var const &
            arbitrateMass: bool

        __init__(duct::IsoTWall self, string const & segid, duct::Pos position, var Tbc) -> IsoTWall

        Parameters:
            segid: string const &
            position: enum duct::Pos
            Tbc: tasystem::var const &

        """
        this = _TaSMET.new_IsoTWall(segid, position, Tbc, arbitrateMass)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self, sys):
        """
        copy(IsoTWall self, TaSystem sys) -> Connector

        Parameters:
            sys: tasystem::TaSystem const &

        """
        return _TaSMET.IsoTWall_copy(self, sys)

    __swig_destroy__ = _TaSMET.delete_IsoTWall
    __del__ = lambda self: None

    def arbitrateMassEq(self):
        """
        arbitrateMassEq(IsoTWall self) -> int

        Parameters:
            self: duct::IsoTWall const *

        """
        return _TaSMET.IsoTWall_arbitrateMassEq(self)


    def error(self):
        """
        error(IsoTWall self) -> vd

        Parameters:
            self: duct::IsoTWall const *

        """
        return _TaSMET.IsoTWall_error(self)

IsoTWall_swigregister = _TaSMET.IsoTWall_swigregister
IsoTWall_swigregister(IsoTWall)

class ImpedanceBc(DuctBc):
    """Proxy of C++ duct::ImpedanceBc class"""
    __swig_setmethods__ = {}
    for _s in [DuctBc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpedanceBc, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctBc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpedanceBc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::ImpedanceBc self, string const & segid, duct::Pos pos, PyObject * pyfunc, d T0) -> ImpedanceBc

        Parameters:
            segid: string const &
            pos: enum duct::Pos
            pyfunc: PyObject *
            T0: d

        __init__(duct::ImpedanceBc self, string const & segid, duct::Pos pos, PyObject * pyfunc) -> ImpedanceBc

        Parameters:
            segid: string const &
            pos: enum duct::Pos
            pyfunc: PyObject *

        """
        this = _TaSMET.new_ImpedanceBc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_ImpedanceBc
    __del__ = lambda self: None

    def copy(self, s):
        """
        copy(ImpedanceBc self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.ImpedanceBc_copy(self, s)


    def error(self):
        """
        error(ImpedanceBc self) -> vd

        Parameters:
            self: duct::ImpedanceBc const *

        """
        return _TaSMET.ImpedanceBc_error(self)

ImpedanceBc_swigregister = _TaSMET.ImpedanceBc_swigregister
ImpedanceBc_swigregister(ImpedanceBc)

class VelocityBc(DuctBc):
    """Proxy of C++ duct::VelocityBc class"""
    __swig_setmethods__ = {}
    for _s in [DuctBc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VelocityBc, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctBc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VelocityBc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::VelocityBc self, string const & segid, duct::Pos pos, var u, d T0, bool arbitrateMass=False) -> VelocityBc

        Parameters:
            segid: string const &
            pos: enum duct::Pos
            u: tasystem::var const &
            T0: d
            arbitrateMass: bool

        __init__(duct::VelocityBc self, string const & segid, duct::Pos pos, var u, d T0) -> VelocityBc

        Parameters:
            segid: string const &
            pos: enum duct::Pos
            u: tasystem::var const &
            T0: d

        __init__(duct::VelocityBc self, string const & segid, duct::Pos pos, var u) -> VelocityBc

        Parameters:
            segid: string const &
            pos: enum duct::Pos
            u: tasystem::var const &

        """
        this = _TaSMET.new_VelocityBc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_VelocityBc
    __del__ = lambda self: None

    def copy(self, s):
        """
        copy(VelocityBc self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.VelocityBc_copy(self, s)


    def error(self):
        """
        error(VelocityBc self) -> vd

        Parameters:
            self: duct::VelocityBc const *

        """
        return _TaSMET.VelocityBc_error(self)


    def arbitrateMassEq(self):
        """
        arbitrateMassEq(VelocityBc self) -> int

        Parameters:
            self: duct::VelocityBc const *

        """
        return _TaSMET.VelocityBc_arbitrateMassEq(self)

VelocityBc_swigregister = _TaSMET.VelocityBc_swigregister
VelocityBc_swigregister(VelocityBc)

class MechBc(Connector):
    """Proxy of C++ mech::MechBc class"""
    __swig_setmethods__ = {}
    for _s in [Connector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MechBc, name, value)
    __swig_getmethods__ = {}
    for _s in [Connector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MechBc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mech::MechBc self, string const & segid, Varnr var, var bc) -> MechBc

        Parameters:
            segid: string const &
            var: enum Varnr
            bc: tasystem::var const &

        __init__(mech::MechBc self, MechBc arg2, TaSystem arg3) -> MechBc

        Parameters:
            arg2: mech::MechBc const &
            arg3: tasystem::TaSystem const &

        """
        this = _TaSMET.new_MechBc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_MechBc
    __del__ = lambda self: None

    def error(self):
        """
        error(MechBc self) -> vd

        Parameters:
            self: mech::MechBc const *

        """
        return _TaSMET.MechBc_error(self)


    def jac(self, arg2):
        """
        jac(MechBc self, tasystem::Jacobian & arg2)

        Parameters:
            arg2: tasystem::Jacobian &

        """
        return _TaSMET.MechBc_jac(self, arg2)


    def copy(self, s):
        """
        copy(MechBc self, TaSystem s) -> Connector

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.MechBc_copy(self, s)


    def setEqNrs(self, firsteqnr):
        """
        setEqNrs(MechBc self, us firsteqnr)

        Parameters:
            firsteqnr: us

        """
        return _TaSMET.MechBc_setEqNrs(self, firsteqnr)


    def getNEqs(self):
        """
        getNEqs(MechBc self) -> us

        Parameters:
            self: mech::MechBc const *

        """
        return _TaSMET.MechBc_getNEqs(self)


    def show(self, arg2):
        """
        show(MechBc self, us arg2)

        Parameters:
            arg2: us

        """
        return _TaSMET.MechBc_show(self, arg2)


    def updateNf(self):
        """
        updateNf(MechBc self)

        Parameters:
            self: mech::MechBc *

        """
        return _TaSMET.MechBc_updateNf(self)

MechBc_swigregister = _TaSMET.MechBc_swigregister
MechBc_swigregister(MechBc)

class Seg(SegConBase):
    """Proxy of C++ segment::Seg class"""
    __swig_setmethods__ = {}
    for _s in [SegConBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seg, name, value)
    __swig_getmethods__ = {}
    for _s in [SegConBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Seg, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def copy(self, arg2):
        """
        copy(Seg self, TaSystem arg2) -> Seg

        Parameters:
            arg2: tasystem::TaSystem const &

        """
        return _TaSMET.Seg_copy(self, arg2)

    __swig_destroy__ = _TaSMET.delete_Seg
    __del__ = lambda self: None

    def setPhaseContraint(self, arg2):
        """
        setPhaseContraint(Seg self, PhaseConstraint arg2)

        Parameters:
            arg2: tasystem::PhaseConstraint

        """
        return _TaSMET.Seg_setPhaseContraint(self, arg2)

Seg_swigregister = _TaSMET.Seg_swigregister
Seg_swigregister(Seg)

class PistonConfiguration(_object):
    """Proxy of C++ mech::PistonConfiguration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PistonConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PistonConfiguration, name)
    __repr__ = _swig_repr

    def __init__(self, Sl, Sr, V0l, V0r, M, Km, Cm, Stl=-1, Str=-1):
        """
        __init__(mech::PistonConfiguration self, d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm, d Stl=-1, d Str=-1) -> PistonConfiguration

        Parameters:
            Sl: d
            Sr: d
            V0l: d
            V0r: d
            M: d
            Km: d
            Cm: d
            Stl: d
            Str: d

        __init__(mech::PistonConfiguration self, d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm, d Stl=-1) -> PistonConfiguration

        Parameters:
            Sl: d
            Sr: d
            V0l: d
            V0r: d
            M: d
            Km: d
            Cm: d
            Stl: d

        __init__(mech::PistonConfiguration self, d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm) -> PistonConfiguration

        Parameters:
            Sl: d
            Sr: d
            V0l: d
            V0r: d
            M: d
            Km: d
            Cm: d

        """
        this = _TaSMET.new_PistonConfiguration(Sl, Sr, V0l, V0r, M, Km, Cm, Stl, Str)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_PistonConfiguration
    __del__ = lambda self: None
    __swig_setmethods__["M"] = _TaSMET.PistonConfiguration_M_set
    __swig_getmethods__["M"] = _TaSMET.PistonConfiguration_M_get
    if _newclass:
        M = _swig_property(_TaSMET.PistonConfiguration_M_get, _TaSMET.PistonConfiguration_M_set)
    __swig_setmethods__["Sr"] = _TaSMET.PistonConfiguration_Sr_set
    __swig_getmethods__["Sr"] = _TaSMET.PistonConfiguration_Sr_get
    if _newclass:
        Sr = _swig_property(_TaSMET.PistonConfiguration_Sr_get, _TaSMET.PistonConfiguration_Sr_set)
    __swig_setmethods__["Sl"] = _TaSMET.PistonConfiguration_Sl_set
    __swig_getmethods__["Sl"] = _TaSMET.PistonConfiguration_Sl_get
    if _newclass:
        Sl = _swig_property(_TaSMET.PistonConfiguration_Sl_get, _TaSMET.PistonConfiguration_Sl_set)
    __swig_setmethods__["Km"] = _TaSMET.PistonConfiguration_Km_set
    __swig_getmethods__["Km"] = _TaSMET.PistonConfiguration_Km_get
    if _newclass:
        Km = _swig_property(_TaSMET.PistonConfiguration_Km_get, _TaSMET.PistonConfiguration_Km_set)
    __swig_setmethods__["Cm"] = _TaSMET.PistonConfiguration_Cm_set
    __swig_getmethods__["Cm"] = _TaSMET.PistonConfiguration_Cm_get
    if _newclass:
        Cm = _swig_property(_TaSMET.PistonConfiguration_Cm_get, _TaSMET.PistonConfiguration_Cm_set)
    __swig_setmethods__["V0l"] = _TaSMET.PistonConfiguration_V0l_set
    __swig_getmethods__["V0l"] = _TaSMET.PistonConfiguration_V0l_get
    if _newclass:
        V0l = _swig_property(_TaSMET.PistonConfiguration_V0l_get, _TaSMET.PistonConfiguration_V0l_set)
    __swig_setmethods__["V0r"] = _TaSMET.PistonConfiguration_V0r_set
    __swig_getmethods__["V0r"] = _TaSMET.PistonConfiguration_V0r_get
    if _newclass:
        V0r = _swig_property(_TaSMET.PistonConfiguration_V0r_get, _TaSMET.PistonConfiguration_V0r_set)
    __swig_setmethods__["Stl"] = _TaSMET.PistonConfiguration_Stl_set
    __swig_getmethods__["Stl"] = _TaSMET.PistonConfiguration_Stl_get
    if _newclass:
        Stl = _swig_property(_TaSMET.PistonConfiguration_Stl_get, _TaSMET.PistonConfiguration_Stl_set)
    __swig_setmethods__["Str"] = _TaSMET.PistonConfiguration_Str_set
    __swig_getmethods__["Str"] = _TaSMET.PistonConfiguration_Str_get
    if _newclass:
        Str = _swig_property(_TaSMET.PistonConfiguration_Str_get, _TaSMET.PistonConfiguration_Str_set)
PistonConfiguration_swigregister = _TaSMET.PistonConfiguration_swigregister
PistonConfiguration_swigregister(PistonConfiguration)

class Piston(Seg):
    """Proxy of C++ mech::Piston class"""
    __swig_setmethods__ = {}
    for _s in [Seg]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Piston, name, value)
    __swig_getmethods__ = {}
    for _s in [Seg]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Piston, name)
    __repr__ = _swig_repr

    def __init__(self, pc):
        """
        __init__(mech::Piston self, PistonConfiguration pc) -> Piston

        Parameters:
            pc: mech::PistonConfiguration const &

        """
        this = _TaSMET.new_Piston(pc)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_Piston
    __del__ = lambda self: None

    def copy(self, s):
        """
        copy(Piston self, TaSystem s) -> Seg

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.Piston_copy(self, s)


    def setT0(self, T01):
        """
        setT0(Piston self, d T01)

        Parameters:
            T01: d

        """
        return _TaSMET.Piston_setT0(self, T01)


    def getT0(self):
        """
        getT0(Piston self) -> d

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_getT0(self)


    def getPc(self):
        """
        getPc(Piston self) -> PistonConfiguration

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_getPc(self)


    def Fpiston(self):
        """
        Fpiston(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_Fpiston(self)


    def xpiston(self):
        """
        xpiston(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_xpiston(self)


    def upiston(self):
        """
        upiston(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_upiston(self)


    def pl(self):
        """
        pl(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_pl(self)


    def pr(self):
        """
        pr(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_pr(self)


    def p(self, p):
        """
        p(Piston self, mech::Pos p) -> var

        Parameters:
            p: enum mech::Pos

        """
        return _TaSMET.Piston_p(self, p)


    def m(self, p):
        """
        m(Piston self, mech::Pos p) -> var

        Parameters:
            p: enum mech::Pos

        """
        return _TaSMET.Piston_m(self, p)


    def T(self, p):
        """
        T(Piston self, mech::Pos p) -> var

        Parameters:
            p: enum mech::Pos

        """
        return _TaSMET.Piston_T(self, p)


    def mH(self, p):
        """
        mH(Piston self, mech::Pos p) -> var

        Parameters:
            p: enum mech::Pos

        """
        return _TaSMET.Piston_mH(self, p)


    def rhol(self):
        """
        rhol(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_rhol(self)


    def rhor(self):
        """
        rhor(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_rhor(self)


    def Tl(self):
        """
        Tl(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_Tl(self)


    def Tr(self):
        """
        Tr(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_Tr(self)


    def Vl(self):
        """
        Vl(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_Vl(self)


    def Vr(self):
        """
        Vr(Piston self) -> var

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_Vr(self)


    def error(self):
        """
        error(Piston self) -> vd

        Parameters:
            self: mech::Piston const *

        """
        return _TaSMET.Piston_error(self)

Piston_swigregister = _TaSMET.Piston_swigregister
Piston_swigregister(Piston)

class ConnectorVolume(Seg):
    """Proxy of C++ duct::ConnectorVolume class"""
    __swig_setmethods__ = {}
    for _s in [Seg]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [Seg]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, volume):
        """
        __init__(duct::ConnectorVolume self, d volume) -> ConnectorVolume

        Parameters:
            volume: d

        """
        this = _TaSMET.new_ConnectorVolume(volume)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_ConnectorVolume
    __del__ = lambda self: None

    def copy(self, s):
        """
        copy(ConnectorVolume self, TaSystem s) -> Seg

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.ConnectorVolume_copy(self, s)


    def p(self):
        """
        p(ConnectorVolume self) -> var

        Parameters:
            self: duct::ConnectorVolume const *

        """
        return _TaSMET.ConnectorVolume_p(self)


    def rho(self):
        """
        rho(ConnectorVolume self) -> var

        Parameters:
            self: duct::ConnectorVolume const *

        """
        return _TaSMET.ConnectorVolume_rho(self)


    def T(self):
        """
        T(ConnectorVolume self) -> var

        Parameters:
            self: duct::ConnectorVolume const *

        """
        return _TaSMET.ConnectorVolume_T(self)


    def addDuct(self, segid, position):
        """
        addDuct(ConnectorVolume self, string const & segid, duct::Pos position)

        Parameters:
            segid: string const &
            position: enum duct::Pos

        """
        return _TaSMET.ConnectorVolume_addDuct(self, segid, position)


    def addPiston(self, segid, position):
        """
        addPiston(ConnectorVolume self, string const & segid, duct::Pos position)

        Parameters:
            segid: string const &
            position: enum duct::Pos

        """
        return _TaSMET.ConnectorVolume_addPiston(self, segid, position)


    def error(self):
        """
        error(ConnectorVolume self) -> vd

        Parameters:
            self: duct::ConnectorVolume const *

        """
        return _TaSMET.ConnectorVolume_error(self)

ConnectorVolume_swigregister = _TaSMET.ConnectorVolume_swigregister
ConnectorVolume_swigregister(ConnectorVolume)

class Grid(_object):
    """Proxy of C++ duct::Grid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::Grid self, us gp, d L) -> Grid

        Parameters:
            gp: us
            L: d

        __init__(duct::Grid self, Grid g) -> Grid

        Parameters:
            g: duct::Grid const &

        """
        this = _TaSMET.new_Grid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_Grid
    __del__ = lambda self: None

    def setLeftBl(self, blleft):
        """
        setLeftBl(Grid self, BoundaryLayer blleft)

        Parameters:
            blleft: duct::BoundaryLayer const &

        """
        return _TaSMET.Grid_setLeftBl(self, blleft)


    def setRightBl(self, blright):
        """
        setRightBl(Grid self, BoundaryLayer blright)

        Parameters:
            blright: duct::BoundaryLayer const &

        """
        return _TaSMET.Grid_setRightBl(self, blright)


    def isLeftBl(self):
        """
        isLeftBl(Grid self) -> bool

        Parameters:
            self: duct::Grid const *

        """
        return _TaSMET.Grid_isLeftBl(self)


    def isRightBl(self):
        """
        isRightBl(Grid self) -> bool

        Parameters:
            self: duct::Grid const *

        """
        return _TaSMET.Grid_isRightBl(self)


    def getL(self):
        """
        getL(Grid self) -> d

        Parameters:
            self: duct::Grid const *

        """
        return _TaSMET.Grid_getL(self)


    def getx(self):
        """
        getx(Grid self) -> vd const &

        Parameters:
            self: duct::Grid const *

        """
        return _TaSMET.Grid_getx(self)


    def getgp(self):
        """
        getgp(Grid self) -> us

        Parameters:
            self: duct::Grid const *

        """
        return _TaSMET.Grid_getgp(self)

Grid_swigregister = _TaSMET.Grid_swigregister
Grid_swigregister(Grid)

class BoundaryLayer(_object):
    """Proxy of C++ duct::BoundaryLayer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryLayer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::BoundaryLayer self, d dxb, d L, d alpha) -> BoundaryLayer

        Parameters:
            dxb: d
            L: d
            alpha: d

        __init__(duct::BoundaryLayer self, d dxb, d L, us n) -> BoundaryLayer

        Parameters:
            dxb: d
            L: d
            n: us

        """
        this = _TaSMET.new_BoundaryLayer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self):
        """
        copy(BoundaryLayer self) -> BoundaryLayer

        Parameters:
            self: duct::BoundaryLayer const *

        """
        return _TaSMET.BoundaryLayer_copy(self)

    __swig_destroy__ = _TaSMET.delete_BoundaryLayer
    __del__ = lambda self: None
BoundaryLayer_swigregister = _TaSMET.BoundaryLayer_swigregister
BoundaryLayer_swigregister(BoundaryLayer)

class AutoBoundaryLayer(BoundaryLayer):
    """Proxy of C++ duct::AutoBoundaryLayer class"""
    __swig_setmethods__ = {}
    for _s in [BoundaryLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoBoundaryLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundaryLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoBoundaryLayer, name)
    __repr__ = _swig_repr

    def __init__(self, dxb, alpha, g):
        """
        __init__(duct::AutoBoundaryLayer self, d dxb, d alpha, Grid g) -> AutoBoundaryLayer

        Parameters:
            dxb: d
            alpha: d
            g: duct::Grid const &

        """
        this = _TaSMET.new_AutoBoundaryLayer(dxb, alpha, g)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self):
        """
        copy(AutoBoundaryLayer self) -> BoundaryLayer

        Parameters:
            self: duct::AutoBoundaryLayer const *

        """
        return _TaSMET.AutoBoundaryLayer_copy(self)

    __swig_destroy__ = _TaSMET.delete_AutoBoundaryLayer
    __del__ = lambda self: None
AutoBoundaryLayer_swigregister = _TaSMET.AutoBoundaryLayer_swigregister
AutoBoundaryLayer_swigregister(AutoBoundaryLayer)

class Geom(_object):
    """Proxy of C++ duct::Geom class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TaSMET.delete_Geom
    __del__ = lambda self: None

    def grid(self):
        """
        grid(Geom self) -> Grid

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_grid(self)


    def show(self):
        """
        show(Geom self)

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_show(self)


    def S(self, i):
        """
        S(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_S(self, i)


    def phi(self, i):
        """
        phi(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_phi(self, i)


    def rh(self, i):
        """
        rh(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_rh(self, i)


    def copy(self):
        """
        copy(Geom self) -> Geom

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_copy(self)


    def shape(self):
        """
        shape(Geom self) -> string

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_shape(self)


    def setPrismatic(self, isprismatic):
        """
        setPrismatic(Geom self, bool isprismatic)

        Parameters:
            isprismatic: bool

        """
        return _TaSMET.Geom_setPrismatic(self, isprismatic)


    def isPrismatic(self):
        """
        isPrismatic(Geom self) -> bool

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_isPrismatic(self)


    def setBlApprox(self, b):
        """
        setBlApprox(Geom self, bool b)

        Parameters:
            b: bool

        """
        return _TaSMET.Geom_setBlApprox(self, b)


    def isBlApprox(self):
        """
        isBlApprox(Geom self) -> bool

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_isBlApprox(self)


    def nCells(self):
        """
        nCells(Geom self) -> us

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_nCells(self)


    def x(self, *args):
        """
        x(Geom self) -> vd const
        x(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_x(self, *args)


    def L(self):
        """
        L(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_L(self)


    def gp(self):
        """
        gp(Geom self) -> us

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_gp(self)


    def Sleft(self):
        """
        Sleft(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_Sleft(self)


    def Sright(self):
        """
        Sright(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_Sright(self)


    def phileft(self):
        """
        phileft(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_phileft(self)


    def phiright(self):
        """
        phiright(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_phiright(self)


    def rhleft(self):
        """
        rhleft(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_rhleft(self)


    def rhright(self):
        """
        rhright(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_rhright(self)


    def vx(self, i):
        """
        vx(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vx(self, i)


    def vSf_vec(self):
        """
        vSf_vec(Geom self) -> vd

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_vSf_vec(self)


    def vS_vec(self):
        """
        vS_vec(Geom self) -> vd

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_vS_vec(self)


    def vphi_vec(self):
        """
        vphi_vec(Geom self) -> vd

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_vphi_vec(self)


    def vrh_vec(self):
        """
        vrh_vec(Geom self) -> vd

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_vrh_vec(self)


    def vx_vec(self):
        """
        vx_vec(Geom self) -> vd

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_vx_vec(self)


    def Sf(self, i):
        """
        Sf(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_Sf(self, i)


    def Ss(self, i):
        """
        Ss(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_Ss(self, i)


    def vS(self, i):
        """
        vS(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vS(self, i)


    def vSf(self, i):
        """
        vSf(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vSf(self, i)


    def vSs(self, i):
        """
        vSs(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vSs(self, i)


    def vVf(self, i):
        """
        vVf(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vVf(self, i)


    def vVs(self, i):
        """
        vVs(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vVs(self, i)


    def vphi(self, i):
        """
        vphi(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vphi(self, i)


    def vrh(self, i):
        """
        vrh(Geom self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.Geom_vrh(self, i)


    def getFluidVolume(self):
        """
        getFluidVolume(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_getFluidVolume(self)


    def getSolidVolume(self):
        """
        getSolidVolume(Geom self) -> d

        Parameters:
            self: duct::Geom const *

        """
        return _TaSMET.Geom_getSolidVolume(self)

Geom_swigregister = _TaSMET.Geom_swigregister
Geom_swigregister(Geom)

class ConeTube(Geom):
    """Proxy of C++ duct::ConeTube class"""
    __swig_setmethods__ = {}
    for _s in [Geom]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeTube, name, value)
    __swig_getmethods__ = {}
    for _s in [Geom]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConeTube, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::ConeTube self, Grid g, d r1, d r2, bool blapprox=True) -> ConeTube

        Parameters:
            g: duct::Grid const &
            r1: d
            r2: d
            blapprox: bool

        __init__(duct::ConeTube self, Grid g, d r1, d r2) -> ConeTube

        Parameters:
            g: duct::Grid const &
            r1: d
            r2: d

        __init__(duct::ConeTube self, ConeTube t) -> ConeTube

        Parameters:
            t: duct::ConeTube const &

        """
        this = _TaSMET.new_ConeTube(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def S(self, i):
        """
        S(ConeTube self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.ConeTube_S(self, i)


    def phi(self, i):
        """
        phi(ConeTube self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.ConeTube_phi(self, i)


    def rh(self, i):
        """
        rh(ConeTube self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.ConeTube_rh(self, i)


    def shape(self):
        """
        shape(ConeTube self) -> string

        Parameters:
            self: duct::ConeTube const *

        """
        return _TaSMET.ConeTube_shape(self)


    def copy(self):
        """
        copy(ConeTube self) -> Geom

        Parameters:
            self: duct::ConeTube const *

        """
        return _TaSMET.ConeTube_copy(self)


    def show(self):
        """
        show(ConeTube self)

        Parameters:
            self: duct::ConeTube const *

        """
        return _TaSMET.ConeTube_show(self)

    __swig_destroy__ = _TaSMET.delete_ConeTube
    __del__ = lambda self: None
ConeTube_swigregister = _TaSMET.ConeTube_swigregister
ConeTube_swigregister(ConeTube)

class CylindricalTube(ConeTube):
    """Proxy of C++ duct::CylindricalTube class"""
    __swig_setmethods__ = {}
    for _s in [ConeTube]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylindricalTube, name, value)
    __swig_getmethods__ = {}
    for _s in [ConeTube]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylindricalTube, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::CylindricalTube self, Grid g, d r, bool blapprox=True) -> CylindricalTube

        Parameters:
            g: duct::Grid const &
            r: d
            blapprox: bool

        __init__(duct::CylindricalTube self, Grid g, d r) -> CylindricalTube

        Parameters:
            g: duct::Grid const &
            r: d

        __init__(duct::CylindricalTube self, CylindricalTube t) -> CylindricalTube

        Parameters:
            t: duct::CylindricalTube const &

        """
        this = _TaSMET.new_CylindricalTube(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self):
        """
        copy(CylindricalTube self) -> Geom

        Parameters:
            self: duct::CylindricalTube const *

        """
        return _TaSMET.CylindricalTube_copy(self)


    def show(self):
        """
        show(CylindricalTube self)

        Parameters:
            self: duct::CylindricalTube const *

        """
        return _TaSMET.CylindricalTube_show(self)

    __swig_destroy__ = _TaSMET.delete_CylindricalTube
    __del__ = lambda self: None
CylindricalTube_swigregister = _TaSMET.CylindricalTube_swigregister
CylindricalTube_swigregister(CylindricalTube)

class VertPlates(Geom):
    """Proxy of C++ duct::VertPlates class"""
    __swig_setmethods__ = {}
    for _s in [Geom]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertPlates, name, value)
    __swig_getmethods__ = {}
    for _s in [Geom]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertPlates, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::VertPlates self, Grid g, d S, d phi, d y0, bool blapprox=False) -> VertPlates

        Parameters:
            g: duct::Grid const &
            S: d
            phi: d
            y0: d
            blapprox: bool

        __init__(duct::VertPlates self, Grid g, d S, d phi, d y0) -> VertPlates

        Parameters:
            g: duct::Grid const &
            S: d
            phi: d
            y0: d

        __init__(duct::VertPlates self, VertPlates t) -> VertPlates

        Parameters:
            t: duct::VertPlates const &

        """
        this = _TaSMET.new_VertPlates(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self):
        """
        copy(VertPlates self) -> Geom

        Parameters:
            self: duct::VertPlates const *

        """
        return _TaSMET.VertPlates_copy(self)


    def show(self):
        """
        show(VertPlates self)

        Parameters:
            self: duct::VertPlates const *

        """
        return _TaSMET.VertPlates_show(self)


    def shape(self):
        """
        shape(VertPlates self) -> string

        Parameters:
            self: duct::VertPlates const *

        """
        return _TaSMET.VertPlates_shape(self)


    def S(self, i):
        """
        S(VertPlates self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.VertPlates_S(self, i)


    def phi(self, i):
        """
        phi(VertPlates self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.VertPlates_phi(self, i)


    def rh(self, i):
        """
        rh(VertPlates self, us i) -> d

        Parameters:
            i: us

        """
        return _TaSMET.VertPlates_rh(self, i)

    __swig_destroy__ = _TaSMET.delete_VertPlates
    __del__ = lambda self: None
VertPlates_swigregister = _TaSMET.VertPlates_swigregister
VertPlates_swigregister(VertPlates)

class Cell(_object):
    """Proxy of C++ duct::Cell class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["gc"] = _TaSMET.Cell_gc_set
    __swig_getmethods__["gc"] = _TaSMET.Cell_gc_get
    if _newclass:
        gc = _swig_property(_TaSMET.Cell_gc_get, _TaSMET.Cell_gc_set)
    __swig_setmethods__["i"] = _TaSMET.Cell_i_set
    __swig_getmethods__["i"] = _TaSMET.Cell_i_get
    if _newclass:
        i = _swig_property(_TaSMET.Cell_i_get, _TaSMET.Cell_i_set)
    __swig_setmethods__["vx"] = _TaSMET.Cell_vx_set
    __swig_getmethods__["vx"] = _TaSMET.Cell_vx_get
    if _newclass:
        vx = _swig_property(_TaSMET.Cell_vx_get, _TaSMET.Cell_vx_set)
    __swig_setmethods__["xl"] = _TaSMET.Cell_xl_set
    __swig_getmethods__["xl"] = _TaSMET.Cell_xl_get
    if _newclass:
        xl = _swig_property(_TaSMET.Cell_xl_get, _TaSMET.Cell_xl_set)
    __swig_setmethods__["xr"] = _TaSMET.Cell_xr_set
    __swig_getmethods__["xr"] = _TaSMET.Cell_xr_get
    if _newclass:
        xr = _swig_property(_TaSMET.Cell_xr_get, _TaSMET.Cell_xr_set)
    __swig_setmethods__["vSf"] = _TaSMET.Cell_vSf_set
    __swig_getmethods__["vSf"] = _TaSMET.Cell_vSf_get
    if _newclass:
        vSf = _swig_property(_TaSMET.Cell_vSf_get, _TaSMET.Cell_vSf_set)
    __swig_setmethods__["vSs"] = _TaSMET.Cell_vSs_set
    __swig_getmethods__["vSs"] = _TaSMET.Cell_vSs_get
    if _newclass:
        vSs = _swig_property(_TaSMET.Cell_vSs_get, _TaSMET.Cell_vSs_set)
    __swig_setmethods__["vVf"] = _TaSMET.Cell_vVf_set
    __swig_getmethods__["vVf"] = _TaSMET.Cell_vVf_get
    if _newclass:
        vVf = _swig_property(_TaSMET.Cell_vVf_get, _TaSMET.Cell_vVf_set)
    __swig_setmethods__["vVs"] = _TaSMET.Cell_vVs_set
    __swig_getmethods__["vVs"] = _TaSMET.Cell_vVs_get
    if _newclass:
        vVs = _swig_property(_TaSMET.Cell_vVs_get, _TaSMET.Cell_vVs_set)
    __swig_setmethods__["Sfl"] = _TaSMET.Cell_Sfl_set
    __swig_getmethods__["Sfl"] = _TaSMET.Cell_Sfl_get
    if _newclass:
        Sfl = _swig_property(_TaSMET.Cell_Sfl_get, _TaSMET.Cell_Sfl_set)
    __swig_setmethods__["Sfr"] = _TaSMET.Cell_Sfr_set
    __swig_getmethods__["Sfr"] = _TaSMET.Cell_Sfr_get
    if _newclass:
        Sfr = _swig_property(_TaSMET.Cell_Sfr_get, _TaSMET.Cell_Sfr_set)
    __swig_setmethods__["Ssl"] = _TaSMET.Cell_Ssl_set
    __swig_getmethods__["Ssl"] = _TaSMET.Cell_Ssl_get
    if _newclass:
        Ssl = _swig_property(_TaSMET.Cell_Ssl_get, _TaSMET.Cell_Ssl_set)
    __swig_setmethods__["Ssr"] = _TaSMET.Cell_Ssr_set
    __swig_getmethods__["Ssr"] = _TaSMET.Cell_Ssr_get
    if _newclass:
        Ssr = _swig_property(_TaSMET.Cell_Ssr_get, _TaSMET.Cell_Ssr_set)
    __swig_setmethods__["vrh"] = _TaSMET.Cell_vrh_set
    __swig_getmethods__["vrh"] = _TaSMET.Cell_vrh_get
    if _newclass:
        vrh = _swig_property(_TaSMET.Cell_vrh_get, _TaSMET.Cell_vrh_set)
    __swig_setmethods__["rhl"] = _TaSMET.Cell_rhl_set
    __swig_getmethods__["rhl"] = _TaSMET.Cell_rhl_get
    if _newclass:
        rhl = _swig_property(_TaSMET.Cell_rhl_get, _TaSMET.Cell_rhl_set)
    __swig_setmethods__["rhr"] = _TaSMET.Cell_rhr_set
    __swig_getmethods__["rhr"] = _TaSMET.Cell_rhr_get
    if _newclass:
        rhr = _swig_property(_TaSMET.Cell_rhr_get, _TaSMET.Cell_rhr_set)

    def getValue(self, arg2):
        """
        getValue(Cell self, Varnr arg2) -> var

        Parameters:
            arg2: enum Varnr

        """
        return _TaSMET.Cell_getValue(self, arg2)

    __swig_destroy__ = _TaSMET.delete_Cell
    __del__ = lambda self: None
Cell_swigregister = _TaSMET.Cell_swigregister
Cell_swigregister(Cell)

class Duct(Seg):
    """Proxy of C++ duct::Duct class"""
    __swig_setmethods__ = {}
    for _s in [Seg]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duct, name, value)
    __swig_getmethods__ = {}
    for _s in [Seg]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Duct, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _TaSMET.delete_Duct
    __del__ = lambda self: None

    def init(self):
        """
        init(Duct self)

        Parameters:
            self: duct::Duct *

        """
        return _TaSMET.Duct_init(self)


    def setVarsEqs(self, arg2):
        """
        setVarsEqs(Duct self, Cell arg2)

        Parameters:
            arg2: duct::Cell &

        """
        return _TaSMET.Duct_setVarsEqs(self, arg2)


    def geom(self):
        """
        geom(Duct self) -> Geom

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_geom(self)


    def setResVar(self, *args):
        """
        setResVar(Duct self, Varnr arg2, us i, us freqnr, d value)

        Parameters:
            arg2: enum Varnr
            i: us
            freqnr: us
            value: d

        setResVar(Duct self, Varnr arg2, us freqnr, vd const & value)

        Parameters:
            arg2: enum Varnr
            freqnr: us
            value: vd const &

        """
        return _TaSMET.Duct_setResVar(self, *args)


    def setPhaseContraint(self, v):
        """
        setPhaseContraint(Duct self, PhaseConstraint v)

        Parameters:
            v: tasystem::PhaseConstraint

        """
        return _TaSMET.Duct_setPhaseContraint(self, v)


    def getx(self):
        """
        getx(Duct self) -> vd

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_getx(self)


    def getValue(self, arg2, freqnr):
        """
        getValue(Duct self, Varnr arg2, us freqnr) -> vd

        Parameters:
            arg2: enum Varnr
            freqnr: us

        """
        return _TaSMET.Duct_getValue(self, arg2, freqnr)


    def getValueT(self, arg2, timeinst):
        """
        getValueT(Duct self, Varnr arg2, d timeinst) -> vd

        Parameters:
            arg2: enum Varnr
            timeinst: d

        """
        return _TaSMET.Duct_getValueT(self, arg2, timeinst)


    def getValueC(self, arg2, freqnr):
        """
        getValueC(Duct self, Varnr arg2, us freqnr) -> vc

        Parameters:
            arg2: enum Varnr
            freqnr: us

        """
        return _TaSMET.Duct_getValueC(self, arg2, freqnr)


    def getErrorAt(self, eqnr, freqnr):
        """
        getErrorAt(Duct self, us eqnr, us freqnr) -> vd

        Parameters:
            eqnr: us
            freqnr: us

        """
        return _TaSMET.Duct_getErrorAt(self, eqnr, freqnr)


    def getNCells(self):
        """
        getNCells(Duct self) -> us

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_getNCells(self)


    def __repr__(self):
        """
        __repr__(Duct self) -> char const *

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct___repr__(self)


    def providePhaseDof(self):
        """
        providePhaseDof(Duct self) -> int

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_providePhaseDof(self)


    def phaseDofValue(self):
        """
        phaseDofValue(Duct self) -> d

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_phaseDofValue(self)


    def error(self):
        """
        error(Duct self) -> vd

        Parameters:
            self: duct::Duct const *

        """
        return _TaSMET.Duct_error(self)


    def getCell(self, i):
        """
        getCell(Duct self, int i) -> Cell

        Parameters:
            i: int

        """
        return _TaSMET.Duct_getCell(self, i)

Duct_swigregister = _TaSMET.Duct_swigregister
Duct_swigregister(Duct)

class IsentropicTube(Duct):
    """Proxy of C++ duct::IsentropicTube class"""
    __swig_setmethods__ = {}
    for _s in [Duct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsentropicTube, name, value)
    __swig_getmethods__ = {}
    for _s in [Duct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsentropicTube, name)
    __repr__ = _swig_repr

    def __init__(self, geom):
        """
        __init__(duct::IsentropicTube self, Geom geom) -> IsentropicTube

        Parameters:
            geom: duct::Geom const &

        """
        this = _TaSMET.new_IsentropicTube(geom)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self, arg2):
        """
        copy(IsentropicTube self, TaSystem arg2) -> Seg

        Parameters:
            arg2: tasystem::TaSystem const &

        """
        return _TaSMET.IsentropicTube_copy(self, arg2)

    __swig_destroy__ = _TaSMET.delete_IsentropicTube
    __del__ = lambda self: None

    def setVarsEqs(self, arg2):
        """
        setVarsEqs(IsentropicTube self, Cell arg2)

        Parameters:
            arg2: duct::Cell &

        """
        return _TaSMET.IsentropicTube_setVarsEqs(self, arg2)

IsentropicTube_swigregister = _TaSMET.IsentropicTube_swigregister
IsentropicTube_swigregister(IsentropicTube)

class DuctWithSolid(Duct):
    """Proxy of C++ duct::DuctWithSolid class"""
    __swig_setmethods__ = {}
    for _s in [Duct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuctWithSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [Duct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuctWithSolid, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TaSMET.delete_DuctWithSolid
    __del__ = lambda self: None

    def hasSolid(self):
        """
        hasSolid(DuctWithSolid self) -> bool

        Parameters:
            self: duct::DuctWithSolid const *

        """
        return _TaSMET.DuctWithSolid_hasSolid(self)


    def getSolid(self):
        """
        getSolid(DuctWithSolid self) -> solids::Solid const &

        Parameters:
            self: duct::DuctWithSolid const *

        """
        return _TaSMET.DuctWithSolid_getSolid(self)


    def setQsin(self, Qsin):
        """
        setQsin(DuctWithSolid self, d Qsin)

        Parameters:
            Qsin: d

        """
        return _TaSMET.DuctWithSolid_setQsin(self, Qsin)


    def setVarsEqs(self, c):
        """
        setVarsEqs(DuctWithSolid self, Cell c)

        Parameters:
            c: duct::Cell &

        """
        return _TaSMET.DuctWithSolid_setVarsEqs(self, c)

DuctWithSolid_swigregister = _TaSMET.DuctWithSolid_swigregister
DuctWithSolid_swigregister(DuctWithSolid)

class LaminarDuct(Duct):
    """Proxy of C++ duct::LaminarDuct class"""
    __swig_setmethods__ = {}
    for _s in [Duct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaminarDuct, name, value)
    __swig_getmethods__ = {}
    for _s in [Duct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LaminarDuct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::LaminarDuct self, Geom geom, d TwL, d Twr=-1) -> LaminarDuct

        Parameters:
            geom: duct::Geom const &
            TwL: d
            Twr: d

        __init__(duct::LaminarDuct self, Geom geom, d TwL) -> LaminarDuct

        Parameters:
            geom: duct::Geom const &
            TwL: d

        __init__(duct::LaminarDuct self, Geom geom) -> LaminarDuct

        Parameters:
            geom: duct::Geom const &

        """
        this = _TaSMET.new_LaminarDuct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_LaminarDuct
    __del__ = lambda self: None

    def setInsulated(self, i):
        """
        setInsulated(LaminarDuct self, bool i)

        Parameters:
            i: bool

        """
        return _TaSMET.LaminarDuct_setInsulated(self, i)


    def isInsulated(self):
        """
        isInsulated(LaminarDuct self) -> bool

        Parameters:
            self: duct::LaminarDuct const *

        """
        return _TaSMET.LaminarDuct_isInsulated(self)


    def copy(self, s):
        """
        copy(LaminarDuct self, TaSystem s) -> Seg

        Parameters:
            s: tasystem::TaSystem const &

        """
        return _TaSMET.LaminarDuct_copy(self, s)

LaminarDuct_swigregister = _TaSMET.LaminarDuct_swigregister
LaminarDuct_swigregister(LaminarDuct)

class Stack(DuctWithSolid, LaminarDuct):
    """Proxy of C++ duct::Stack class"""
    __swig_setmethods__ = {}
    for _s in [DuctWithSolid, LaminarDuct]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stack, name, value)
    __swig_getmethods__ = {}
    for _s in [DuctWithSolid, LaminarDuct]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stack, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(duct::Stack self, Geom geom, string const & solid) -> Stack

        Parameters:
            geom: duct::Geom const &
            solid: string const &

        __init__(duct::Stack self, Stack arg2, TaSystem arg3) -> Stack

        Parameters:
            arg2: duct::Stack const &
            arg3: tasystem::TaSystem const &

        """
        this = _TaSMET.new_Stack(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_Stack
    __del__ = lambda self: None
Stack_swigregister = _TaSMET.Stack_swigregister
Stack_swigregister(Stack)

class TaSystem(Globalconf):
    """Proxy of C++ tasystem::TaSystem class"""
    __swig_setmethods__ = {}
    for _s in [Globalconf]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [Globalconf]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(tasystem::TaSystem self) -> TaSystem
        __init__(tasystem::TaSystem self, Globalconf g) -> TaSystem

        Parameters:
            g: tasystem::Globalconf const &

        """
        this = _TaSMET.new_TaSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setGc(self, gc):
        """
        setGc(TaSystem self, Globalconf gc)

        Parameters:
            gc: tasystem::Globalconf const &

        """
        return _TaSMET.TaSystem_setGc(self, gc)


    def setMass(self, mass):
        """
        setMass(TaSystem self, d mass)

        Parameters:
            mass: d

        """
        return _TaSMET.TaSystem_setMass(self, mass)


    def getMass(self):
        """
        getMass(TaSystem self) -> d

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_getMass(self)

    __swig_destroy__ = _TaSMET.delete_TaSystem
    __del__ = lambda self: None

    def copy(self):
        """
        copy(TaSystem self) -> TaSystem

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_copy(self)


    def nSegs(self):
        """
        nSegs(TaSystem self) -> us

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_nSegs(self)


    def nConnectors(self):
        """
        nConnectors(TaSystem self) -> us

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_nConnectors(self)


    def __iadd__(self, *args):
        """
        __iadd__(TaSystem self, Connector c) -> TaSystem

        Parameters:
            c: segment::Connector const &

        __iadd__(TaSystem self, Seg s) -> TaSystem

        Parameters:
            s: segment::Seg const &

        """
        return _TaSMET.TaSystem___iadd__(self, *args)


    def showJac(self):
        """
        showJac(TaSystem self) -> dmat

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_showJac(self)


    def show(self, detailnr=0):
        """
        show(TaSystem self, us detailnr=0)

        Parameters:
            detailnr: us

        show(TaSystem self)

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_show(self, detailnr)


    def init(self):
        """
        init(TaSystem self)

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_init(self)


    def checkInit(self):
        """
        checkInit(TaSystem self)

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_checkInit(self)


    def Error(self):
        """
        Error(TaSystem self) -> vd

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_Error(self)


    def getRes(self):
        """
        getRes(TaSystem self) -> vd

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_getRes(self)


    def setRes(self, resvec):
        """
        setRes(TaSystem self, vd const & resvec)

        Parameters:
            resvec: vd const &

        """
        return _TaSMET.TaSystem_setRes(self, resvec)


    def updateNf(self, arg2):
        """
        updateNf(TaSystem self, us arg2)

        Parameters:
            arg2: us

        """
        return _TaSMET.TaSystem_updateNf(self, arg2)


    def resetHarmonics(self):
        """
        resetHarmonics(TaSystem self)

        Parameters:
            self: tasystem::TaSystem *

        """
        return _TaSMET.TaSystem_resetHarmonics(self)


    def getDuct(self, ID):
        """
        getDuct(TaSystem self, string const & ID) -> Duct

        Parameters:
            ID: string const &

        """
        return _TaSMET.TaSystem_getDuct(self, ID)


    def getConnnectorVolume(self, ID):
        """
        getConnnectorVolume(TaSystem self, string const & ID) -> ConnectorVolume

        Parameters:
            ID: string const &

        """
        return _TaSMET.TaSystem_getConnnectorVolume(self, ID)


    def getPiston(self, ID):
        """
        getPiston(TaSystem self, string const & ID) -> Piston

        Parameters:
            ID: string const &

        """
        return _TaSMET.TaSystem_getPiston(self, ID)


    def getNDofs(self):
        """
        getNDofs(TaSystem self) -> us

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_getNDofs(self)


    def getNEqs(self):
        """
        getNEqs(TaSystem self) -> us

        Parameters:
            self: tasystem::TaSystem const *

        """
        return _TaSMET.TaSystem_getNEqs(self)


    def getConnector(self, id):
        """
        getConnector(TaSystem self, string const & id) -> Connector

        Parameters:
            id: string const &

        """
        return _TaSMET.TaSystem_getConnector(self, id)


    def getSeg(self, id):
        """
        getSeg(TaSystem self, string const & id) -> Seg

        Parameters:
            id: string const &

        """
        return _TaSMET.TaSystem_getSeg(self, id)

TaSystem_swigregister = _TaSMET.TaSystem_swigregister
TaSystem_swigregister(TaSystem)

class EngineSystem(TaSystem):
    """Proxy of C++ tasystem::EngineSystem class"""
    __swig_setmethods__ = {}
    for _s in [TaSystem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [TaSystem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EngineSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(tasystem::EngineSystem self, Globalconf gc) -> EngineSystem

        Parameters:
            gc: tasystem::Globalconf const &

        __init__(tasystem::EngineSystem self, EngineSystem arg2) -> EngineSystem

        Parameters:
            arg2: tasystem::EngineSystem const &

        __init__(tasystem::EngineSystem self, TaSystem arg2) -> EngineSystem

        Parameters:
            arg2: tasystem::TaSystem const &

        """
        this = _TaSMET.new_EngineSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def copy(self):
        """
        copy(EngineSystem self) -> TaSystem

        Parameters:
            self: tasystem::EngineSystem const *

        """
        return _TaSMET.EngineSystem_copy(self)


    def Error(self):
        """
        Error(EngineSystem self) -> vd

        Parameters:
            self: tasystem::EngineSystem *

        """
        return _TaSMET.EngineSystem_Error(self)


    def setRes(self, res):
        """
        setRes(EngineSystem self, vd const & res)

        Parameters:
            res: vd const &

        """
        return _TaSMET.EngineSystem_setRes(self, res)


    def getRes(self):
        """
        getRes(EngineSystem self) -> vd

        Parameters:
            self: tasystem::EngineSystem *

        """
        return _TaSMET.EngineSystem_getRes(self)


    def init(self):
        """
        init(EngineSystem self)

        Parameters:
            self: tasystem::EngineSystem *

        """
        return _TaSMET.EngineSystem_init(self)


    def show(self, detailnr=0):
        """
        show(EngineSystem self, us detailnr=0)

        Parameters:
            detailnr: us

        show(EngineSystem self)

        Parameters:
            self: tasystem::EngineSystem *

        """
        return _TaSMET.EngineSystem_show(self, detailnr)


    def domg(self):
        """
        domg(EngineSystem self) -> vd

        Parameters:
            self: tasystem::EngineSystem *

        """
        return _TaSMET.EngineSystem_domg(self)

    __swig_destroy__ = _TaSMET.delete_EngineSystem
    __del__ = lambda self: None
EngineSystem_swigregister = _TaSMET.EngineSystem_swigregister
EngineSystem_swigregister(EngineSystem)

class ErrorVals(_object):
    """Proxy of C++ tasystem::ErrorVals class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorVals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorVals, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(tasystem::ErrorVals self, d fe, d re) -> ErrorVals

        Parameters:
            fe: d
            re: d

        __init__(tasystem::ErrorVals self, ErrorVals e) -> ErrorVals

        Parameters:
            e: tasystem::ErrorVals const &

        """
        this = _TaSMET.new_ErrorVals(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getFuner(self):
        """
        getFuner(ErrorVals self) -> d

        Parameters:
            self: tasystem::ErrorVals const *

        """
        return _TaSMET.ErrorVals_getFuner(self)


    def getReler(self):
        """
        getReler(ErrorVals self) -> d

        Parameters:
            self: tasystem::ErrorVals const *

        """
        return _TaSMET.ErrorVals_getReler(self)

    __swig_destroy__ = _TaSMET.delete_ErrorVals
    __del__ = lambda self: None
ErrorVals_swigregister = _TaSMET.ErrorVals_swigregister
ErrorVals_swigregister(ErrorVals)

class SolProgress(_object):
    """Proxy of C++ tasystem::SolProgress class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolProgress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolProgress, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(tasystem::SolProgress self) -> SolProgress"""
        this = _TaSMET.new_SolProgress()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TaSMET.delete_SolProgress
    __del__ = lambda self: None

    def __iadd__(self, e):
        """
        __iadd__(SolProgress self, ErrorVals e) -> SolProgress

        Parameters:
            e: tasystem::ErrorVals const &

        """
        return _TaSMET.SolProgress___iadd__(self, e)


    def Funer(self):
        """
        Funer(SolProgress self) -> vd

        Parameters:
            self: tasystem::SolProgress const *

        """
        return _TaSMET.SolProgress_Funer(self)


    def Reler(self):
        """
        Reler(SolProgress self) -> vd

        Parameters:
            self: tasystem::SolProgress const *

        """
        return _TaSMET.SolProgress_Reler(self)

SolProgress_swigregister = _TaSMET.SolProgress_swigregister
SolProgress_swigregister(SolProgress)

class SolverConfiguration(_object):
    """Proxy of C++ tasystem::SolverConfiguration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverConfiguration, name)
    __repr__ = _swig_repr

    def setWait(self, w):
        """
        setWait(SolverConfiguration self, bool w)

        Parameters:
            w: bool

        """
        return _TaSMET.SolverConfiguration_setWait(self, w)


    def setMaxiter(self, maxiter1):
        """
        setMaxiter(SolverConfiguration self, us maxiter1)

        Parameters:
            maxiter1: us

        """
        return _TaSMET.SolverConfiguration_setMaxiter(self, maxiter1)


    def setFuntol(self, ft):
        """
        setFuntol(SolverConfiguration self, d ft)

        Parameters:
            ft: d

        """
        return _TaSMET.SolverConfiguration_setFuntol(self, ft)


    def setReltol(self, ft):
        """
        setReltol(SolverConfiguration self, d ft)

        Parameters:
            ft: d

        """
        return _TaSMET.SolverConfiguration_setReltol(self, ft)


    def setDampfac(self, df):
        """
        setDampfac(SolverConfiguration self, d df)

        Parameters:
            df: d

        """
        return _TaSMET.SolverConfiguration_setDampfac(self, df)


    def setMindampfac(self, df):
        """
        setMindampfac(SolverConfiguration self, d df)

        Parameters:
            df: d

        """
        return _TaSMET.SolverConfiguration_setMindampfac(self, df)


    def setMaxdampfac(self, df):
        """
        setMaxdampfac(SolverConfiguration self, d df)

        Parameters:
            df: d

        """
        return _TaSMET.SolverConfiguration_setMaxdampfac(self, df)


    def __init__(self, *args):
        """
        __init__(tasystem::SolverConfiguration self, SolverConfiguration o) -> SolverConfiguration

        Parameters:
            o: tasystem::SolverConfiguration const &

        __init__(tasystem::SolverConfiguration self, bool wait1) -> SolverConfiguration

        Parameters:
            wait1: bool

        __init__(tasystem::SolverConfiguration self, us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1, d maxdampfac=1, bool wait=True) -> SolverConfiguration

        Parameters:
            maxiter: us
            funtol: d
            reltol: d
            mindampfac: d
            maxdampfac: d
            wait: bool

        __init__(tasystem::SolverConfiguration self, us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1, d maxdampfac=1) -> SolverConfiguration

        Parameters:
            maxiter: us
            funtol: d
            reltol: d
            mindampfac: d
            maxdampfac: d

        __init__(tasystem::SolverConfiguration self, us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1) -> SolverConfiguration

        Parameters:
            maxiter: us
            funtol: d
            reltol: d
            mindampfac: d

        __init__(tasystem::SolverConfiguration self, us maxiter=100, d funtol=1e-6, d reltol=1e-6) -> SolverConfiguration

        Parameters:
            maxiter: us
            funtol: d
            reltol: d

        __init__(tasystem::SolverConfiguration self, us maxiter=100, d funtol=1e-6) -> SolverConfiguration

        Parameters:
            maxiter: us
            funtol: d

        __init__(tasystem::SolverConfiguration self, us maxiter=100) -> SolverConfiguration

        Parameters:
            maxiter: us

        __init__(tasystem::SolverConfiguration self) -> SolverConfiguration
        """
        this = _TaSMET.new_SolverConfiguration(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def show(self):
        """
        show(SolverConfiguration self)

        Parameters:
            self: tasystem::SolverConfiguration const *

        """
        return _TaSMET.SolverConfiguration_show(self)

    __swig_destroy__ = _TaSMET.delete_SolverConfiguration
    __del__ = lambda self: None
SolverConfiguration_swigregister = _TaSMET.SolverConfiguration_swigregister
SolverConfiguration_swigregister(SolverConfiguration)


def doIter(sys, sc=None):
    """
    doIter(TaSystem sys, SolverConfiguration sc=None) -> ErrorVals

    Parameters:
        sys: tasystem::TaSystem *
        sc: tasystem::SolverConfiguration *

    doIter(TaSystem sys) -> ErrorVals

    Parameters:
        sys: tasystem::TaSystem *

    """
    return _TaSMET.doIter(sys, sc)
class Solver(SolverConfiguration):
    """Proxy of C++ tasystem::Solver class"""
    __swig_setmethods__ = {}
    for _s in [SolverConfiguration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    for _s in [SolverConfiguration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(tasystem::Solver self, SolverConfiguration sc) -> Solver

        Parameters:
            sc: tasystem::SolverConfiguration const

        __init__(tasystem::Solver self) -> Solver
        """
        this = _TaSMET.new_Solver(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setSc(self, sc):
        """
        setSc(Solver self, SolverConfiguration sc)

        Parameters:
            sc: tasystem::SolverConfiguration const &

        """
        return _TaSMET.Solver_setSc(self, sc)


    def stop(self):
        """
        stop(Solver self)

        Parameters:
            self: tasystem::Solver *

        """
        return _TaSMET.Solver_stop(self)


    def solve(self, *args):
        """
        solve(Solver self, TaSystem arg2) -> SolProgress

        Parameters:
            arg2: tasystem::TaSystem &

        solve(Solver self, TaSystem arg2, SolverConfiguration sc) -> SolProgress

        Parameters:
            arg2: tasystem::TaSystem &
            sc: tasystem::SolverConfiguration const &

        """
        return _TaSMET.Solver_solve(self, *args)


    def getSp(self):
        """
        getSp(Solver self) -> SolProgress

        Parameters:
            self: tasystem::Solver const *

        """
        return _TaSMET.Solver_getSp(self)

    __swig_destroy__ = _TaSMET.delete_Solver
    __del__ = lambda self: None
Solver_swigregister = _TaSMET.Solver_swigregister
Solver_swigregister(Solver)




# This file is compatible with both classic and new-style classes.


