/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_dmat swig_types[1]
#define SWIGTYPE_p_double swig_types[2]
#define SWIGTYPE_p_duct__AdiabaticWall swig_types[3]
#define SWIGTYPE_p_duct__AutoBoundaryLayer swig_types[4]
#define SWIGTYPE_p_duct__BoundaryLayer swig_types[5]
#define SWIGTYPE_p_duct__Cell swig_types[6]
#define SWIGTYPE_p_duct__ConeTube swig_types[7]
#define SWIGTYPE_p_duct__ConnectorVolume swig_types[8]
#define SWIGTYPE_p_duct__CylindricalTube swig_types[9]
#define SWIGTYPE_p_duct__Duct swig_types[10]
#define SWIGTYPE_p_duct__DuctBc swig_types[11]
#define SWIGTYPE_p_duct__DuctConnector swig_types[12]
#define SWIGTYPE_p_duct__DuctWithSolid swig_types[13]
#define SWIGTYPE_p_duct__Geom swig_types[14]
#define SWIGTYPE_p_duct__Grid swig_types[15]
#define SWIGTYPE_p_duct__ImpedanceBc swig_types[16]
#define SWIGTYPE_p_duct__IsentropicTube swig_types[17]
#define SWIGTYPE_p_duct__IsoTWall swig_types[18]
#define SWIGTYPE_p_duct__LaminarDuct swig_types[19]
#define SWIGTYPE_p_duct__PressureBc swig_types[20]
#define SWIGTYPE_p_duct__Stack swig_types[21]
#define SWIGTYPE_p_duct__VelocityBc swig_types[22]
#define SWIGTYPE_p_duct__VertPlates swig_types[23]
#define SWIGTYPE_p_gases__Gas swig_types[24]
#define SWIGTYPE_p_mech__DuctPistonConnector swig_types[25]
#define SWIGTYPE_p_mech__MechBc swig_types[26]
#define SWIGTYPE_p_mech__Piston swig_types[27]
#define SWIGTYPE_p_mech__PistonConfiguration swig_types[28]
#define SWIGTYPE_p_segment__Connector swig_types[29]
#define SWIGTYPE_p_segment__Pos swig_types[30]
#define SWIGTYPE_p_segment__Seg swig_types[31]
#define SWIGTYPE_p_segment__SegConBase swig_types[32]
#define SWIGTYPE_p_solids__Solid swig_types[33]
#define SWIGTYPE_p_std__complexT_double_t swig_types[34]
#define SWIGTYPE_p_tasystem__EngineSystem swig_types[35]
#define SWIGTYPE_p_tasystem__ErrorVals swig_types[36]
#define SWIGTYPE_p_tasystem__Globalconf swig_types[37]
#define SWIGTYPE_p_tasystem__Jacobian swig_types[38]
#define SWIGTYPE_p_tasystem__PhaseConstraint swig_types[39]
#define SWIGTYPE_p_tasystem__SolProgress swig_types[40]
#define SWIGTYPE_p_tasystem__Solver swig_types[41]
#define SWIGTYPE_p_tasystem__SolverConfiguration swig_types[42]
#define SWIGTYPE_p_tasystem__TaSystem swig_types[43]
#define SWIGTYPE_p_tasystem__var swig_types[44]
#define SWIGTYPE_p_unsigned_int swig_types[45]
static swig_type_info *swig_types[47];
static swig_module_info swig_module = {swig_types, 46, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _TaSMET.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__TaSMET

#else
#  define SWIG_init    init_TaSMET

#endif
#define SWIG_name    "_TaSMET"

#define SWIGVERSION 0x030007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


  #define PY_ARRAY_UNIQUE_SYMBOL npy_array
  #define SWIG_FILE_WITH_INIT

  // Conversion between numpy and Armadillo
  #include "arma_numpy.h"

  #include "settracer.h"
  #include "constants.h"

  // My exceptions
  #include "exception.h"

  // Global config
  #include "globalconf.h"
  #include "var.h"

  // Build a system
  #include "tasystem.h"
  #include "enginesystem.h"

  #include "boundarylayer.h"
  #include "geom.h"
  #include "conetube.h"

  // For Segments and connectors
  #include "segconbase.h"
  #include "connectorvolume.h"
  // Connectors
  #include "connector.h"
  #include "ductbc.h"
  #include "ductconnector.h"
  #include "ductpistonconnector.h"

  #include "pressurebc.h"
  #include "impedancebc.h"
  #include "velocitybc.h"
  #include "adiabaticwall.h"  
  #include "isotwall.h"  

  // Segments
  #include "seg.h"
  #include "piston.h"
  #include "mechbc.h"

  // Ducts
  #include "grid.h"
  #include "duct.h"
  #include "cell.h"
  #include "isentropictube.h"
  #include "laminarduct.h"
  #include "stack.h"

  // Solver
  #include "solverconfiguration.h"
  #include "errorvals.h"
  #include "solprogress.h"
  #include "solver.h"

  // A small wrapper for this function, as TRACERNAME is not
  // substituted by its macro value in SWIG.
  inline void setTASMETTracer(int t) {
    tracer::setTracer<TRACERNAME>(t);
  }

  

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


#include <string>


#include <complex> 


  // #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
  #define PY_ARRAY_UNIQUE_SYMBOL npy_array
  #include <numpy/ndarrayobject.h>
  /* #define NO_IMPORT_ARRAY */
  #define SWIG_FILE_WITH_INIT
  #include <cerrno>
  #include <cstdlib>
  #include "vtypes.h"
  #include "arma_numpy.h"


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


  #include <exception>
  


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< int >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_clearConsole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":clearConsole")) SWIG_fail;
  clearConsole();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setTASMETTracer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:setTASMETTracer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setTASMETTracer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  setTASMETTracer(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *none_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "none",SWIG_From_int(static_cast< int >(none)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *rho_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "rho",SWIG_From_int(static_cast< int >(rho)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *m_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "m",SWIG_From_int(static_cast< int >(m)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *T_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "T",SWIG_From_int(static_cast< int >(T)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *p_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "p",SWIG_From_int(static_cast< int >(p)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *Ts_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "Ts",SWIG_From_int(static_cast< int >(Ts)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *Tw_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "Tw",SWIG_From_int(static_cast< int >(Tw)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *mH_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "mH",SWIG_From_int(static_cast< int >(mH)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *U_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "U",SWIG_From_int(static_cast< int >(U)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *u_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "u",SWIG_From_int(static_cast< int >(u)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *mu_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "mu",SWIG_From_int(static_cast< int >(mu)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *Q_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "Q",SWIG_From_int(static_cast< int >(Q)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *Qs_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "Qs",SWIG_From_int(static_cast< int >(Qs)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *F_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "F",SWIG_From_int(static_cast< int >(F)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *x_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "x",SWIG_From_int(static_cast< int >(x)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *Z_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "Z",SWIG_From_int(static_cast< int >(Z)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *left_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "left",SWIG_From_int(static_cast< int >(segment::left)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *right_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "right",SWIG_From_int(static_cast< int >(segment::right)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_Globalconf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  string *arg3 = 0 ;
  d arg4 ;
  d arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  tasystem::Globalconf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Globalconf",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Globalconf" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Globalconf" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Globalconf" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Globalconf" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Globalconf" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Globalconf" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  try {
    result = (tasystem::Globalconf *)new tasystem::Globalconf(arg1,arg2,(string const &)*arg3,arg4,arg5);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__Globalconf, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_airSTP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< tasystem::Globalconf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_airSTP",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Globalconf_airSTP" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_airSTP" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  try {
    result = tasystem::Globalconf::airSTP(arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj((new tasystem::Globalconf(static_cast< const tasystem::Globalconf& >(result))), SWIGTYPE_p_tasystem__Globalconf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_heliumSTP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< tasystem::Globalconf > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_heliumSTP",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Globalconf_heliumSTP" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_heliumSTP" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  try {
    result = tasystem::Globalconf::heliumSTP(arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj((new tasystem::Globalconf(static_cast< const tasystem::Globalconf& >(result))), SWIGTYPE_p_tasystem__Globalconf, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_Nf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_Nf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_Nf" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (us *) &((tasystem::Globalconf const *)arg1)->Nf();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_Ns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_Ns",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_Ns" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (us *) &((tasystem::Globalconf const *)arg1)->Ns();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Globalconf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Globalconf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Globalconf" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_getomg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_getomg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_getomg" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->getomg();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_getfreq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_getfreq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_getfreq" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->getfreq();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_meshPeclet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  d arg2 ;
  d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Globalconf_meshPeclet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_meshPeclet" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_meshPeclet" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Globalconf_meshPeclet" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  result = (d)((tasystem::Globalconf const *)arg1)->meshPeclet(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_c0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_c0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_c0" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->c0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_rho0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_rho0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_rho0" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->rho0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_deltanu0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_deltanu0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_deltanu0" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->deltanu0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_deltanu0min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_deltanu0min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_deltanu0min" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->deltanu0min();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_T0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_T0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_T0" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->T0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_p0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_p0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_p0" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (d)((tasystem::Globalconf const *)arg1)->p0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_setNf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_setNf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_setNf" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_setNf" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  (arg1)->setNf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_setomg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_setomg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_setomg" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_setomg" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setomg(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_setfreq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_setfreq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_setfreq" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Globalconf_setfreq" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setfreq(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_iDFT_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_iDFT_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_iDFT_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_iDFT_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_iDFT_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->iDFT = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_iDFT_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_iDFT_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_iDFT_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->iDFT);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_fDFT_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_fDFT_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_fDFT_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_fDFT_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_fDFT_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->fDFT = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_fDFT_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_fDFT_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_fDFT_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->fDFT);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_DDTfd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_DDTfd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_DDTfd_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_DDTfd_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_DDTfd_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->DDTfd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_DDTfd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_DDTfd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_DDTfd_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->DDTfd);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_DDTtd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_DDTtd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_DDTtd_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_DDTtd_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_DDTtd_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->DDTtd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_DDTtd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_DDTtd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_DDTtd_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->DDTtd);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_ddt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_ddt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_ddt_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_ddt_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_ddt_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->ddt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_ddt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_ddt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_ddt_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->ddt);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_iddt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  dmat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_iddt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_iddt_set" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dmat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_iddt_set" "', argument " "2"" of type '" "dmat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_iddt_set" "', argument " "2"" of type '" "dmat""'");
    } else {
      dmat * temp = reinterpret_cast< dmat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->iddt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_iddt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_iddt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_iddt_get" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result =  ((arg1)->iddt);
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_setGas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Globalconf_setGas",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_setGas" "', argument " "1"" of type '" "tasystem::Globalconf *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Globalconf_setGas" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Globalconf_setGas" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setGas((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_gas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gases::Gas *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_gas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_gas" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  result = (gases::Gas *) &((tasystem::Globalconf const *)arg1)->gas();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gases__Gas, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Globalconf_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Globalconf_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Globalconf_show" "', argument " "1"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ((tasystem::Globalconf const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Globalconf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__Globalconf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_var_setDofNr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_setDofNr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_setDofNr" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_setDofNr" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  (arg1)->setDofNr(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_getDofNr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_getDofNr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_getDofNr" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (int)((tasystem::var const *)arg1)->getDofNr();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_var")) SWIG_fail;
  result = (tasystem::var *)new tasystem::var();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::var const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (tasystem::var *)new tasystem::var((tasystem::var const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  try {
    result = (tasystem::var *)new tasystem::var((tasystem::Globalconf const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_var",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_var" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    result = (tasystem::var *)new tasystem::var((tasystem::Globalconf const &)*arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  vd *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_var",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_var" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (tasystem::var *)new tasystem::var((tasystem::Globalconf const &)*arg1,(vd const &)*arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  vd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_var",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  try {
    result = (tasystem::var *)new tasystem::var((tasystem::Globalconf const &)*arg1,(vd const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  vc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vc temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_var",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_var" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  {
    // cout << "Converting array to vc...\n";
    temp2=vc_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2; 
  }
  result = (tasystem::var *)new tasystem::var((tasystem::Globalconf const &)*arg1,(vc const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_var__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_var__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_var__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_var__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a complex array..\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_COMPLEX128) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a complex array..\n";
        // }
      }
      if (_v) {
        return _wrap_new_var__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a double array...\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_DOUBLE) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a double array.\n";
        // }
      }
      if (_v) {
        return _wrap_new_var__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a double array...\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_DOUBLE) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a double array.\n";
        // }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_var__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::var()\n"
    "    tasystem::var::var(tasystem::var const &)\n"
    "    tasystem::var::var(tasystem::Globalconf const &)\n"
    "    tasystem::var::var(tasystem::Globalconf const &,double)\n"
    "    tasystem::var::var(tasystem::Globalconf const &,vd const &,bool)\n"
    "    tasystem::var::var(tasystem::Globalconf const &,vd const &)\n"
    "    tasystem::var::var(tasystem::Globalconf const &,vc const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_var" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_gc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::Globalconf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_gc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_gc" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (tasystem::Globalconf *) &((tasystem::var const *)arg1)->gc();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var___call__" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var___call__" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((tasystem::var const *)arg1)->operator ()(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_tdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_tdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_tdata" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (vd *) &((tasystem::var const *)arg1)->tdata();
  {
    // cout << "vd& to numpy\n\n";
    const vd& res=*result;
    resultobj=npy_from_vd(res);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_adata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_adata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_adata" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (vd *) &((tasystem::var const *)arg1)->adata();
  {
    // cout << "vd& to numpy\n\n";
    const vd& res=*result;
    resultobj=npy_from_vd(res);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var___call__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var___call__" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = (vd *) &((tasystem::var const *)arg1)->operator ()();
  {
    // cout << "vd& to numpy\n\n";
    const vd& res=*result;
    resultobj=npy_from_vd(res);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_var___call____SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_var___call____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'var___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::operator ()(us) const\n"
    "    tasystem::var::operator ()() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_var_timeResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  us arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:var_timeResponse",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponse" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_timeResponse" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "var_timeResponse" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  result = ((tasystem::var const *)arg1)->timeResponse(arg2,arg3);
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_timeResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponse" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_timeResponse" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = ((tasystem::var const *)arg1)->timeResponse(arg2);
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_timeResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponse" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = ((tasystem::var const *)arg1)->timeResponse();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_var_timeResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_var_timeResponse__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_var_timeResponse__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'var_timeResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::timeResponse(us,us) const\n"
    "    tasystem::var::timeResponse(us) const\n"
    "    tasystem::var::timeResponse() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_var_timeResponseTime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  us arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:var_timeResponseTime",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponseTime" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_timeResponseTime" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "var_timeResponseTime" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  result = ((tasystem::var const *)arg1)->timeResponseTime(arg2,arg3);
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponseTime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_timeResponseTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponseTime" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_timeResponseTime" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = ((tasystem::var const *)arg1)->timeResponseTime(arg2);
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponseTime__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_timeResponseTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_timeResponseTime" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = ((tasystem::var const *)arg1)->timeResponseTime();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_timeResponseTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_var_timeResponseTime__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_var_timeResponseTime__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_var_timeResponseTime__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'var_timeResponseTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::timeResponseTime(us,us) const\n"
    "    tasystem::var::timeResponseTime(us) const\n"
    "    tasystem::var::timeResponseTime() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_var_setadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  vd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_setadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_setadata" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  (arg1)->setadata((vd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_settdata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_settdata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_settdata" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_settdata" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->settdata(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_settdata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  vd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_settdata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_settdata" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  (arg1)->settdata((vd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_settdata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_var_settdata__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a double array...\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_DOUBLE) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a double array.\n";
        // }
      }
      if (_v) {
        return _wrap_var_settdata__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'var_settdata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::settdata(double)\n"
    "    tasystem::var::settdata(vd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_var_setadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  us arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:var_setadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_setadata" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_setadata" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "var_setadata" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->setadata(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_setadata__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  vc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vc temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:var_setadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_setadata" "', argument " "1"" of type '" "tasystem::var *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  {
    // cout << "Converting array to vc...\n";
    temp2=vc_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2; 
  }
  (arg1)->setadata((vc const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_var_setadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a complex array..\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_COMPLEX128) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a complex array..\n";
        // }
      }
      if (_v) {
        return _wrap_var_setadata__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // cout << "Check if it is a double array...\n";
        _v=(PyArray_Check(argv[1]) &&
          (PyArray_TYPE((PyArrayObject*) argv[1])==NPY_DOUBLE) &&
          (PyArray_NDIM((PyArrayObject*) argv[1])==1))?1:0;
        // if(_v){
        //   cout << "Is is a double array.\n";
        // }
      }
      if (_v) {
        return _wrap_var_setadata__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_var_setadata__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'var_setadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::var::setadata(vd const &)\n"
    "    tasystem::var::setadata(us,double)\n"
    "    tasystem::var::setadata(vc const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_var_getcRes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::var *arg1 = (tasystem::var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vc result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:var_getcRes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_getcRes" "', argument " "1"" of type '" "tasystem::var const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::var * >(argp1);
  result = ((tasystem::var const *)arg1)->getcRes();
  {
    // cout << "vc to numpy\n";
    resultobj=npy_from_vc(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *var_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__var, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SegConBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SegConBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SegConBase" "', argument " "1"" of type '" "segment::SegConBase *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SegConBase___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase___repr__" "', argument " "1"" of type '" "segment::SegConBase const *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  result = (char *)((segment::SegConBase const *)arg1)->__repr__();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SegConBase_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_getName" "', argument " "1"" of type '" "segment::SegConBase const *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  result = (std::string *) &((segment::SegConBase const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SegConBase_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_getID" "', argument " "1"" of type '" "segment::SegConBase const *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  result = (std::string *) &((segment::SegConBase const *)arg1)->getID();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SegConBase_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_setName" "', argument " "1"" of type '" "segment::SegConBase *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SegConBase_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SegConBase_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setName((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_setID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SegConBase_setID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_setID" "', argument " "1"" of type '" "segment::SegConBase *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SegConBase_setID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SegConBase_setID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setID((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_arbitrateMassEq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SegConBase_arbitrateMassEq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_arbitrateMassEq" "', argument " "1"" of type '" "segment::SegConBase const *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  result = (int)((segment::SegConBase const *)arg1)->arbitrateMassEq();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SegConBase_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::SegConBase *arg1 = (segment::SegConBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SegConBase_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__SegConBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SegConBase_error" "', argument " "1"" of type '" "segment::SegConBase const *""'"); 
  }
  arg1 = reinterpret_cast< segment::SegConBase * >(argp1);
  result = ((segment::SegConBase const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SegConBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_segment__SegConBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PhaseConstraint_var_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  Varnr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PhaseConstraint_var_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_var_set" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseConstraint_var_set" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  if (arg1) (arg1)->var = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhaseConstraint_var_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Varnr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhaseConstraint_var_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_var_get" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  result = (Varnr) ((arg1)->var);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhaseConstraint_freqnr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PhaseConstraint_freqnr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_freqnr_set" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseConstraint_freqnr_set" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  if (arg1) (arg1)->freqnr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhaseConstraint_freqnr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhaseConstraint_freqnr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_freqnr_get" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  result = (us) ((arg1)->freqnr);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhaseConstraint_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  tasystem::Pos arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PhaseConstraint_pos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_pos_set" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseConstraint_pos_set" "', argument " "2"" of type '" "tasystem::Pos""'");
  } 
  arg2 = static_cast< tasystem::Pos >(val2);
  if (arg1) (arg1)->pos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhaseConstraint_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::Pos result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhaseConstraint_pos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseConstraint_pos_get" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  result = (tasystem::Pos) ((arg1)->pos);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PhaseConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Varnr arg1 ;
  us arg2 ;
  tasystem::Pos arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  tasystem::PhaseConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PhaseConstraint",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PhaseConstraint" "', argument " "1"" of type '" "Varnr""'");
  } 
  arg1 = static_cast< Varnr >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PhaseConstraint" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PhaseConstraint" "', argument " "3"" of type '" "tasystem::Pos""'");
  } 
  arg3 = static_cast< tasystem::Pos >(val3);
  try {
    result = (tasystem::PhaseConstraint *)new tasystem::PhaseConstraint(arg1,arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__PhaseConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PhaseConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Varnr arg1 ;
  us arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::PhaseConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PhaseConstraint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PhaseConstraint" "', argument " "1"" of type '" "Varnr""'");
  } 
  arg1 = static_cast< Varnr >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PhaseConstraint" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  try {
    result = (tasystem::PhaseConstraint *)new tasystem::PhaseConstraint(arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__PhaseConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PhaseConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Varnr arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::PhaseConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PhaseConstraint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PhaseConstraint" "', argument " "1"" of type '" "Varnr""'");
  } 
  arg1 = static_cast< Varnr >(val1);
  try {
    result = (tasystem::PhaseConstraint *)new tasystem::PhaseConstraint(arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__PhaseConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PhaseConstraint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PhaseConstraint__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PhaseConstraint__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PhaseConstraint__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PhaseConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::PhaseConstraint::PhaseConstraint(Varnr,us,tasystem::Pos)\n"
    "    tasystem::PhaseConstraint::PhaseConstraint(Varnr,us)\n"
    "    tasystem::PhaseConstraint::PhaseConstraint(Varnr)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PhaseConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::PhaseConstraint *arg1 = (tasystem::PhaseConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PhaseConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__PhaseConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PhaseConstraint" "', argument " "1"" of type '" "tasystem::PhaseConstraint *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::PhaseConstraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PhaseConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__PhaseConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Connector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::Connector *arg1 = (segment::Connector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Connector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__Connector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Connector" "', argument " "1"" of type '" "segment::Connector *""'"); 
  }
  arg1 = reinterpret_cast< segment::Connector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Connector_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::Connector *arg1 = (segment::Connector *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Connector_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__Connector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Connector_copy" "', argument " "1"" of type '" "segment::Connector const *""'"); 
  }
  arg1 = reinterpret_cast< segment::Connector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Connector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Connector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((segment::Connector const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Connector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_segment__Connector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DuctBc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctBc *arg1 = (duct::DuctBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuctBc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctBc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuctBc" "', argument " "1"" of type '" "duct::DuctBc *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctBc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuctBc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__DuctBc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DuctConnector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  string *arg3 = 0 ;
  duct::Pos arg4 ;
  d arg5 ;
  d arg6 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  duct::DuctConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DuctConnector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctConnector" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctConnector" "', argument " "4"" of type '" "duct::Pos""'");
  } 
  arg4 = static_cast< duct::Pos >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DuctConnector" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DuctConnector" "', argument " "6"" of type '" "d""'");
  } 
  arg6 = static_cast< d >(val6);
  result = (duct::DuctConnector *)new duct::DuctConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__DuctConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctConnector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  string *arg3 = 0 ;
  duct::Pos arg4 ;
  d arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  duct::DuctConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DuctConnector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctConnector" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctConnector" "', argument " "4"" of type '" "duct::Pos""'");
  } 
  arg4 = static_cast< duct::Pos >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DuctConnector" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  result = (duct::DuctConnector *)new duct::DuctConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__DuctConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctConnector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  string *arg3 = 0 ;
  duct::Pos arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::DuctConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DuctConnector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctConnector" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctConnector" "', argument " "4"" of type '" "duct::Pos""'");
  } 
  arg4 = static_cast< duct::Pos >(val4);
  result = (duct::DuctConnector *)new duct::DuctConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__DuctConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctConnector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctConnector *arg1 = 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::DuctConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DuctConnector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__DuctConnector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctConnector" "', argument " "1"" of type '" "duct::DuctConnector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "1"" of type '" "duct::DuctConnector const &""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctConnector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DuctConnector" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctConnector" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (duct::DuctConnector *)new duct::DuctConnector((duct::DuctConnector const &)*arg1,(tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__DuctConnector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctConnector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__DuctConnector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DuctConnector__SWIG_3(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DuctConnector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_DuctConnector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_DuctConnector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DuctConnector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::DuctConnector::DuctConnector(string const &,duct::Pos,string const &,duct::Pos,d,d)\n"
    "    duct::DuctConnector::DuctConnector(string const &,duct::Pos,string const &,duct::Pos,d)\n"
    "    duct::DuctConnector::DuctConnector(string const &,duct::Pos,string const &,duct::Pos)\n"
    "    duct::DuctConnector::DuctConnector(duct::DuctConnector const &,tasystem::TaSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DuctConnector_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctConnector *arg1 = (duct::DuctConnector *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DuctConnector_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctConnector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctConnector_copy" "', argument " "1"" of type '" "duct::DuctConnector const *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctConnector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DuctConnector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DuctConnector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::DuctConnector const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DuctConnector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctConnector *arg1 = (duct::DuctConnector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuctConnector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctConnector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuctConnector" "', argument " "1"" of type '" "duct::DuctConnector *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctConnector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctConnector_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctConnector *arg1 = (duct::DuctConnector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DuctConnector_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctConnector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctConnector_error" "', argument " "1"" of type '" "duct::DuctConnector const *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctConnector * >(argp1);
  result = ((duct::DuctConnector const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuctConnector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__DuctConnector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DuctPistonConnector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  mech::Pos arg2 ;
  string *arg3 = 0 ;
  mech::Pos arg4 ;
  d arg5 ;
  d arg6 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  mech::DuctPistonConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DuctPistonConnector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctPistonConnector" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctPistonConnector" "', argument " "4"" of type '" "mech::Pos""'");
  } 
  arg4 = static_cast< mech::Pos >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DuctPistonConnector" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DuctPistonConnector" "', argument " "6"" of type '" "d""'");
  } 
  arg6 = static_cast< d >(val6);
  result = (mech::DuctPistonConnector *)new mech::DuctPistonConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__DuctPistonConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctPistonConnector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  mech::Pos arg2 ;
  string *arg3 = 0 ;
  mech::Pos arg4 ;
  d arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  mech::DuctPistonConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DuctPistonConnector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctPistonConnector" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctPistonConnector" "', argument " "4"" of type '" "mech::Pos""'");
  } 
  arg4 = static_cast< mech::Pos >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DuctPistonConnector" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  result = (mech::DuctPistonConnector *)new mech::DuctPistonConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__DuctPistonConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctPistonConnector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  mech::Pos arg2 ;
  string *arg3 = 0 ;
  mech::Pos arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  mech::DuctPistonConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DuctPistonConnector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DuctPistonConnector" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "3"" of type '" "string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DuctPistonConnector" "', argument " "4"" of type '" "mech::Pos""'");
  } 
  arg4 = static_cast< mech::Pos >(val4);
  result = (mech::DuctPistonConnector *)new mech::DuctPistonConnector((string const &)*arg1,arg2,(string const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__DuctPistonConnector, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctPistonConnector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::DuctPistonConnector *arg1 = 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  mech::DuctPistonConnector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DuctPistonConnector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mech__DuctPistonConnector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "mech::DuctPistonConnector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "1"" of type '" "mech::DuctPistonConnector const &""'"); 
  }
  arg1 = reinterpret_cast< mech::DuctPistonConnector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DuctPistonConnector" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuctPistonConnector" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (mech::DuctPistonConnector *)new mech::DuctPistonConnector((mech::DuctPistonConnector const &)*arg1,(tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__DuctPistonConnector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuctPistonConnector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mech__DuctPistonConnector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DuctPistonConnector__SWIG_3(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DuctPistonConnector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_DuctPistonConnector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_DuctPistonConnector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DuctPistonConnector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mech::DuctPistonConnector::DuctPistonConnector(string const &,mech::Pos,string const &,mech::Pos,d,d)\n"
    "    mech::DuctPistonConnector::DuctPistonConnector(string const &,mech::Pos,string const &,mech::Pos,d)\n"
    "    mech::DuctPistonConnector::DuctPistonConnector(string const &,mech::Pos,string const &,mech::Pos)\n"
    "    mech::DuctPistonConnector::DuctPistonConnector(mech::DuctPistonConnector const &,tasystem::TaSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DuctPistonConnector_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::DuctPistonConnector *arg1 = (mech::DuctPistonConnector *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DuctPistonConnector_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__DuctPistonConnector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctPistonConnector_copy" "', argument " "1"" of type '" "mech::DuctPistonConnector const *""'"); 
  }
  arg1 = reinterpret_cast< mech::DuctPistonConnector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DuctPistonConnector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DuctPistonConnector_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((mech::DuctPistonConnector const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DuctPistonConnector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::DuctPistonConnector *arg1 = (mech::DuctPistonConnector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuctPistonConnector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__DuctPistonConnector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuctPistonConnector" "', argument " "1"" of type '" "mech::DuctPistonConnector *""'"); 
  }
  arg1 = reinterpret_cast< mech::DuctPistonConnector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctPistonConnector_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::DuctPistonConnector *arg1 = (mech::DuctPistonConnector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DuctPistonConnector_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__DuctPistonConnector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctPistonConnector_error" "', argument " "1"" of type '" "mech::DuctPistonConnector const *""'"); 
  }
  arg1 = reinterpret_cast< mech::DuctPistonConnector * >(argp1);
  result = ((mech::DuctPistonConnector const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuctPistonConnector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mech__DuctPistonConnector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PressureBc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  tasystem::var *arg4 = 0 ;
  tasystem::var *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  duct::PressureBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_PressureBc",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PressureBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PressureBc" "', argument " "4"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "4"" of type '" "tasystem::var const &""'"); 
  }
  arg4 = reinterpret_cast< tasystem::var * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_PressureBc" "', argument " "5"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "5"" of type '" "tasystem::var const &""'"); 
  }
  arg5 = reinterpret_cast< tasystem::var * >(argp5);
  try {
    result = (duct::PressureBc *)new duct::PressureBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3,(tasystem::var const &)*arg4,(tasystem::var const &)*arg5);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__PressureBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PressureBc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  tasystem::var *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::PressureBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_PressureBc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PressureBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PressureBc" "', argument " "4"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "4"" of type '" "tasystem::var const &""'"); 
  }
  arg4 = reinterpret_cast< tasystem::var * >(argp4);
  try {
    result = (duct::PressureBc *)new duct::PressureBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3,(tasystem::var const &)*arg4);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__PressureBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PressureBc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::PressureBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PressureBc",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PressureBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PressureBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  try {
    result = (duct::PressureBc *)new duct::PressureBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__PressureBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PressureBc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_PressureBc__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_tasystem__var, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_PressureBc__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_tasystem__var, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_tasystem__var, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_PressureBc__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PressureBc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::PressureBc::PressureBc(string const &,duct::Pos,tasystem::var const &,tasystem::var const &,tasystem::var const &)\n"
    "    duct::PressureBc::PressureBc(string const &,duct::Pos,tasystem::var const &,tasystem::var const &)\n"
    "    duct::PressureBc::PressureBc(string const &,duct::Pos,tasystem::var const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PressureBc_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::PressureBc *arg1 = (duct::PressureBc *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PressureBc_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__PressureBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PressureBc_copy" "', argument " "1"" of type '" "duct::PressureBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::PressureBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PressureBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PressureBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::PressureBc const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PressureBc_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::PressureBc *arg1 = (duct::PressureBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PressureBc_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__PressureBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PressureBc_error" "', argument " "1"" of type '" "duct::PressureBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::PressureBc * >(argp1);
  result = ((duct::PressureBc const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PressureBc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::PressureBc *arg1 = (duct::PressureBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PressureBc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__PressureBc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PressureBc" "', argument " "1"" of type '" "duct::PressureBc *""'"); 
  }
  arg1 = reinterpret_cast< duct::PressureBc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PressureBc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__PressureBc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AdiabaticWall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::AdiabaticWall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AdiabaticWall",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdiabaticWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdiabaticWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdiabaticWall" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AdiabaticWall" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (duct::AdiabaticWall *)new duct::AdiabaticWall((string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__AdiabaticWall, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdiabaticWall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::AdiabaticWall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AdiabaticWall",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdiabaticWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdiabaticWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdiabaticWall" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  result = (duct::AdiabaticWall *)new duct::AdiabaticWall((string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__AdiabaticWall, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdiabaticWall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AdiabaticWall__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AdiabaticWall__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AdiabaticWall'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::AdiabaticWall::AdiabaticWall(string const &,duct::Pos,bool)\n"
    "    duct::AdiabaticWall::AdiabaticWall(string const &,duct::Pos)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdiabaticWall_arbitrateMassEq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AdiabaticWall *arg1 = (duct::AdiabaticWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdiabaticWall_arbitrateMassEq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AdiabaticWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdiabaticWall_arbitrateMassEq" "', argument " "1"" of type '" "duct::AdiabaticWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::AdiabaticWall * >(argp1);
  result = (int)((duct::AdiabaticWall const *)arg1)->arbitrateMassEq();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AdiabaticWall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AdiabaticWall *arg1 = (duct::AdiabaticWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AdiabaticWall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AdiabaticWall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AdiabaticWall" "', argument " "1"" of type '" "duct::AdiabaticWall *""'"); 
  }
  arg1 = reinterpret_cast< duct::AdiabaticWall * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdiabaticWall_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AdiabaticWall *arg1 = (duct::AdiabaticWall *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdiabaticWall_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AdiabaticWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdiabaticWall_copy" "', argument " "1"" of type '" "duct::AdiabaticWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::AdiabaticWall * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdiabaticWall_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdiabaticWall_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::AdiabaticWall const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdiabaticWall_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AdiabaticWall *arg1 = (duct::AdiabaticWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdiabaticWall_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AdiabaticWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdiabaticWall_error" "', argument " "1"" of type '" "duct::AdiabaticWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::AdiabaticWall * >(argp1);
  result = ((duct::AdiabaticWall const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AdiabaticWall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__AdiabaticWall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IsoTWall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::IsoTWall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_IsoTWall",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IsoTWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IsoTWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IsoTWall" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_IsoTWall" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IsoTWall" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IsoTWall" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (duct::IsoTWall *)new duct::IsoTWall((string const &)*arg1,arg2,(tasystem::var const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__IsoTWall, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IsoTWall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::IsoTWall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IsoTWall",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IsoTWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IsoTWall" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IsoTWall" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_IsoTWall" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IsoTWall" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  result = (duct::IsoTWall *)new duct::IsoTWall((string const &)*arg1,arg2,(tasystem::var const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__IsoTWall, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IsoTWall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_IsoTWall__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_IsoTWall__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IsoTWall'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::IsoTWall::IsoTWall(string const &,duct::Pos,tasystem::var const &,bool)\n"
    "    duct::IsoTWall::IsoTWall(string const &,duct::Pos,tasystem::var const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IsoTWall_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsoTWall *arg1 = (duct::IsoTWall *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsoTWall_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsoTWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoTWall_copy" "', argument " "1"" of type '" "duct::IsoTWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsoTWall * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsoTWall_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoTWall_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::IsoTWall const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IsoTWall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsoTWall *arg1 = (duct::IsoTWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IsoTWall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsoTWall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IsoTWall" "', argument " "1"" of type '" "duct::IsoTWall *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsoTWall * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoTWall_arbitrateMassEq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsoTWall *arg1 = (duct::IsoTWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsoTWall_arbitrateMassEq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsoTWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoTWall_arbitrateMassEq" "', argument " "1"" of type '" "duct::IsoTWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsoTWall * >(argp1);
  result = (int)((duct::IsoTWall const *)arg1)->arbitrateMassEq();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoTWall_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsoTWall *arg1 = (duct::IsoTWall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsoTWall_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsoTWall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoTWall_error" "', argument " "1"" of type '" "duct::IsoTWall const *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsoTWall * >(argp1);
  result = ((duct::IsoTWall const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IsoTWall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__IsoTWall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ImpedanceBc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  d arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::ImpedanceBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ImpedanceBc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImpedanceBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImpedanceBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ImpedanceBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  {
    if (!PyCallable_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Need a callable object!");
      return NULL;
    }
    arg3 = obj2;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ImpedanceBc" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  try {
    result = (duct::ImpedanceBc *)new duct::ImpedanceBc((string const &)*arg1,arg2,arg3,arg4);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ImpedanceBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImpedanceBc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::ImpedanceBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ImpedanceBc",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImpedanceBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImpedanceBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ImpedanceBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  {
    if (!PyCallable_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Need a callable object!");
      return NULL;
    }
    arg3 = obj2;
  }
  try {
    result = (duct::ImpedanceBc *)new duct::ImpedanceBc((string const &)*arg1,arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ImpedanceBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImpedanceBc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_new_ImpedanceBc__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_ImpedanceBc__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImpedanceBc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::ImpedanceBc::ImpedanceBc(string const &,duct::Pos,PyObject *,d)\n"
    "    duct::ImpedanceBc::ImpedanceBc(string const &,duct::Pos,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImpedanceBc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ImpedanceBc *arg1 = (duct::ImpedanceBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImpedanceBc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ImpedanceBc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImpedanceBc" "', argument " "1"" of type '" "duct::ImpedanceBc *""'"); 
  }
  arg1 = reinterpret_cast< duct::ImpedanceBc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImpedanceBc_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ImpedanceBc *arg1 = (duct::ImpedanceBc *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImpedanceBc_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ImpedanceBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpedanceBc_copy" "', argument " "1"" of type '" "duct::ImpedanceBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ImpedanceBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImpedanceBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpedanceBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::ImpedanceBc const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImpedanceBc_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ImpedanceBc *arg1 = (duct::ImpedanceBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImpedanceBc_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ImpedanceBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpedanceBc_error" "', argument " "1"" of type '" "duct::ImpedanceBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ImpedanceBc * >(argp1);
  result = ((duct::ImpedanceBc const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImpedanceBc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__ImpedanceBc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VelocityBc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  d arg4 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  duct::VelocityBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_VelocityBc",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VelocityBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VelocityBc" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VelocityBc" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    result = (duct::VelocityBc *)new duct::VelocityBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3,arg4,arg5);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VelocityBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityBc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  d arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::VelocityBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_VelocityBc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VelocityBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VelocityBc" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  try {
    result = (duct::VelocityBc *)new duct::VelocityBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3,arg4);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VelocityBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityBc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  duct::Pos arg2 ;
  tasystem::var *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::VelocityBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_VelocityBc",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VelocityBc" "', argument " "2"" of type '" "duct::Pos""'");
  } 
  arg2 = static_cast< duct::Pos >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VelocityBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  try {
    result = (duct::VelocityBc *)new duct::VelocityBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VelocityBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VelocityBc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VelocityBc__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_VelocityBc__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VelocityBc__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VelocityBc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::VelocityBc::VelocityBc(string const &,duct::Pos,tasystem::var const &,d,bool)\n"
    "    duct::VelocityBc::VelocityBc(string const &,duct::Pos,tasystem::var const &,d)\n"
    "    duct::VelocityBc::VelocityBc(string const &,duct::Pos,tasystem::var const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VelocityBc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VelocityBc *arg1 = (duct::VelocityBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VelocityBc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VelocityBc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VelocityBc" "', argument " "1"" of type '" "duct::VelocityBc *""'"); 
  }
  arg1 = reinterpret_cast< duct::VelocityBc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityBc_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VelocityBc *arg1 = (duct::VelocityBc *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VelocityBc_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VelocityBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityBc_copy" "', argument " "1"" of type '" "duct::VelocityBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VelocityBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VelocityBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VelocityBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((duct::VelocityBc const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityBc_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VelocityBc *arg1 = (duct::VelocityBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityBc_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VelocityBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityBc_error" "', argument " "1"" of type '" "duct::VelocityBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VelocityBc * >(argp1);
  result = ((duct::VelocityBc const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VelocityBc_arbitrateMassEq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VelocityBc *arg1 = (duct::VelocityBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VelocityBc_arbitrateMassEq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VelocityBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VelocityBc_arbitrateMassEq" "', argument " "1"" of type '" "duct::VelocityBc const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VelocityBc * >(argp1);
  result = (int)((duct::VelocityBc const *)arg1)->arbitrateMassEq();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VelocityBc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__VelocityBc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MechBc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  string *arg1 = 0 ;
  Varnr arg2 ;
  tasystem::var *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  mech::MechBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MechBc",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MechBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MechBc" "', argument " "1"" of type '" "string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MechBc" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__var,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MechBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MechBc" "', argument " "3"" of type '" "tasystem::var const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::var * >(argp3);
  try {
    result = (mech::MechBc *)new mech::MechBc((string const &)*arg1,arg2,(tasystem::var const &)*arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__MechBc, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MechBc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  mech::MechBc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MechBc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mech__MechBc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MechBc" "', argument " "1"" of type '" "mech::MechBc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MechBc" "', argument " "1"" of type '" "mech::MechBc const &""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MechBc" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MechBc" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (mech::MechBc *)new mech::MechBc((mech::MechBc const &)*arg1,(tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__MechBc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MechBc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mech__MechBc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MechBc__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__var, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MechBc__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MechBc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mech::MechBc::MechBc(string const &,Varnr,tasystem::var const &)\n"
    "    mech::MechBc::MechBc(mech::MechBc const &,tasystem::TaSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MechBc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MechBc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MechBc" "', argument " "1"" of type '" "mech::MechBc *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MechBc_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_error" "', argument " "1"" of type '" "mech::MechBc const *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  result = ((mech::MechBc const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_jac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  tasystem::Jacobian *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MechBc_jac",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_jac" "', argument " "1"" of type '" "mech::MechBc const *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__Jacobian,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MechBc_jac" "', argument " "2"" of type '" "tasystem::Jacobian &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MechBc_jac" "', argument " "2"" of type '" "tasystem::Jacobian &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::Jacobian * >(argp2);
  ((mech::MechBc const *)arg1)->jac(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MechBc_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_copy" "', argument " "1"" of type '" "mech::MechBc const *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MechBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MechBc_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Connector *)((mech::MechBc const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_setEqNrs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MechBc_setEqNrs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_setEqNrs" "', argument " "1"" of type '" "mech::MechBc *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MechBc_setEqNrs" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  (arg1)->setEqNrs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_getNEqs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MechBc_getNEqs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_getNEqs" "', argument " "1"" of type '" "mech::MechBc const *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  result = (us)((mech::MechBc const *)arg1)->getNEqs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MechBc_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_show" "', argument " "1"" of type '" "mech::MechBc const *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MechBc_show" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ((mech::MechBc const *)arg1)->show(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MechBc_updateNf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::MechBc *arg1 = (mech::MechBc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MechBc_updateNf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__MechBc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MechBc_updateNf" "', argument " "1"" of type '" "mech::MechBc *""'"); 
  }
  arg1 = reinterpret_cast< mech::MechBc * >(argp1);
  (arg1)->updateNf();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MechBc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mech__MechBc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Seg_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::Seg *arg1 = (segment::Seg *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Seg_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__Seg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Seg_copy" "', argument " "1"" of type '" "segment::Seg const *""'"); 
  }
  arg1 = reinterpret_cast< segment::Seg * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Seg_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Seg_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Seg *)((segment::Seg const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Seg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::Seg *arg1 = (segment::Seg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Seg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__Seg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Seg" "', argument " "1"" of type '" "segment::Seg *""'"); 
  }
  arg1 = reinterpret_cast< segment::Seg * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Seg_setPhaseContraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment::Seg *arg1 = (segment::Seg *) 0 ;
  SwigValueWrapper< tasystem::PhaseConstraint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Seg_setPhaseContraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment__Seg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Seg_setPhaseContraint" "', argument " "1"" of type '" "segment::Seg *""'"); 
  }
  arg1 = reinterpret_cast< segment::Seg * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__PhaseConstraint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Seg_setPhaseContraint" "', argument " "2"" of type '" "tasystem::PhaseConstraint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Seg_setPhaseContraint" "', argument " "2"" of type '" "tasystem::PhaseConstraint""'");
    } else {
      tasystem::PhaseConstraint * temp = reinterpret_cast< tasystem::PhaseConstraint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setPhaseContraint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Seg_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_segment__Seg, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PistonConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  d arg5 ;
  d arg6 ;
  d arg7 ;
  d arg8 ;
  d arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  mech::PistonConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_PistonConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PistonConfiguration" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PistonConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PistonConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PistonConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PistonConfiguration" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PistonConfiguration" "', argument " "6"" of type '" "d""'");
  } 
  arg6 = static_cast< d >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_PistonConfiguration" "', argument " "7"" of type '" "d""'");
  } 
  arg7 = static_cast< d >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_PistonConfiguration" "', argument " "8"" of type '" "d""'");
  } 
  arg8 = static_cast< d >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_PistonConfiguration" "', argument " "9"" of type '" "d""'");
  } 
  arg9 = static_cast< d >(val9);
  result = (mech::PistonConfiguration *)new mech::PistonConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__PistonConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PistonConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  d arg5 ;
  d arg6 ;
  d arg7 ;
  d arg8 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  mech::PistonConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_PistonConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PistonConfiguration" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PistonConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PistonConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PistonConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PistonConfiguration" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PistonConfiguration" "', argument " "6"" of type '" "d""'");
  } 
  arg6 = static_cast< d >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_PistonConfiguration" "', argument " "7"" of type '" "d""'");
  } 
  arg7 = static_cast< d >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_PistonConfiguration" "', argument " "8"" of type '" "d""'");
  } 
  arg8 = static_cast< d >(val8);
  result = (mech::PistonConfiguration *)new mech::PistonConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__PistonConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PistonConfiguration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  d arg5 ;
  d arg6 ;
  d arg7 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  mech::PistonConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_PistonConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PistonConfiguration" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PistonConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PistonConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PistonConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PistonConfiguration" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PistonConfiguration" "', argument " "6"" of type '" "d""'");
  } 
  arg6 = static_cast< d >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_PistonConfiguration" "', argument " "7"" of type '" "d""'");
  } 
  arg7 = static_cast< d >(val7);
  result = (mech::PistonConfiguration *)new mech::PistonConfiguration(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__PistonConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PistonConfiguration(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  return _wrap_new_PistonConfiguration__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  {
                    _v = (PyFloat_Check(argv[7]) || PyInt_Check(argv[7]) || PyLong_Check(argv[7])) ? 1 : 0;
                  }
                  if (_v) {
                    return _wrap_new_PistonConfiguration__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  {
                    _v = (PyFloat_Check(argv[7]) || PyInt_Check(argv[7]) || PyLong_Check(argv[7])) ? 1 : 0;
                  }
                  if (_v) {
                    {
                      _v = (PyFloat_Check(argv[8]) || PyInt_Check(argv[8]) || PyLong_Check(argv[8])) ? 1 : 0;
                    }
                    if (_v) {
                      return _wrap_new_PistonConfiguration__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PistonConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mech::PistonConfiguration::PistonConfiguration(d,d,d,d,d,d,d,d,d)\n"
    "    mech::PistonConfiguration::PistonConfiguration(d,d,d,d,d,d,d,d)\n"
    "    mech::PistonConfiguration::PistonConfiguration(d,d,d,d,d,d,d)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PistonConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PistonConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PistonConfiguration" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_M_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_M_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_M_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_M_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->M = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_M_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_M_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_M_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->M);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Sr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Sr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Sr_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Sr_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Sr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Sr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Sr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Sr_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Sr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Sl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Sl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Sl_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Sl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Sl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Sl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Sl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Sl_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Sl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Km_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Km_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Km_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Km_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Km = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Km_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Km_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Km_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Km);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Cm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Cm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Cm_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Cm_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Cm = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Cm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Cm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Cm_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Cm);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_V0l_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_V0l_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_V0l_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_V0l_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->V0l = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_V0l_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_V0l_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_V0l_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->V0l);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_V0r_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_V0r_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_V0r_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_V0r_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->V0r = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_V0r_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_V0r_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_V0r_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->V0r);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Stl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Stl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Stl_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Stl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Stl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Stl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Stl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Stl_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Stl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Str_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PistonConfiguration_Str_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Str_set" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PistonConfiguration_Str_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Str = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PistonConfiguration_Str_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = (mech::PistonConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PistonConfiguration_Str_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PistonConfiguration_Str_get" "', argument " "1"" of type '" "mech::PistonConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  result = (d) ((arg1)->Str);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PistonConfiguration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mech__PistonConfiguration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Piston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::PistonConfiguration *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mech::Piston *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Piston",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mech__PistonConfiguration,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Piston" "', argument " "1"" of type '" "mech::PistonConfiguration const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Piston" "', argument " "1"" of type '" "mech::PistonConfiguration const &""'"); 
  }
  arg1 = reinterpret_cast< mech::PistonConfiguration * >(argp1);
  try {
    result = (mech::Piston *)new mech::Piston((mech::PistonConfiguration const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__Piston, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Piston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Piston",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Piston" "', argument " "1"" of type '" "mech::Piston *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_copy" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Piston_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Piston_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Seg *)((mech::Piston const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_setT0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_setT0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_setT0" "', argument " "1"" of type '" "mech::Piston *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Piston_setT0" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setT0(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_getT0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_getT0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_getT0" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (d)((mech::Piston const *)arg1)->getT0();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_getPc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mech::PistonConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_getPc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_getPc" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (mech::PistonConfiguration *) &((mech::Piston const *)arg1)->getPc();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__PistonConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_Fpiston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_Fpiston",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_Fpiston" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->Fpiston();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_xpiston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_xpiston",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_xpiston" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->xpiston();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_upiston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_upiston",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_upiston" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = ((mech::Piston const *)arg1)->upiston();
  resultobj = SWIG_NewPointerObj((new tasystem::var(static_cast< const tasystem::var& >(result))), SWIGTYPE_p_tasystem__var, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_pl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_pl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_pl" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->pl();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_pr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_pr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_pr" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->pr();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  mech::Pos arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_p" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Piston_p" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  mech::Pos arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_m" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Piston_m" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->m(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_T(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  mech::Pos arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_T",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_T" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Piston_T" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->T(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_mH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  mech::Pos arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Piston_mH",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_mH" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Piston_mH" "', argument " "2"" of type '" "mech::Pos""'");
  } 
  arg2 = static_cast< mech::Pos >(val2);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->mH(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_rhol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_rhol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_rhol" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->rhol();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_rhor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_rhor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_rhor" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->rhor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_Tl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_Tl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_Tl" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->Tl();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_Tr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_Tr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_Tr" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = (tasystem::var *) &((mech::Piston const *)arg1)->Tr();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_Vl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_Vl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_Vl" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = ((mech::Piston const *)arg1)->Vl();
  resultobj = SWIG_NewPointerObj((new tasystem::var(static_cast< const tasystem::var& >(result))), SWIGTYPE_p_tasystem__var, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_Vr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_Vr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_Vr" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = ((mech::Piston const *)arg1)->Vr();
  resultobj = SWIG_NewPointerObj((new tasystem::var(static_cast< const tasystem::var& >(result))), SWIGTYPE_p_tasystem__var, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piston_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mech::Piston *arg1 = (mech::Piston *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Piston_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piston_error" "', argument " "1"" of type '" "mech::Piston const *""'"); 
  }
  arg1 = reinterpret_cast< mech::Piston * >(argp1);
  result = ((mech::Piston const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Piston_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mech__Piston, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ConnectorVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::ConnectorVolume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ConnectorVolume",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConnectorVolume" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  try {
    result = (duct::ConnectorVolume *)new duct::ConnectorVolume(arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ConnectorVolume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConnectorVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConnectorVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConnectorVolume" "', argument " "1"" of type '" "duct::ConnectorVolume *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConnectorVolume_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_copy" "', argument " "1"" of type '" "duct::ConnectorVolume const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConnectorVolume_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConnectorVolume_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Seg *)((duct::ConnectorVolume const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConnectorVolume_p",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_p" "', argument " "1"" of type '" "duct::ConnectorVolume const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  result = (tasystem::var *) &((duct::ConnectorVolume const *)arg1)->p();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_rho(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConnectorVolume_rho",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_rho" "', argument " "1"" of type '" "duct::ConnectorVolume const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  result = (tasystem::var *) &((duct::ConnectorVolume const *)arg1)->rho();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_T(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::var *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConnectorVolume_T",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_T" "', argument " "1"" of type '" "duct::ConnectorVolume const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  result = (tasystem::var *) &((duct::ConnectorVolume const *)arg1)->T();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__var, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_addDuct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  string *arg2 = 0 ;
  duct::Pos arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConnectorVolume_addDuct",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_addDuct" "', argument " "1"" of type '" "duct::ConnectorVolume *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConnectorVolume_addDuct" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConnectorVolume_addDuct" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConnectorVolume_addDuct" "', argument " "3"" of type '" "duct::Pos""'");
  } 
  arg3 = static_cast< duct::Pos >(val3);
  (arg1)->addDuct((string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_addPiston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  string *arg2 = 0 ;
  duct::Pos arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConnectorVolume_addPiston",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_addPiston" "', argument " "1"" of type '" "duct::ConnectorVolume *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConnectorVolume_addPiston" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConnectorVolume_addPiston" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConnectorVolume_addPiston" "', argument " "3"" of type '" "duct::Pos""'");
  } 
  arg3 = static_cast< duct::Pos >(val3);
  (arg1)->addPiston((string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConnectorVolume_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConnectorVolume *arg1 = (duct::ConnectorVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConnectorVolume_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConnectorVolume_error" "', argument " "1"" of type '" "duct::ConnectorVolume const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConnectorVolume * >(argp1);
  result = ((duct::ConnectorVolume const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConnectorVolume_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__ConnectorVolume, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Grid",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Grid" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Grid" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  try {
    result = (duct::Grid *)new duct::Grid(arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Grid" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Grid" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (duct::Grid *)new duct::Grid((duct::Grid const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Grid__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Grid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::Grid::Grid(us,d)\n"
    "    duct::Grid::Grid(duct::Grid const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Grid" "', argument " "1"" of type '" "duct::Grid *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_setLeftBl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  duct::BoundaryLayer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_setLeftBl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_setLeftBl" "', argument " "1"" of type '" "duct::Grid *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_duct__BoundaryLayer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_setLeftBl" "', argument " "2"" of type '" "duct::BoundaryLayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Grid_setLeftBl" "', argument " "2"" of type '" "duct::BoundaryLayer const &""'"); 
  }
  arg2 = reinterpret_cast< duct::BoundaryLayer * >(argp2);
  (arg1)->setLeftBl((duct::BoundaryLayer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_setRightBl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  duct::BoundaryLayer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_setRightBl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_setRightBl" "', argument " "1"" of type '" "duct::Grid *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_duct__BoundaryLayer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_setRightBl" "', argument " "2"" of type '" "duct::BoundaryLayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Grid_setRightBl" "', argument " "2"" of type '" "duct::BoundaryLayer const &""'"); 
  }
  arg2 = reinterpret_cast< duct::BoundaryLayer * >(argp2);
  (arg1)->setRightBl((duct::BoundaryLayer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_isLeftBl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_isLeftBl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_isLeftBl" "', argument " "1"" of type '" "duct::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (bool)((duct::Grid const *)arg1)->isLeftBl();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_isRightBl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_isRightBl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_isRightBl" "', argument " "1"" of type '" "duct::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (bool)((duct::Grid const *)arg1)->isRightBl();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_getL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getL" "', argument " "1"" of type '" "duct::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (d)((duct::Grid const *)arg1)->getL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_getx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getx" "', argument " "1"" of type '" "duct::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (vd *) &((duct::Grid const *)arg1)->getx();
  {
    // cout << "vd& to numpy\n\n";
    const vd& res=*result;
    resultobj=npy_from_vd(res);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getgp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = (duct::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_getgp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getgp" "', argument " "1"" of type '" "duct::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  result = (us)((duct::Grid const *)arg1)->getgp();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Grid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__Grid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BoundaryLayer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  d arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::BoundaryLayer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BoundaryLayer",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoundaryLayer" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoundaryLayer" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BoundaryLayer" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  result = (duct::BoundaryLayer *)new duct::BoundaryLayer(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__BoundaryLayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundaryLayer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  us arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::BoundaryLayer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BoundaryLayer",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoundaryLayer" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoundaryLayer" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BoundaryLayer" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  result = (duct::BoundaryLayer *)new duct::BoundaryLayer(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__BoundaryLayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundaryLayer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BoundaryLayer__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_BoundaryLayer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BoundaryLayer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::BoundaryLayer::BoundaryLayer(d,d,d)\n"
    "    duct::BoundaryLayer::BoundaryLayer(d,d,us)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BoundaryLayer_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::BoundaryLayer *arg1 = (duct::BoundaryLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::BoundaryLayer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BoundaryLayer_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__BoundaryLayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundaryLayer_copy" "', argument " "1"" of type '" "duct::BoundaryLayer const *""'"); 
  }
  arg1 = reinterpret_cast< duct::BoundaryLayer * >(argp1);
  result = (duct::BoundaryLayer *)((duct::BoundaryLayer const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__BoundaryLayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoundaryLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::BoundaryLayer *arg1 = (duct::BoundaryLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BoundaryLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__BoundaryLayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundaryLayer" "', argument " "1"" of type '" "duct::BoundaryLayer *""'"); 
  }
  arg1 = reinterpret_cast< duct::BoundaryLayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundaryLayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__BoundaryLayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AutoBoundaryLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  duct::Grid *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::AutoBoundaryLayer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AutoBoundaryLayer",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AutoBoundaryLayer" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AutoBoundaryLayer" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AutoBoundaryLayer" "', argument " "3"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AutoBoundaryLayer" "', argument " "3"" of type '" "duct::Grid const &""'"); 
  }
  arg3 = reinterpret_cast< duct::Grid * >(argp3);
  try {
    result = (duct::AutoBoundaryLayer *)new duct::AutoBoundaryLayer(arg1,arg2,(duct::Grid const &)*arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__AutoBoundaryLayer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoBoundaryLayer_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AutoBoundaryLayer *arg1 = (duct::AutoBoundaryLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::BoundaryLayer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoBoundaryLayer_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AutoBoundaryLayer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoBoundaryLayer_copy" "', argument " "1"" of type '" "duct::AutoBoundaryLayer const *""'"); 
  }
  arg1 = reinterpret_cast< duct::AutoBoundaryLayer * >(argp1);
  result = (duct::BoundaryLayer *)((duct::AutoBoundaryLayer const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__BoundaryLayer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AutoBoundaryLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::AutoBoundaryLayer *arg1 = (duct::AutoBoundaryLayer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AutoBoundaryLayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__AutoBoundaryLayer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AutoBoundaryLayer" "', argument " "1"" of type '" "duct::AutoBoundaryLayer *""'"); 
  }
  arg1 = reinterpret_cast< duct::AutoBoundaryLayer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AutoBoundaryLayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__AutoBoundaryLayer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Geom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Geom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Geom" "', argument " "1"" of type '" "duct::Geom *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_grid" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (duct::Grid *) &((duct::Geom const *)arg1)->grid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_show" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ((duct::Geom const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_S(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_S",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_S" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_S" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->S(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_phi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_phi" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_phi" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->phi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_rh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_rh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_rh" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_rh" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->rh(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Geom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_copy" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (duct::Geom *)((duct::Geom const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Geom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_shape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_shape" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->shape();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_setPrismatic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_setPrismatic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_setPrismatic" "', argument " "1"" of type '" "duct::Geom *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_setPrismatic" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setPrismatic(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_isPrismatic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_isPrismatic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_isPrismatic" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (bool)((duct::Geom const *)arg1)->isPrismatic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_setBlApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_setBlApprox",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_setBlApprox" "', argument " "1"" of type '" "duct::Geom *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_setBlApprox" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setBlApprox(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_isBlApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_isBlApprox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_isBlApprox" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (bool)((duct::Geom const *)arg1)->isBlApprox();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_nCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_nCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_nCells" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (us)((duct::Geom const *)arg1)->nCells();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_x__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_x" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (vd *) &((duct::Geom const *)arg1)->x();
  {
    // cout << "vd& to numpy\n\n";
    const vd& res=*result;
    resultobj=npy_from_vd(res);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_x__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_x",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_x" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_x" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->x(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_x(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Geom_x__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Geom_x__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Geom_x'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::Geom::x() const\n"
    "    duct::Geom::x(us) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Geom_L(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_L",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_L" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->L();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_gp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_gp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_gp" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (us)((duct::Geom const *)arg1)->gp();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_Sleft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_Sleft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_Sleft" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->Sleft();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_Sright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_Sright",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_Sright" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->Sright();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_phileft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_phileft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_phileft" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->phileft();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_phiright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_phiright",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_phiright" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->phiright();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_rhleft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_rhleft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_rhleft" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->rhleft();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_rhright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_rhright",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_rhright" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->rhright();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vx" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vx" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vx(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vSf_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_vSf_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vSf_vec" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->vSf_vec();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vS_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_vS_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vS_vec" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->vS_vec();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vphi_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_vphi_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vphi_vec" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->vphi_vec();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vrh_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_vrh_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vrh_vec" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->vrh_vec();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vx_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_vx_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vx_vec" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = ((duct::Geom const *)arg1)->vx_vec();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_Sf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_Sf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_Sf" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_Sf" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->Sf(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_Ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_Ss",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_Ss" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_Ss" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->Ss(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vS" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vS" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vS(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vSf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vSf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vSf" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vSf" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vSf(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vSs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vSs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vSs" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vSs" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vSs(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vVf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vVf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vVf" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vVf" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vVf(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vVs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vVs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vVs" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vVs" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vVs(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vphi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vphi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vphi" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vphi" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vphi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_vrh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Geom_vrh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_vrh" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geom_vrh" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::Geom const *)arg1)->vrh(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_getFluidVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_getFluidVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_getFluidVolume" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->getFluidVolume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geom_getSolidVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = (duct::Geom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geom_getSolidVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Geom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geom_getSolidVolume" "', argument " "1"" of type '" "duct::Geom const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (d)((duct::Geom const *)arg1)->getSolidVolume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Geom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__Geom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ConeTube__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  d arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::ConeTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ConeTube",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConeTube" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConeTube" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ConeTube" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    result = (duct::ConeTube *)new duct::ConeTube((duct::Grid const &)*arg1,arg2,arg3,arg4);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ConeTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConeTube__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::ConeTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ConeTube",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConeTube" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConeTube" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  try {
    result = (duct::ConeTube *)new duct::ConeTube((duct::Grid const &)*arg1,arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ConeTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConeTube__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::ConeTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ConeTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__ConeTube,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::ConeTube const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConeTube" "', argument " "1"" of type '" "duct::ConeTube const &""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  result = (duct::ConeTube *)new duct::ConeTube((duct::ConeTube const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ConeTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConeTube(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__ConeTube, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ConeTube__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_ConeTube__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ConeTube__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ConeTube'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::ConeTube::ConeTube(duct::Grid const &,d,d,bool)\n"
    "    duct::ConeTube::ConeTube(duct::Grid const &,d,d)\n"
    "    duct::ConeTube::ConeTube(duct::ConeTube const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ConeTube_S(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConeTube_S",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_S" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConeTube_S" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::ConeTube const *)arg1)->S(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConeTube_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConeTube_phi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_phi" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConeTube_phi" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::ConeTube const *)arg1)->phi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConeTube_rh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConeTube_rh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_rh" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConeTube_rh" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::ConeTube const *)arg1)->rh(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConeTube_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConeTube_shape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_shape" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  result = ((duct::ConeTube const *)arg1)->shape();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConeTube_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Geom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConeTube_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_copy" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  result = (duct::Geom *)((duct::ConeTube const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Geom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConeTube_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConeTube_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConeTube_show" "', argument " "1"" of type '" "duct::ConeTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  ((duct::ConeTube const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConeTube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::ConeTube *arg1 = (duct::ConeTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConeTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__ConeTube, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConeTube" "', argument " "1"" of type '" "duct::ConeTube *""'"); 
  }
  arg1 = reinterpret_cast< duct::ConeTube * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConeTube_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__ConeTube, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CylindricalTube__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::CylindricalTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CylindricalTube",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CylindricalTube" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CylindricalTube" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (duct::CylindricalTube *)new duct::CylindricalTube((duct::Grid const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__CylindricalTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylindricalTube__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::CylindricalTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CylindricalTube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CylindricalTube" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  result = (duct::CylindricalTube *)new duct::CylindricalTube((duct::Grid const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__CylindricalTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylindricalTube__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::CylindricalTube *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::CylindricalTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CylindricalTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__CylindricalTube,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::CylindricalTube const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylindricalTube" "', argument " "1"" of type '" "duct::CylindricalTube const &""'"); 
  }
  arg1 = reinterpret_cast< duct::CylindricalTube * >(argp1);
  result = (duct::CylindricalTube *)new duct::CylindricalTube((duct::CylindricalTube const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__CylindricalTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylindricalTube(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__CylindricalTube, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CylindricalTube__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_CylindricalTube__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CylindricalTube__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CylindricalTube'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::CylindricalTube::CylindricalTube(duct::Grid const &,d,bool)\n"
    "    duct::CylindricalTube::CylindricalTube(duct::Grid const &,d)\n"
    "    duct::CylindricalTube::CylindricalTube(duct::CylindricalTube const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CylindricalTube_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::CylindricalTube *arg1 = (duct::CylindricalTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Geom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CylindricalTube_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__CylindricalTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalTube_copy" "', argument " "1"" of type '" "duct::CylindricalTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::CylindricalTube * >(argp1);
  result = (duct::Geom *)((duct::CylindricalTube const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Geom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CylindricalTube_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::CylindricalTube *arg1 = (duct::CylindricalTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CylindricalTube_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__CylindricalTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalTube_show" "', argument " "1"" of type '" "duct::CylindricalTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::CylindricalTube * >(argp1);
  ((duct::CylindricalTube const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CylindricalTube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::CylindricalTube *arg1 = (duct::CylindricalTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CylindricalTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__CylindricalTube, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CylindricalTube" "', argument " "1"" of type '" "duct::CylindricalTube *""'"); 
  }
  arg1 = reinterpret_cast< duct::CylindricalTube * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CylindricalTube_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__CylindricalTube, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VertPlates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  duct::VertPlates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_VertPlates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VertPlates" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VertPlates" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VertPlates" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VertPlates" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (duct::VertPlates *)new duct::VertPlates((duct::Grid const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VertPlates, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertPlates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Grid *arg1 = 0 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  duct::VertPlates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_VertPlates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Grid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::Grid const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Grid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VertPlates" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VertPlates" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VertPlates" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  result = (duct::VertPlates *)new duct::VertPlates((duct::Grid const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VertPlates, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertPlates__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::VertPlates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertPlates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__VertPlates,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::VertPlates const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertPlates" "', argument " "1"" of type '" "duct::VertPlates const &""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  result = (duct::VertPlates *)new duct::VertPlates((duct::VertPlates const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__VertPlates, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertPlates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__VertPlates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertPlates__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_VertPlates__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VertPlates__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VertPlates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::VertPlates::VertPlates(duct::Grid const &,d,d,d,bool)\n"
    "    duct::VertPlates::VertPlates(duct::Grid const &,d,d,d)\n"
    "    duct::VertPlates::VertPlates(duct::VertPlates const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VertPlates_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Geom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertPlates_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_copy" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  result = (duct::Geom *)((duct::VertPlates const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Geom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertPlates_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertPlates_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_show" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  ((duct::VertPlates const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertPlates_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertPlates_shape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_shape" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  result = ((duct::VertPlates const *)arg1)->shape();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertPlates_S(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertPlates_S",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_S" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertPlates_S" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::VertPlates const *)arg1)->S(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertPlates_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertPlates_phi",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_phi" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertPlates_phi" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::VertPlates const *)arg1)->phi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertPlates_rh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertPlates_rh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertPlates_rh" "', argument " "1"" of type '" "duct::VertPlates const *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertPlates_rh" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  result = (d)((duct::VertPlates const *)arg1)->rh(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VertPlates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::VertPlates *arg1 = (duct::VertPlates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VertPlates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__VertPlates, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VertPlates" "', argument " "1"" of type '" "duct::VertPlates *""'"); 
  }
  arg1 = reinterpret_cast< duct::VertPlates * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VertPlates_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__VertPlates, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cell_gc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  tasystem::Globalconf *arg2 = (tasystem::Globalconf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_gc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_gc_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_tasystem__Globalconf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_gc_set" "', argument " "2"" of type '" "tasystem::Globalconf const *""'"); 
  }
  arg2 = reinterpret_cast< tasystem::Globalconf * >(argp2);
  if (arg1) (arg1)->gc = (tasystem::Globalconf const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_gc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::Globalconf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_gc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_gc_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (tasystem::Globalconf *) ((arg1)->gc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__Globalconf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_i_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_i_set" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  if (arg1) (arg1)->i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_i_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (us) ((arg1)->i);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vx_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vx_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vx_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vx);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_xl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_xl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_xl_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_xl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->xl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_xl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_xl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_xl_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->xl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_xr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_xr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_xr_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_xr_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->xr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_xr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_xr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_xr_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->xr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vSf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vSf_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vSf_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vSf_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vSf = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vSf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vSf_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vSf_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vSf);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vSs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vSs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vSs_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vSs_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vSs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vSs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vSs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vSs_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vSs);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vVf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vVf_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vVf_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vVf_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vVf = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vVf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vVf_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vVf_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vVf);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vVs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vVs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vVs_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vVs_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vVs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vVs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vVs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vVs_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vVs);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Sfl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_Sfl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Sfl_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_Sfl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Sfl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Sfl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_Sfl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Sfl_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->Sfl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Sfr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_Sfr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Sfr_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_Sfr_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Sfr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Sfr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_Sfr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Sfr_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->Sfr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Ssl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_Ssl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Ssl_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_Ssl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Ssl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Ssl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_Ssl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Ssl_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->Ssl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Ssr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_Ssr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Ssr_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_Ssr_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->Ssr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Ssr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_Ssr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Ssr_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->Ssr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vrh_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vrh_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vrh_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vrh_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->vrh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vrh_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_vrh_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vrh_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->vrh);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_rhl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_rhl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_rhl_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_rhl_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->rhl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_rhl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_rhl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_rhl_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->rhl);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_rhr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_rhr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_rhr_set" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_rhr_set" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  if (arg1) (arg1)->rhr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_rhr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_rhr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_rhr_get" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  result = (d) ((arg1)->rhr);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  Varnr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::var result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_getValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getValue" "', argument " "1"" of type '" "duct::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_getValue" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  result = ((duct::Cell const *)arg1)->getValue(arg2);
  resultobj = SWIG_NewPointerObj((new tasystem::var(static_cast< const tasystem::var& >(result))), SWIGTYPE_p_tasystem__var, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Cell *arg1 = (duct::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "duct::Cell *""'"); 
  }
  arg1 = reinterpret_cast< duct::Cell * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__Cell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Duct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Duct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Duct" "', argument " "1"" of type '" "duct::Duct *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_init" "', argument " "1"" of type '" "duct::Duct *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  try {
    (arg1)->init();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_setVarsEqs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  duct::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Duct_setVarsEqs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_setVarsEqs" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_duct__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Duct_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Duct_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  arg2 = reinterpret_cast< duct::Cell * >(argp2);
  ((duct::Duct const *)arg1)->setVarsEqs(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_geom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::Geom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_geom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_geom" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = (duct::Geom *) &((duct::Duct const *)arg1)->geom();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Geom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_setResVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  Varnr arg2 ;
  us arg3 ;
  us arg4 ;
  d arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Duct_setResVar",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_setResVar" "', argument " "1"" of type '" "duct::Duct *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_setResVar" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_setResVar" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Duct_setResVar" "', argument " "4"" of type '" "us""'");
  } 
  arg4 = static_cast< us >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Duct_setResVar" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  (arg1)->setResVar(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_setResVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  Varnr arg2 ;
  us arg3 ;
  vd *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  vd temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Duct_setResVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_setResVar" "', argument " "1"" of type '" "duct::Duct *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_setResVar" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_setResVar" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  {
    temp4=vd_from_npy_nocpy((PyArrayObject*) obj3);
    arg4=&temp4;
  }
  (arg1)->setResVar(arg2,arg3,(vd const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_setResVar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_duct__Duct, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            // cout << "Check if it is a double array...\n";
            _v=(PyArray_Check(argv[3]) &&
              (PyArray_TYPE((PyArrayObject*) argv[3])==NPY_DOUBLE) &&
              (PyArray_NDIM((PyArrayObject*) argv[3])==1))?1:0;
            // if(_v){
            //   cout << "Is is a double array.\n";
            // }
          }
          if (_v) {
            return _wrap_Duct_setResVar__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_duct__Duct, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_Duct_setResVar__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Duct_setResVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::Duct::setResVar(Varnr,us,us,d)\n"
    "    duct::Duct::setResVar(Varnr,us,vd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Duct_setPhaseContraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  SwigValueWrapper< tasystem::PhaseConstraint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Duct_setPhaseContraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_setPhaseContraint" "', argument " "1"" of type '" "duct::Duct *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__PhaseConstraint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Duct_setPhaseContraint" "', argument " "2"" of type '" "tasystem::PhaseConstraint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Duct_setPhaseContraint" "', argument " "2"" of type '" "tasystem::PhaseConstraint""'");
    } else {
      tasystem::PhaseConstraint * temp = reinterpret_cast< tasystem::PhaseConstraint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  try {
    (arg1)->setPhaseContraint(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_getx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getx" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = ((duct::Duct const *)arg1)->getx();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  Varnr arg2 ;
  us arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Duct_getValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getValue" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_getValue" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_getValue" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  try {
    result = ((duct::Duct const *)arg1)->getValue(arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getValueT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  Varnr arg2 ;
  d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Duct_getValueT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getValueT" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_getValueT" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_getValueT" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  try {
    result = ((duct::Duct const *)arg1)->getValueT(arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getValueC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  Varnr arg2 ;
  us arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Duct_getValueC",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getValueC" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_getValueC" "', argument " "2"" of type '" "Varnr""'");
  } 
  arg2 = static_cast< Varnr >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_getValueC" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  try {
    result = ((duct::Duct const *)arg1)->getValueC(arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vc to numpy\n";
    resultobj=npy_from_vc(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getErrorAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  us arg2 ;
  us arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Duct_getErrorAt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getErrorAt" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_getErrorAt" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Duct_getErrorAt" "', argument " "3"" of type '" "us""'");
  } 
  arg3 = static_cast< us >(val3);
  try {
    result = ((duct::Duct const *)arg1)->getErrorAt(arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getNCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_getNCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getNCells" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = (us)((duct::Duct const *)arg1)->getNCells();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct___repr__" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = (char *)((duct::Duct const *)arg1)->__repr__();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_providePhaseDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_providePhaseDof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_providePhaseDof" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = (int)((duct::Duct const *)arg1)->providePhaseDof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_phaseDofValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_phaseDofValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_phaseDofValue" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = (d)((duct::Duct const *)arg1)->phaseDofValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Duct_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_error" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  result = ((duct::Duct const *)arg1)->error();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Duct_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Duct *arg1 = (duct::Duct *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Duct_getCell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Duct_getCell" "', argument " "1"" of type '" "duct::Duct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::Duct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Duct_getCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (duct::Cell *) &((duct::Duct const *)arg1)->getCell(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Duct_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__Duct, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IsentropicTube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::IsentropicTube *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IsentropicTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Geom,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IsentropicTube" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IsentropicTube" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  result = (duct::IsentropicTube *)new duct::IsentropicTube((duct::Geom const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__IsentropicTube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsentropicTube_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsentropicTube *arg1 = (duct::IsentropicTube *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsentropicTube_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsentropicTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsentropicTube_copy" "', argument " "1"" of type '" "duct::IsentropicTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsentropicTube * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsentropicTube_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsentropicTube_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Seg *)((duct::IsentropicTube const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IsentropicTube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsentropicTube *arg1 = (duct::IsentropicTube *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IsentropicTube",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsentropicTube, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IsentropicTube" "', argument " "1"" of type '" "duct::IsentropicTube *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsentropicTube * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsentropicTube_setVarsEqs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::IsentropicTube *arg1 = (duct::IsentropicTube *) 0 ;
  duct::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IsentropicTube_setVarsEqs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__IsentropicTube, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsentropicTube_setVarsEqs" "', argument " "1"" of type '" "duct::IsentropicTube const *""'"); 
  }
  arg1 = reinterpret_cast< duct::IsentropicTube * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_duct__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsentropicTube_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsentropicTube_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  arg2 = reinterpret_cast< duct::Cell * >(argp2);
  ((duct::IsentropicTube const *)arg1)->setVarsEqs(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IsentropicTube_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__IsentropicTube, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DuctWithSolid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctWithSolid *arg1 = (duct::DuctWithSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuctWithSolid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctWithSolid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuctWithSolid" "', argument " "1"" of type '" "duct::DuctWithSolid *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctWithSolid * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctWithSolid_hasSolid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctWithSolid *arg1 = (duct::DuctWithSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DuctWithSolid_hasSolid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctWithSolid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctWithSolid_hasSolid" "', argument " "1"" of type '" "duct::DuctWithSolid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctWithSolid * >(argp1);
  result = (bool)((duct::DuctWithSolid const *)arg1)->hasSolid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctWithSolid_getSolid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctWithSolid *arg1 = (duct::DuctWithSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  solids::Solid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DuctWithSolid_getSolid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctWithSolid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctWithSolid_getSolid" "', argument " "1"" of type '" "duct::DuctWithSolid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctWithSolid * >(argp1);
  result = (solids::Solid *) &((duct::DuctWithSolid const *)arg1)->getSolid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_solids__Solid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctWithSolid_setQsin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctWithSolid *arg1 = (duct::DuctWithSolid *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DuctWithSolid_setQsin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctWithSolid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctWithSolid_setQsin" "', argument " "1"" of type '" "duct::DuctWithSolid *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctWithSolid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DuctWithSolid_setQsin" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setQsin(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DuctWithSolid_setVarsEqs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::DuctWithSolid *arg1 = (duct::DuctWithSolid *) 0 ;
  duct::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DuctWithSolid_setVarsEqs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__DuctWithSolid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuctWithSolid_setVarsEqs" "', argument " "1"" of type '" "duct::DuctWithSolid const *""'"); 
  }
  arg1 = reinterpret_cast< duct::DuctWithSolid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_duct__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DuctWithSolid_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DuctWithSolid_setVarsEqs" "', argument " "2"" of type '" "duct::Cell &""'"); 
  }
  arg2 = reinterpret_cast< duct::Cell * >(argp2);
  ((duct::DuctWithSolid const *)arg1)->setVarsEqs(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuctWithSolid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__DuctWithSolid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LaminarDuct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = 0 ;
  d arg2 ;
  d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  duct::LaminarDuct *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LaminarDuct",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Geom,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LaminarDuct" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LaminarDuct" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  try {
    result = (duct::LaminarDuct *)new duct::LaminarDuct((duct::Geom const &)*arg1,arg2,arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__LaminarDuct, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LaminarDuct__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::LaminarDuct *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LaminarDuct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Geom,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LaminarDuct" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  try {
    result = (duct::LaminarDuct *)new duct::LaminarDuct((duct::Geom const &)*arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__LaminarDuct, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LaminarDuct__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  duct::LaminarDuct *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LaminarDuct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Geom,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LaminarDuct" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  try {
    result = (duct::LaminarDuct *)new duct::LaminarDuct((duct::Geom const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__LaminarDuct, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LaminarDuct(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LaminarDuct__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_LaminarDuct__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_LaminarDuct__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LaminarDuct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::LaminarDuct::LaminarDuct(duct::Geom const &,d,d)\n"
    "    duct::LaminarDuct::LaminarDuct(duct::Geom const &,d)\n"
    "    duct::LaminarDuct::LaminarDuct(duct::Geom const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LaminarDuct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::LaminarDuct *arg1 = (duct::LaminarDuct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LaminarDuct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__LaminarDuct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LaminarDuct" "', argument " "1"" of type '" "duct::LaminarDuct *""'"); 
  }
  arg1 = reinterpret_cast< duct::LaminarDuct * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LaminarDuct_setInsulated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::LaminarDuct *arg1 = (duct::LaminarDuct *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LaminarDuct_setInsulated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__LaminarDuct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LaminarDuct_setInsulated" "', argument " "1"" of type '" "duct::LaminarDuct *""'"); 
  }
  arg1 = reinterpret_cast< duct::LaminarDuct * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LaminarDuct_setInsulated" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    (arg1)->setInsulated(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LaminarDuct_isInsulated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::LaminarDuct *arg1 = (duct::LaminarDuct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LaminarDuct_isInsulated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__LaminarDuct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LaminarDuct_isInsulated" "', argument " "1"" of type '" "duct::LaminarDuct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::LaminarDuct * >(argp1);
  result = (bool)((duct::LaminarDuct const *)arg1)->isInsulated();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LaminarDuct_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::LaminarDuct *arg1 = (duct::LaminarDuct *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LaminarDuct_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__LaminarDuct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LaminarDuct_copy" "', argument " "1"" of type '" "duct::LaminarDuct const *""'"); 
  }
  arg1 = reinterpret_cast< duct::LaminarDuct * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LaminarDuct_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LaminarDuct_copy" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (segment::Seg *)((duct::LaminarDuct const *)arg1)->copy((tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LaminarDuct_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__LaminarDuct, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Stack__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Geom *arg1 = 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::Stack *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Stack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Geom,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stack" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stack" "', argument " "1"" of type '" "duct::Geom const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Geom * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Stack" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stack" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (duct::Stack *)new duct::Stack((duct::Geom const &)*arg1,(string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Stack, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stack__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Stack *arg1 = 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::Stack *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Stack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_duct__Stack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stack" "', argument " "1"" of type '" "duct::Stack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stack" "', argument " "1"" of type '" "duct::Stack const &""'"); 
  }
  arg1 = reinterpret_cast< duct::Stack * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Stack" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stack" "', argument " "2"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  result = (duct::Stack *)new duct::Stack((duct::Stack const &)*arg1,(tasystem::TaSystem const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Stack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stack(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Geom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Stack__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_duct__Stack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Stack__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Stack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    duct::Stack::Stack(duct::Geom const &,string const &)\n"
    "    duct::Stack::Stack(duct::Stack const &,tasystem::TaSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Stack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  duct::Stack *arg1 = (duct::Stack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Stack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_duct__Stack, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Stack" "', argument " "1"" of type '" "duct::Stack *""'"); 
  }
  arg1 = reinterpret_cast< duct::Stack * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Stack_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_duct__Stack, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TaSystem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TaSystem")) SWIG_fail;
  try {
    result = (tasystem::TaSystem *)new tasystem::TaSystem();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TaSystem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TaSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TaSystem" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TaSystem" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  try {
    result = (tasystem::TaSystem *)new tasystem::TaSystem((tasystem::Globalconf const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TaSystem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TaSystem__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TaSystem__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TaSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::TaSystem::TaSystem()\n"
    "    tasystem::TaSystem::TaSystem(tasystem::Globalconf const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TaSystem_setGc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  tasystem::Globalconf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_setGc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_setGc" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_setGc" "', argument " "2"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_setGc" "', argument " "2"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::Globalconf * >(argp2);
  (arg1)->setGc((tasystem::Globalconf const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_setMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_setMass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_setMass" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaSystem_setMass" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setMass(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_getMass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getMass" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (d)((tasystem::TaSystem const *)arg1)->getMass();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TaSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TaSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TaSystem" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_copy" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (tasystem::TaSystem *)((tasystem::TaSystem const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_nSegs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_nSegs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_nSegs" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (us)((tasystem::TaSystem const *)arg1)->nSegs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_nConnectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_nConnectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_nConnectors" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (us)((tasystem::TaSystem const *)arg1)->nConnectors();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  segment::Connector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem___iadd__" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_segment__Connector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem___iadd__" "', argument " "2"" of type '" "segment::Connector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem___iadd__" "', argument " "2"" of type '" "segment::Connector const &""'"); 
  }
  arg2 = reinterpret_cast< segment::Connector * >(argp2);
  try {
    result = (tasystem::TaSystem *) &(arg1)->operator +=((segment::Connector const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  segment::Seg *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem___iadd__" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_segment__Seg,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem___iadd__" "', argument " "2"" of type '" "segment::Seg const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem___iadd__" "', argument " "2"" of type '" "segment::Seg const &""'"); 
  }
  arg2 = reinterpret_cast< segment::Seg * >(argp2);
  try {
    result = (tasystem::TaSystem *) &(arg1)->operator +=((segment::Seg const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_segment__Connector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TaSystem___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_segment__Seg, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TaSystem___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TaSystem___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::TaSystem::operator +=(segment::Connector const &)\n"
    "    tasystem::TaSystem::operator +=(segment::Seg const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TaSystem_showJac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dmat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_showJac",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_showJac" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  try {
    result = (arg1)->showJac();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    resultobj=npy_from_dmat(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_show" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaSystem_show" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  try {
    (arg1)->show(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_show" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  try {
    (arg1)->show();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TaSystem_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TaSystem_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TaSystem_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::TaSystem::show(us)\n"
    "    tasystem::TaSystem::show()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TaSystem_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_init" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  try {
    (arg1)->init();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_checkInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_checkInit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_checkInit" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  (arg1)->checkInit();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_Error" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  try {
    result = (arg1)->Error();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getRes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_getRes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getRes" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  try {
    result = (arg1)->getRes();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_setRes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  vd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_setRes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_setRes" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  try {
    (arg1)->setRes((vd const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_updateNf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_updateNf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_updateNf" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaSystem_updateNf" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  try {
    (arg1)->updateNf(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_resetHarmonics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_resetHarmonics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_resetHarmonics" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  (arg1)->resetHarmonics();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getDuct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::Duct *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_getDuct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getDuct" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_getDuct" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_getDuct" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (duct::Duct *) &((tasystem::TaSystem const *)arg1)->getDuct((string const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__Duct, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getConnnectorVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  duct::ConnectorVolume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_getConnnectorVolume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getConnnectorVolume" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_getConnnectorVolume" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_getConnnectorVolume" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (duct::ConnectorVolume *) &((tasystem::TaSystem const *)arg1)->getConnnectorVolume((string const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duct__ConnectorVolume, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getPiston(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  mech::Piston *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_getPiston",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getPiston" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_getPiston" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_getPiston" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (mech::Piston *) &((tasystem::TaSystem const *)arg1)->getPiston((string const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mech__Piston, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getNDofs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_getNDofs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getNDofs" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (us)((tasystem::TaSystem const *)arg1)->getNDofs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getNEqs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  us result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TaSystem_getNEqs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getNEqs" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (us)((tasystem::TaSystem const *)arg1)->getNEqs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getConnector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Connector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_getConnector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getConnector" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_getConnector" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_getConnector" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (segment::Connector *)((tasystem::TaSystem const *)arg1)->getConnector((string const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Connector, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TaSystem_getSeg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  segment::Seg *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TaSystem_getSeg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaSystem_getSeg" "', argument " "1"" of type '" "tasystem::TaSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaSystem_getSeg" "', argument " "2"" of type '" "string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaSystem_getSeg" "', argument " "2"" of type '" "string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (segment::Seg *)((tasystem::TaSystem const *)arg1)->getSeg((string const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment__Seg, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *TaSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__TaSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EngineSystem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Globalconf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::EngineSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EngineSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__Globalconf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::Globalconf const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Globalconf * >(argp1);
  try {
    result = (tasystem::EngineSystem *)new tasystem::EngineSystem((tasystem::Globalconf const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__EngineSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EngineSystem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::EngineSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EngineSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__EngineSystem,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::EngineSystem const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::EngineSystem const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  try {
    result = (tasystem::EngineSystem *)new tasystem::EngineSystem((tasystem::EngineSystem const &)*arg1);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__EngineSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EngineSystem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::EngineSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EngineSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__TaSystem,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::TaSystem const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EngineSystem" "', argument " "1"" of type '" "tasystem::TaSystem const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = (tasystem::EngineSystem *)new tasystem::EngineSystem((tasystem::TaSystem const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__EngineSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EngineSystem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__EngineSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EngineSystem__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EngineSystem__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__Globalconf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EngineSystem__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EngineSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::EngineSystem::EngineSystem(tasystem::Globalconf const &)\n"
    "    tasystem::EngineSystem::EngineSystem(tasystem::EngineSystem const &)\n"
    "    tasystem::EngineSystem::EngineSystem(tasystem::TaSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EngineSystem_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::TaSystem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_copy" "', argument " "1"" of type '" "tasystem::EngineSystem const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  result = (tasystem::TaSystem *)((tasystem::EngineSystem const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_Error" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  try {
    result = (arg1)->Error();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_setRes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  vd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vd temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineSystem_setRes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_setRes" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  {
    temp2=vd_from_npy_nocpy((PyArrayObject*) obj1);
    arg2=&temp2;
  }
  try {
    (arg1)->setRes((vd const &)*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_getRes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_getRes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_getRes" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  try {
    result = (arg1)->getRes();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_init" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  try {
    (arg1)->init();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EngineSystem_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_show" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EngineSystem_show" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  try {
    (arg1)->show(arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_show" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  try {
    (arg1)->show();
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EngineSystem_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__EngineSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EngineSystem_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__EngineSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EngineSystem_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EngineSystem_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::EngineSystem::show(us)\n"
    "    tasystem::EngineSystem::show()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EngineSystem_domg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EngineSystem_domg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineSystem_domg" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  result = (arg1)->domg();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EngineSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::EngineSystem *arg1 = (tasystem::EngineSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EngineSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__EngineSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EngineSystem" "', argument " "1"" of type '" "tasystem::EngineSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::EngineSystem * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EngineSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__EngineSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ErrorVals__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  d arg1 ;
  d arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::ErrorVals *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ErrorVals",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ErrorVals" "', argument " "1"" of type '" "d""'");
  } 
  arg1 = static_cast< d >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ErrorVals" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  result = (tasystem::ErrorVals *)new tasystem::ErrorVals(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__ErrorVals, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ErrorVals__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::ErrorVals *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::ErrorVals *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ErrorVals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__ErrorVals,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ErrorVals" "', argument " "1"" of type '" "tasystem::ErrorVals const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ErrorVals" "', argument " "1"" of type '" "tasystem::ErrorVals const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::ErrorVals * >(argp1);
  result = (tasystem::ErrorVals *)new tasystem::ErrorVals((tasystem::ErrorVals const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__ErrorVals, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ErrorVals(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__ErrorVals, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ErrorVals__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_ErrorVals__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ErrorVals'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::ErrorVals::ErrorVals(d,d)\n"
    "    tasystem::ErrorVals::ErrorVals(tasystem::ErrorVals const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ErrorVals_getFuner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::ErrorVals *arg1 = (tasystem::ErrorVals *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorVals_getFuner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__ErrorVals, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorVals_getFuner" "', argument " "1"" of type '" "tasystem::ErrorVals const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::ErrorVals * >(argp1);
  result = (d)((tasystem::ErrorVals const *)arg1)->getFuner();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ErrorVals_getReler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::ErrorVals *arg1 = (tasystem::ErrorVals *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  d result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorVals_getReler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__ErrorVals, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorVals_getReler" "', argument " "1"" of type '" "tasystem::ErrorVals const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::ErrorVals * >(argp1);
  result = (d)((tasystem::ErrorVals const *)arg1)->getReler();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ErrorVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::ErrorVals *arg1 = (tasystem::ErrorVals *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ErrorVals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__ErrorVals, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ErrorVals" "', argument " "1"" of type '" "tasystem::ErrorVals *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::ErrorVals * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ErrorVals_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__ErrorVals, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SolProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolProgress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SolProgress")) SWIG_fail;
  result = (tasystem::SolProgress *)new tasystem::SolProgress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolProgress *arg1 = (tasystem::SolProgress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SolProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolProgress" "', argument " "1"" of type '" "tasystem::SolProgress *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolProgress * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolProgress___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolProgress *arg1 = (tasystem::SolProgress *) 0 ;
  tasystem::ErrorVals *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::SolProgress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolProgress___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolProgress___iadd__" "', argument " "1"" of type '" "tasystem::SolProgress *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolProgress * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__ErrorVals,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolProgress___iadd__" "', argument " "2"" of type '" "tasystem::ErrorVals const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolProgress___iadd__" "', argument " "2"" of type '" "tasystem::ErrorVals const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::ErrorVals * >(argp2);
  result = (tasystem::SolProgress *) &(arg1)->operator +=((tasystem::ErrorVals const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolProgress_Funer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolProgress *arg1 = (tasystem::SolProgress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolProgress_Funer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolProgress_Funer" "', argument " "1"" of type '" "tasystem::SolProgress const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolProgress * >(argp1);
  result = ((tasystem::SolProgress const *)arg1)->Funer();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolProgress_Reler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolProgress *arg1 = (tasystem::SolProgress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vd result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolProgress_Reler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolProgress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolProgress_Reler" "', argument " "1"" of type '" "tasystem::SolProgress const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolProgress * >(argp1);
  result = ((tasystem::SolProgress const *)arg1)->Reler();
  {
    // cout << "vd to numpy\n";
    resultobj=npy_from_vd(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolProgress_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__SolProgress, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SolverConfiguration_setWait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setWait",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setWait" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setWait" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setWait(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setMaxiter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  us arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setMaxiter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setMaxiter" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setMaxiter" "', argument " "2"" of type '" "us""'");
  } 
  arg2 = static_cast< us >(val2);
  (arg1)->setMaxiter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setFuntol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setFuntol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setFuntol" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setFuntol" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setFuntol(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setReltol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setReltol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setReltol" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setReltol" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setReltol(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setDampfac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setDampfac",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setDampfac" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setDampfac" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setDampfac(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setMindampfac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setMindampfac",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setMindampfac" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setMindampfac" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setMindampfac(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_setMaxdampfac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolverConfiguration_setMaxdampfac",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_setMaxdampfac" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolverConfiguration_setMaxdampfac" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  (arg1)->setMaxdampfac(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SolverConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__SolverConfiguration,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration((tasystem::SolverConfiguration const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SolverConfiguration",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  d arg5 ;
  bool arg6 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SolverConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SolverConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SolverConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SolverConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SolverConfiguration" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SolverConfiguration" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  d arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SolverConfiguration",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SolverConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SolverConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SolverConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SolverConfiguration" "', argument " "5"" of type '" "d""'");
  } 
  arg5 = static_cast< d >(val5);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  d arg3 ;
  d arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SolverConfiguration",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SolverConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SolverConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SolverConfiguration" "', argument " "4"" of type '" "d""'");
  } 
  arg4 = static_cast< d >(val4);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  d arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SolverConfiguration",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SolverConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SolverConfiguration" "', argument " "3"" of type '" "d""'");
  } 
  arg3 = static_cast< d >(val3);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  d arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SolverConfiguration",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SolverConfiguration" "', argument " "2"" of type '" "d""'");
  } 
  arg2 = static_cast< d >(val2);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  us arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SolverConfiguration",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SolverConfiguration" "', argument " "1"" of type '" "us""'");
  } 
  arg1 = static_cast< us >(val1);
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SolverConfiguration")) SWIG_fail;
  result = (tasystem::SolverConfiguration *)new tasystem::SolverConfiguration();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SolverConfiguration(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SolverConfiguration__SWIG_8(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__SolverConfiguration, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SolverConfiguration__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SolverConfiguration__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SolverConfiguration__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_SolverConfiguration__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_SolverConfiguration__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_SolverConfiguration__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_SolverConfiguration__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_SolverConfiguration__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SolverConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(tasystem::SolverConfiguration const &)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(bool)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us,d,d,d,d,bool)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us,d,d,d,d)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us,d,d,d)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us,d,d)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us,d)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration(us)\n"
    "    tasystem::SolverConfiguration::SolverConfiguration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolverConfiguration_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolverConfiguration_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolverConfiguration_show" "', argument " "1"" of type '" "tasystem::SolverConfiguration const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  ((tasystem::SolverConfiguration const *)arg1)->show();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SolverConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration *arg1 = (tasystem::SolverConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SolverConfiguration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolverConfiguration" "', argument " "1"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolverConfiguration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__SolverConfiguration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_doIter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  tasystem::SolverConfiguration *arg2 = (tasystem::SolverConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< tasystem::ErrorVals > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:doIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doIter" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_tasystem__SolverConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "doIter" "', argument " "2"" of type '" "tasystem::SolverConfiguration *""'"); 
  }
  arg2 = reinterpret_cast< tasystem::SolverConfiguration * >(argp2);
  try {
    result = tasystem::doIter(arg1,arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj((new tasystem::ErrorVals(static_cast< const tasystem::ErrorVals& >(result))), SWIGTYPE_p_tasystem__ErrorVals, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_doIter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::TaSystem *arg1 = (tasystem::TaSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< tasystem::ErrorVals > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:doIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__TaSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doIter" "', argument " "1"" of type '" "tasystem::TaSystem *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::TaSystem * >(argp1);
  result = tasystem::doIter(arg1);
  resultobj = SWIG_NewPointerObj((new tasystem::ErrorVals(static_cast< const tasystem::ErrorVals& >(result))), SWIGTYPE_p_tasystem__ErrorVals, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_doIter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_doIter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tasystem__SolverConfiguration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_doIter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'doIter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::doIter(tasystem::TaSystem *,tasystem::SolverConfiguration *)\n"
    "    tasystem::doIter(tasystem::TaSystem *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::SolverConfiguration arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Solver",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_tasystem__SolverConfiguration,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Solver" "', argument " "1"" of type '" "tasystem::SolverConfiguration const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Solver" "', argument " "1"" of type '" "tasystem::SolverConfiguration const""'");
    } else {
      tasystem::SolverConfiguration * temp = reinterpret_cast< tasystem::SolverConfiguration * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (tasystem::Solver *)new tasystem::Solver(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__Solver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Solver")) SWIG_fail;
  result = (tasystem::Solver *)new tasystem::Solver();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tasystem__Solver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Solver__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_tasystem__SolverConfiguration, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Solver__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Solver'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::Solver::Solver(tasystem::SolverConfiguration const)\n"
    "    tasystem::Solver::Solver()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_setSc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  tasystem::SolverConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_setSc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setSc" "', argument " "1"" of type '" "tasystem::Solver *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__SolverConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_setSc" "', argument " "2"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_setSc" "', argument " "2"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::SolverConfiguration * >(argp2);
  (arg1)->setSc((tasystem::SolverConfiguration const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_stop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_stop" "', argument " "1"" of type '" "tasystem::Solver *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  (arg1)->stop();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  tasystem::SolProgress result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_solve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_solve" "', argument " "1"" of type '" "tasystem::Solver *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_solve" "', argument " "2"" of type '" "tasystem::TaSystem &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_solve" "', argument " "2"" of type '" "tasystem::TaSystem &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  try {
    result = (arg1)->solve(*arg2);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj((new tasystem::SolProgress(static_cast< const tasystem::SolProgress& >(result))), SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  tasystem::TaSystem *arg2 = 0 ;
  tasystem::SolverConfiguration *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  tasystem::SolProgress result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_solve",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_solve" "', argument " "1"" of type '" "tasystem::Solver *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tasystem__TaSystem,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_solve" "', argument " "2"" of type '" "tasystem::TaSystem &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_solve" "', argument " "2"" of type '" "tasystem::TaSystem &""'"); 
  }
  arg2 = reinterpret_cast< tasystem::TaSystem * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tasystem__SolverConfiguration,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_solve" "', argument " "3"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_solve" "', argument " "3"" of type '" "tasystem::SolverConfiguration const &""'"); 
  }
  arg3 = reinterpret_cast< tasystem::SolverConfiguration * >(argp3);
  try {
    result = (arg1)->solve(*arg2,(tasystem::SolverConfiguration const &)*arg3);
  }
  catch(std::exception &_e) {
    PyErr_SetString(PyExc_RuntimeError, (&_e)->what());
    SWIG_fail;
    
  }
  catch(...) {
    SWIG_exception_fail(SWIG_RuntimeError,"unknown exception");
  }
  
  resultobj = SWIG_NewPointerObj((new tasystem::SolProgress(static_cast< const tasystem::SolProgress& >(result))), SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_solve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_solve__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_tasystem__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_tasystem__TaSystem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tasystem__SolverConfiguration, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_solve__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_solve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tasystem::Solver::solve(tasystem::TaSystem &)\n"
    "    tasystem::Solver::solve(tasystem::TaSystem &,tasystem::SolverConfiguration const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_getSp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  tasystem::SolProgress result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getSp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getSp" "', argument " "1"" of type '" "tasystem::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  result = ((tasystem::Solver const *)arg1)->getSp();
  resultobj = SWIG_NewPointerObj((new tasystem::SolProgress(static_cast< const tasystem::SolProgress& >(result))), SWIGTYPE_p_tasystem__SolProgress, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tasystem::Solver *arg1 = (tasystem::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Solver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tasystem__Solver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Solver" "', argument " "1"" of type '" "tasystem::Solver *""'"); 
  }
  arg1 = reinterpret_cast< tasystem::Solver * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Solver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tasystem__Solver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"clearConsole", _wrap_clearConsole, METH_VARARGS, NULL},
	 { (char *)"setTASMETTracer", _wrap_setTASMETTracer, METH_VARARGS, NULL},
	 { (char *)"none_swigconstant", none_swigconstant, METH_VARARGS, NULL},
	 { (char *)"rho_swigconstant", rho_swigconstant, METH_VARARGS, NULL},
	 { (char *)"m_swigconstant", m_swigconstant, METH_VARARGS, NULL},
	 { (char *)"T_swigconstant", T_swigconstant, METH_VARARGS, NULL},
	 { (char *)"p_swigconstant", p_swigconstant, METH_VARARGS, NULL},
	 { (char *)"Ts_swigconstant", Ts_swigconstant, METH_VARARGS, NULL},
	 { (char *)"Tw_swigconstant", Tw_swigconstant, METH_VARARGS, NULL},
	 { (char *)"mH_swigconstant", mH_swigconstant, METH_VARARGS, NULL},
	 { (char *)"U_swigconstant", U_swigconstant, METH_VARARGS, NULL},
	 { (char *)"u_swigconstant", u_swigconstant, METH_VARARGS, NULL},
	 { (char *)"mu_swigconstant", mu_swigconstant, METH_VARARGS, NULL},
	 { (char *)"Q_swigconstant", Q_swigconstant, METH_VARARGS, NULL},
	 { (char *)"Qs_swigconstant", Qs_swigconstant, METH_VARARGS, NULL},
	 { (char *)"F_swigconstant", F_swigconstant, METH_VARARGS, NULL},
	 { (char *)"x_swigconstant", x_swigconstant, METH_VARARGS, NULL},
	 { (char *)"Z_swigconstant", Z_swigconstant, METH_VARARGS, NULL},
	 { (char *)"left_swigconstant", left_swigconstant, METH_VARARGS, NULL},
	 { (char *)"right_swigconstant", right_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_Globalconf", _wrap_new_Globalconf, METH_VARARGS, (char *)"\n"
		"new_Globalconf(us Nf, d freq, string const & gasstring, d T0, d p0) -> Globalconf\n"
		"\n"
		"Parameters:\n"
		"    Nf: us\n"
		"    freq: d\n"
		"    gasstring: string const &\n"
		"    T0: d\n"
		"    p0: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_airSTP", _wrap_Globalconf_airSTP, METH_VARARGS, (char *)"\n"
		"Globalconf_airSTP(us Nf, d freq) -> Globalconf\n"
		"\n"
		"Parameters:\n"
		"    Nf: us\n"
		"    freq: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_heliumSTP", _wrap_Globalconf_heliumSTP, METH_VARARGS, (char *)"\n"
		"Globalconf_heliumSTP(us Nf, d freq) -> Globalconf\n"
		"\n"
		"Parameters:\n"
		"    Nf: us\n"
		"    freq: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_Nf", _wrap_Globalconf_Nf, METH_VARARGS, (char *)"\n"
		"Globalconf_Nf(Globalconf self) -> us const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_Ns", _wrap_Globalconf_Ns, METH_VARARGS, (char *)"\n"
		"Globalconf_Ns(Globalconf self) -> us const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"delete_Globalconf", _wrap_delete_Globalconf, METH_VARARGS, (char *)"\n"
		"delete_Globalconf(Globalconf self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_getomg", _wrap_Globalconf_getomg, METH_VARARGS, (char *)"\n"
		"Globalconf_getomg(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_getfreq", _wrap_Globalconf_getfreq, METH_VARARGS, (char *)"\n"
		"Globalconf_getfreq(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_meshPeclet", _wrap_Globalconf_meshPeclet, METH_VARARGS, (char *)"\n"
		"Globalconf_meshPeclet(Globalconf self, d dx, d u) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"    dx: d\n"
		"    u: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_c0", _wrap_Globalconf_c0, METH_VARARGS, (char *)"\n"
		"Globalconf_c0(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_rho0", _wrap_Globalconf_rho0, METH_VARARGS, (char *)"\n"
		"Globalconf_rho0(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_deltanu0", _wrap_Globalconf_deltanu0, METH_VARARGS, (char *)"\n"
		"Globalconf_deltanu0(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_deltanu0min", _wrap_Globalconf_deltanu0min, METH_VARARGS, (char *)"\n"
		"Globalconf_deltanu0min(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_T0", _wrap_Globalconf_T0, METH_VARARGS, (char *)"\n"
		"Globalconf_T0(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_p0", _wrap_Globalconf_p0, METH_VARARGS, (char *)"\n"
		"Globalconf_p0(Globalconf self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_setNf", _wrap_Globalconf_setNf, METH_VARARGS, (char *)"\n"
		"Globalconf_setNf(Globalconf self, us arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    arg2: us\n"
		"\n"
		""},
	 { (char *)"Globalconf_setomg", _wrap_Globalconf_setomg, METH_VARARGS, (char *)"\n"
		"Globalconf_setomg(Globalconf self, d omg)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    omg: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_setfreq", _wrap_Globalconf_setfreq, METH_VARARGS, (char *)"\n"
		"Globalconf_setfreq(Globalconf self, d freq)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    freq: d\n"
		"\n"
		""},
	 { (char *)"Globalconf_iDFT_set", _wrap_Globalconf_iDFT_set, METH_VARARGS, (char *)"\n"
		"Globalconf_iDFT_set(Globalconf self, dmat iDFT)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    iDFT: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_iDFT_get", _wrap_Globalconf_iDFT_get, METH_VARARGS, (char *)"\n"
		"Globalconf_iDFT_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_fDFT_set", _wrap_Globalconf_fDFT_set, METH_VARARGS, (char *)"\n"
		"Globalconf_fDFT_set(Globalconf self, dmat fDFT)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    fDFT: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_fDFT_get", _wrap_Globalconf_fDFT_get, METH_VARARGS, (char *)"\n"
		"Globalconf_fDFT_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_DDTfd_set", _wrap_Globalconf_DDTfd_set, METH_VARARGS, (char *)"\n"
		"Globalconf_DDTfd_set(Globalconf self, dmat DDTfd)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    DDTfd: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_DDTfd_get", _wrap_Globalconf_DDTfd_get, METH_VARARGS, (char *)"\n"
		"Globalconf_DDTfd_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_DDTtd_set", _wrap_Globalconf_DDTtd_set, METH_VARARGS, (char *)"\n"
		"Globalconf_DDTtd_set(Globalconf self, dmat DDTtd)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    DDTtd: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_DDTtd_get", _wrap_Globalconf_DDTtd_get, METH_VARARGS, (char *)"\n"
		"Globalconf_DDTtd_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_ddt_set", _wrap_Globalconf_ddt_set, METH_VARARGS, (char *)"\n"
		"Globalconf_ddt_set(Globalconf self, dmat ddt)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    ddt: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_ddt_get", _wrap_Globalconf_ddt_get, METH_VARARGS, (char *)"\n"
		"Globalconf_ddt_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_iddt_set", _wrap_Globalconf_iddt_set, METH_VARARGS, (char *)"\n"
		"Globalconf_iddt_set(Globalconf self, dmat iddt)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    iddt: dmat\n"
		"\n"
		""},
	 { (char *)"Globalconf_iddt_get", _wrap_Globalconf_iddt_get, METH_VARARGS, (char *)"\n"
		"Globalconf_iddt_get(Globalconf self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"\n"
		""},
	 { (char *)"Globalconf_setGas", _wrap_Globalconf_setGas, METH_VARARGS, (char *)"\n"
		"Globalconf_setGas(Globalconf self, string const & mat)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf *\n"
		"    mat: string const &\n"
		"\n"
		""},
	 { (char *)"Globalconf_gas", _wrap_Globalconf_gas, METH_VARARGS, (char *)"\n"
		"Globalconf_gas(Globalconf self) -> gases::Gas const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_show", _wrap_Globalconf_show, METH_VARARGS, (char *)"\n"
		"Globalconf_show(Globalconf self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Globalconf_swigregister", Globalconf_swigregister, METH_VARARGS, NULL},
	 { (char *)"var_setDofNr", _wrap_var_setDofNr, METH_VARARGS, (char *)"\n"
		"var_setDofNr(var self, us Dofnr)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var *\n"
		"    Dofnr: us\n"
		"\n"
		""},
	 { (char *)"var_getDofNr", _wrap_var_getDofNr, METH_VARARGS, (char *)"\n"
		"var_getDofNr(var self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"new_var", _wrap_new_var, METH_VARARGS, (char *)"\n"
		"var()\n"
		"var(var o)\n"
		"\n"
		"Parameters:\n"
		"    o: tasystem::var const &\n"
		"\n"
		"var(Globalconf arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::Globalconf const &\n"
		"\n"
		"var(Globalconf arg2, double arg3)\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::Globalconf const &\n"
		"    arg3: double\n"
		"\n"
		"var(Globalconf arg2, vd const & data, bool adata=True)\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::Globalconf const &\n"
		"    data: vd const &\n"
		"    adata: bool\n"
		"\n"
		"var(Globalconf arg2, vd const & data)\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::Globalconf const &\n"
		"    data: vd const &\n"
		"\n"
		"new_var(Globalconf arg2, vc const & data) -> var\n"
		"\n"
		"Parameters:\n"
		"    arg1: tasystem::Globalconf const &\n"
		"    data: vc const &\n"
		"\n"
		""},
	 { (char *)"delete_var", _wrap_delete_var, METH_VARARGS, (char *)"\n"
		"delete_var(var self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var *\n"
		"\n"
		""},
	 { (char *)"var_gc", _wrap_var_gc, METH_VARARGS, (char *)"\n"
		"var_gc(var self) -> Globalconf\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_tdata", _wrap_var_tdata, METH_VARARGS, (char *)"\n"
		"var_tdata(var self) -> vd const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_adata", _wrap_var_adata, METH_VARARGS, (char *)"\n"
		"var_adata(var self) -> vd const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var___call__", _wrap_var___call__, METH_VARARGS, (char *)"\n"
		"__call__(us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    i: us\n"
		"\n"
		"var___call__(var self) -> vd const &\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_timeResponse", _wrap_var_timeResponse, METH_VARARGS, (char *)"\n"
		"timeResponse(us nperiod=2, us ninst=100) -> vd\n"
		"\n"
		"Parameters:\n"
		"    nperiod: us\n"
		"    ninst: us\n"
		"\n"
		"timeResponse(us nperiod=2) -> vd\n"
		"\n"
		"Parameters:\n"
		"    nperiod: us\n"
		"\n"
		"var_timeResponse(var self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_timeResponseTime", _wrap_var_timeResponseTime, METH_VARARGS, (char *)"\n"
		"timeResponseTime(us nperiod=2, us ninst=100) -> vd\n"
		"\n"
		"Parameters:\n"
		"    nperiod: us\n"
		"    ninst: us\n"
		"\n"
		"timeResponseTime(us nperiod=2) -> vd\n"
		"\n"
		"Parameters:\n"
		"    nperiod: us\n"
		"\n"
		"var_timeResponseTime(var self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_settdata", _wrap_var_settdata, METH_VARARGS, (char *)"\n"
		"settdata(double value)\n"
		"\n"
		"Parameters:\n"
		"    value: double\n"
		"\n"
		"var_settdata(var self, vd const & values)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var *\n"
		"    values: vd const &\n"
		"\n"
		""},
	 { (char *)"var_setadata", _wrap_var_setadata, METH_VARARGS, (char *)"\n"
		"setadata(vd const & values)\n"
		"\n"
		"Parameters:\n"
		"    values: vd const &\n"
		"\n"
		"setadata(us freq, double val)\n"
		"\n"
		"Parameters:\n"
		"    freq: us\n"
		"    val: double\n"
		"\n"
		"var_setadata(var self, vc const & values)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var *\n"
		"    values: vc const &\n"
		"\n"
		""},
	 { (char *)"var_getcRes", _wrap_var_getcRes, METH_VARARGS, (char *)"\n"
		"var_getcRes(var self) -> vc\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::var const *\n"
		"\n"
		""},
	 { (char *)"var_swigregister", var_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SegConBase", _wrap_delete_SegConBase, METH_VARARGS, (char *)"\n"
		"delete_SegConBase(SegConBase self)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase *\n"
		"\n"
		""},
	 { (char *)"SegConBase___repr__", _wrap_SegConBase___repr__, METH_VARARGS, (char *)"\n"
		"SegConBase___repr__(SegConBase self) -> char const *\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase const *\n"
		"\n"
		""},
	 { (char *)"SegConBase_getName", _wrap_SegConBase_getName, METH_VARARGS, (char *)"\n"
		"SegConBase_getName(SegConBase self) -> std::string const &\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase const *\n"
		"\n"
		""},
	 { (char *)"SegConBase_getID", _wrap_SegConBase_getID, METH_VARARGS, (char *)"\n"
		"SegConBase_getID(SegConBase self) -> std::string const &\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase const *\n"
		"\n"
		""},
	 { (char *)"SegConBase_setName", _wrap_SegConBase_setName, METH_VARARGS, (char *)"\n"
		"SegConBase_setName(SegConBase self, std::string const & name)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase *\n"
		"    name: std::string const &\n"
		"\n"
		""},
	 { (char *)"SegConBase_setID", _wrap_SegConBase_setID, METH_VARARGS, (char *)"\n"
		"SegConBase_setID(SegConBase self, std::string const & id)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase *\n"
		"    id: std::string const &\n"
		"\n"
		""},
	 { (char *)"SegConBase_arbitrateMassEq", _wrap_SegConBase_arbitrateMassEq, METH_VARARGS, (char *)"\n"
		"SegConBase_arbitrateMassEq(SegConBase self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase const *\n"
		"\n"
		""},
	 { (char *)"SegConBase_error", _wrap_SegConBase_error, METH_VARARGS, (char *)"\n"
		"SegConBase_error(SegConBase self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: segment::SegConBase const *\n"
		"\n"
		""},
	 { (char *)"SegConBase_swigregister", SegConBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"PhaseConstraint_var_set", _wrap_PhaseConstraint_var_set, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_var_set(PhaseConstraint self, Varnr var)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"    var: enum Varnr\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_var_get", _wrap_PhaseConstraint_var_get, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_var_get(PhaseConstraint self) -> Varnr\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_freqnr_set", _wrap_PhaseConstraint_freqnr_set, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_freqnr_set(PhaseConstraint self, us freqnr)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"    freqnr: us\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_freqnr_get", _wrap_PhaseConstraint_freqnr_get, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_freqnr_get(PhaseConstraint self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_pos_set", _wrap_PhaseConstraint_pos_set, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_pos_set(PhaseConstraint self, tasystem::Pos pos)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"    pos: enum tasystem::Pos\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_pos_get", _wrap_PhaseConstraint_pos_get, METH_VARARGS, (char *)"\n"
		"PhaseConstraint_pos_get(PhaseConstraint self) -> tasystem::Pos\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"\n"
		""},
	 { (char *)"new_PhaseConstraint", _wrap_new_PhaseConstraint, METH_VARARGS, (char *)"\n"
		"PhaseConstraint(Varnr var, us freqnr=2, tasystem::Pos pos)\n"
		"\n"
		"Parameters:\n"
		"    var: enum Varnr\n"
		"    freqnr: us\n"
		"    pos: enum tasystem::Pos\n"
		"\n"
		"PhaseConstraint(Varnr var, us freqnr=2)\n"
		"\n"
		"Parameters:\n"
		"    var: enum Varnr\n"
		"    freqnr: us\n"
		"\n"
		"new_PhaseConstraint(Varnr var) -> PhaseConstraint\n"
		"\n"
		"Parameters:\n"
		"    var: enum Varnr\n"
		"\n"
		""},
	 { (char *)"delete_PhaseConstraint", _wrap_delete_PhaseConstraint, METH_VARARGS, (char *)"\n"
		"delete_PhaseConstraint(PhaseConstraint self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::PhaseConstraint *\n"
		"\n"
		""},
	 { (char *)"PhaseConstraint_swigregister", PhaseConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Connector", _wrap_delete_Connector, METH_VARARGS, (char *)"\n"
		"delete_Connector(Connector self)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::Connector *\n"
		"\n"
		""},
	 { (char *)"Connector_copy", _wrap_Connector_copy, METH_VARARGS, (char *)"\n"
		"Connector_copy(Connector self, TaSystem arg3) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: segment::Connector const *\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"Connector_swigregister", Connector_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DuctBc", _wrap_delete_DuctBc, METH_VARARGS, (char *)"\n"
		"delete_DuctBc(DuctBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctBc *\n"
		"\n"
		""},
	 { (char *)"DuctBc_swigregister", DuctBc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DuctConnector", _wrap_new_DuctConnector, METH_VARARGS, (char *)"\n"
		"DuctConnector(string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2, d K1to2=0, d K2to1=0)\n"
		"\n"
		"Parameters:\n"
		"    seg1: string const &\n"
		"    pos1: enum duct::Pos\n"
		"    seg2: string const &\n"
		"    pos2: enum duct::Pos\n"
		"    K1to2: d\n"
		"    K2to1: d\n"
		"\n"
		"DuctConnector(string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2, d K1to2=0)\n"
		"\n"
		"Parameters:\n"
		"    seg1: string const &\n"
		"    pos1: enum duct::Pos\n"
		"    seg2: string const &\n"
		"    pos2: enum duct::Pos\n"
		"    K1to2: d\n"
		"\n"
		"DuctConnector(string const & seg1, duct::Pos pos1, string const & seg2, duct::Pos pos2)\n"
		"\n"
		"Parameters:\n"
		"    seg1: string const &\n"
		"    pos1: enum duct::Pos\n"
		"    seg2: string const &\n"
		"    pos2: enum duct::Pos\n"
		"\n"
		"new_DuctConnector(DuctConnector arg2, TaSystem arg3) -> DuctConnector\n"
		"\n"
		"Parameters:\n"
		"    arg1: duct::DuctConnector const &\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"DuctConnector_copy", _wrap_DuctConnector_copy, METH_VARARGS, (char *)"\n"
		"DuctConnector_copy(DuctConnector self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctConnector const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_DuctConnector", _wrap_delete_DuctConnector, METH_VARARGS, (char *)"\n"
		"delete_DuctConnector(DuctConnector self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctConnector *\n"
		"\n"
		""},
	 { (char *)"DuctConnector_error", _wrap_DuctConnector_error, METH_VARARGS, (char *)"\n"
		"DuctConnector_error(DuctConnector self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctConnector const *\n"
		"\n"
		""},
	 { (char *)"DuctConnector_swigregister", DuctConnector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DuctPistonConnector", _wrap_new_DuctPistonConnector, METH_VARARGS, (char *)"\n"
		"DuctPistonConnector(string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos, d KDuctPiston=0, d KPistonDuct=0)\n"
		"\n"
		"Parameters:\n"
		"    ductid: string const &\n"
		"    ductpos: enum mech::Pos\n"
		"    pistonid: string const &\n"
		"    pistonpos: enum mech::Pos\n"
		"    KDuctPiston: d\n"
		"    KPistonDuct: d\n"
		"\n"
		"DuctPistonConnector(string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos, d KDuctPiston=0)\n"
		"\n"
		"Parameters:\n"
		"    ductid: string const &\n"
		"    ductpos: enum mech::Pos\n"
		"    pistonid: string const &\n"
		"    pistonpos: enum mech::Pos\n"
		"    KDuctPiston: d\n"
		"\n"
		"DuctPistonConnector(string const & ductid, mech::Pos ductpos, string const & pistonid, mech::Pos pistonpos)\n"
		"\n"
		"Parameters:\n"
		"    ductid: string const &\n"
		"    ductpos: enum mech::Pos\n"
		"    pistonid: string const &\n"
		"    pistonpos: enum mech::Pos\n"
		"\n"
		"new_DuctPistonConnector(DuctPistonConnector arg2, TaSystem arg3) -> DuctPistonConnector\n"
		"\n"
		"Parameters:\n"
		"    arg1: mech::DuctPistonConnector const &\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"DuctPistonConnector_copy", _wrap_DuctPistonConnector_copy, METH_VARARGS, (char *)"\n"
		"DuctPistonConnector_copy(DuctPistonConnector self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: mech::DuctPistonConnector const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_DuctPistonConnector", _wrap_delete_DuctPistonConnector, METH_VARARGS, (char *)"\n"
		"delete_DuctPistonConnector(DuctPistonConnector self)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::DuctPistonConnector *\n"
		"\n"
		""},
	 { (char *)"DuctPistonConnector_error", _wrap_DuctPistonConnector_error, METH_VARARGS, (char *)"\n"
		"DuctPistonConnector_error(DuctPistonConnector self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: mech::DuctPistonConnector const *\n"
		"\n"
		""},
	 { (char *)"DuctPistonConnector_swigregister", DuctPistonConnector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PressureBc", _wrap_new_PressureBc, METH_VARARGS, (char *)"\n"
		"PressureBc(string const & segid, duct::Pos position, var p, var Ts, var T)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    p: tasystem::var const &\n"
		"    Ts: tasystem::var const &\n"
		"    T: tasystem::var const &\n"
		"\n"
		"PressureBc(string const & segid, duct::Pos position, var p, var Ts)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    p: tasystem::var const &\n"
		"    Ts: tasystem::var const &\n"
		"\n"
		"new_PressureBc(string const & segid, duct::Pos position, var p) -> PressureBc\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    p: tasystem::var const &\n"
		"\n"
		""},
	 { (char *)"PressureBc_copy", _wrap_PressureBc_copy, METH_VARARGS, (char *)"\n"
		"PressureBc_copy(PressureBc self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::PressureBc const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"PressureBc_error", _wrap_PressureBc_error, METH_VARARGS, (char *)"\n"
		"PressureBc_error(PressureBc self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::PressureBc const *\n"
		"\n"
		""},
	 { (char *)"delete_PressureBc", _wrap_delete_PressureBc, METH_VARARGS, (char *)"\n"
		"delete_PressureBc(PressureBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::PressureBc *\n"
		"\n"
		""},
	 { (char *)"PressureBc_swigregister", PressureBc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AdiabaticWall", _wrap_new_AdiabaticWall, METH_VARARGS, (char *)"\n"
		"AdiabaticWall(string const & segid, duct::Pos position, bool arbitrateMass=False)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    arbitrateMass: bool\n"
		"\n"
		"new_AdiabaticWall(string const & segid, duct::Pos position) -> AdiabaticWall\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"\n"
		""},
	 { (char *)"AdiabaticWall_arbitrateMassEq", _wrap_AdiabaticWall_arbitrateMassEq, METH_VARARGS, (char *)"\n"
		"AdiabaticWall_arbitrateMassEq(AdiabaticWall self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AdiabaticWall const *\n"
		"\n"
		""},
	 { (char *)"delete_AdiabaticWall", _wrap_delete_AdiabaticWall, METH_VARARGS, (char *)"\n"
		"delete_AdiabaticWall(AdiabaticWall self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AdiabaticWall *\n"
		"\n"
		""},
	 { (char *)"AdiabaticWall_copy", _wrap_AdiabaticWall_copy, METH_VARARGS, (char *)"\n"
		"AdiabaticWall_copy(AdiabaticWall self, TaSystem arg3) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AdiabaticWall const *\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"AdiabaticWall_error", _wrap_AdiabaticWall_error, METH_VARARGS, (char *)"\n"
		"AdiabaticWall_error(AdiabaticWall self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AdiabaticWall const *\n"
		"\n"
		""},
	 { (char *)"AdiabaticWall_swigregister", AdiabaticWall_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IsoTWall", _wrap_new_IsoTWall, METH_VARARGS, (char *)"\n"
		"IsoTWall(string const & segid, duct::Pos position, var Tbc, bool arbitrateMass=False)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    Tbc: tasystem::var const &\n"
		"    arbitrateMass: bool\n"
		"\n"
		"new_IsoTWall(string const & segid, duct::Pos position, var Tbc) -> IsoTWall\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"    Tbc: tasystem::var const &\n"
		"\n"
		""},
	 { (char *)"IsoTWall_copy", _wrap_IsoTWall_copy, METH_VARARGS, (char *)"\n"
		"IsoTWall_copy(IsoTWall self, TaSystem sys) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsoTWall const *\n"
		"    sys: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_IsoTWall", _wrap_delete_IsoTWall, METH_VARARGS, (char *)"\n"
		"delete_IsoTWall(IsoTWall self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsoTWall *\n"
		"\n"
		""},
	 { (char *)"IsoTWall_arbitrateMassEq", _wrap_IsoTWall_arbitrateMassEq, METH_VARARGS, (char *)"\n"
		"IsoTWall_arbitrateMassEq(IsoTWall self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsoTWall const *\n"
		"\n"
		""},
	 { (char *)"IsoTWall_error", _wrap_IsoTWall_error, METH_VARARGS, (char *)"\n"
		"IsoTWall_error(IsoTWall self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsoTWall const *\n"
		"\n"
		""},
	 { (char *)"IsoTWall_swigregister", IsoTWall_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImpedanceBc", _wrap_new_ImpedanceBc, METH_VARARGS, (char *)"\n"
		"ImpedanceBc(string const & segid, duct::Pos pos, PyObject * pyfunc, d T0)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    pos: enum duct::Pos\n"
		"    pyfunc: PyObject *\n"
		"    T0: d\n"
		"\n"
		"new_ImpedanceBc(string const & segid, duct::Pos pos, PyObject * pyfunc) -> ImpedanceBc\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    pos: enum duct::Pos\n"
		"    pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"delete_ImpedanceBc", _wrap_delete_ImpedanceBc, METH_VARARGS, (char *)"\n"
		"delete_ImpedanceBc(ImpedanceBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ImpedanceBc *\n"
		"\n"
		""},
	 { (char *)"ImpedanceBc_copy", _wrap_ImpedanceBc_copy, METH_VARARGS, (char *)"\n"
		"ImpedanceBc_copy(ImpedanceBc self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ImpedanceBc const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"ImpedanceBc_error", _wrap_ImpedanceBc_error, METH_VARARGS, (char *)"\n"
		"ImpedanceBc_error(ImpedanceBc self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ImpedanceBc const *\n"
		"\n"
		""},
	 { (char *)"ImpedanceBc_swigregister", ImpedanceBc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VelocityBc", _wrap_new_VelocityBc, METH_VARARGS, (char *)"\n"
		"VelocityBc(string const & segid, duct::Pos pos, var u, d T0, bool arbitrateMass=False)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    pos: enum duct::Pos\n"
		"    u: tasystem::var const &\n"
		"    T0: d\n"
		"    arbitrateMass: bool\n"
		"\n"
		"VelocityBc(string const & segid, duct::Pos pos, var u, d T0)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    pos: enum duct::Pos\n"
		"    u: tasystem::var const &\n"
		"    T0: d\n"
		"\n"
		"new_VelocityBc(string const & segid, duct::Pos pos, var u) -> VelocityBc\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    pos: enum duct::Pos\n"
		"    u: tasystem::var const &\n"
		"\n"
		""},
	 { (char *)"delete_VelocityBc", _wrap_delete_VelocityBc, METH_VARARGS, (char *)"\n"
		"delete_VelocityBc(VelocityBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VelocityBc *\n"
		"\n"
		""},
	 { (char *)"VelocityBc_copy", _wrap_VelocityBc_copy, METH_VARARGS, (char *)"\n"
		"VelocityBc_copy(VelocityBc self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VelocityBc const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"VelocityBc_error", _wrap_VelocityBc_error, METH_VARARGS, (char *)"\n"
		"VelocityBc_error(VelocityBc self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VelocityBc const *\n"
		"\n"
		""},
	 { (char *)"VelocityBc_arbitrateMassEq", _wrap_VelocityBc_arbitrateMassEq, METH_VARARGS, (char *)"\n"
		"VelocityBc_arbitrateMassEq(VelocityBc self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VelocityBc const *\n"
		"\n"
		""},
	 { (char *)"VelocityBc_swigregister", VelocityBc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MechBc", _wrap_new_MechBc, METH_VARARGS, (char *)"\n"
		"MechBc(string const & segid, Varnr var, var bc)\n"
		"\n"
		"Parameters:\n"
		"    segid: string const &\n"
		"    var: enum Varnr\n"
		"    bc: tasystem::var const &\n"
		"\n"
		"new_MechBc(MechBc arg2, TaSystem arg3) -> MechBc\n"
		"\n"
		"Parameters:\n"
		"    arg1: mech::MechBc const &\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_MechBc", _wrap_delete_MechBc, METH_VARARGS, (char *)"\n"
		"delete_MechBc(MechBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc *\n"
		"\n"
		""},
	 { (char *)"MechBc_error", _wrap_MechBc_error, METH_VARARGS, (char *)"\n"
		"MechBc_error(MechBc self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc const *\n"
		"\n"
		""},
	 { (char *)"MechBc_jac", _wrap_MechBc_jac, METH_VARARGS, (char *)"\n"
		"MechBc_jac(MechBc self, tasystem::Jacobian & arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc const *\n"
		"    arg2: tasystem::Jacobian &\n"
		"\n"
		""},
	 { (char *)"MechBc_copy", _wrap_MechBc_copy, METH_VARARGS, (char *)"\n"
		"MechBc_copy(MechBc self, TaSystem s) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"MechBc_setEqNrs", _wrap_MechBc_setEqNrs, METH_VARARGS, (char *)"\n"
		"MechBc_setEqNrs(MechBc self, us firsteqnr)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc *\n"
		"    firsteqnr: us\n"
		"\n"
		""},
	 { (char *)"MechBc_getNEqs", _wrap_MechBc_getNEqs, METH_VARARGS, (char *)"\n"
		"MechBc_getNEqs(MechBc self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc const *\n"
		"\n"
		""},
	 { (char *)"MechBc_show", _wrap_MechBc_show, METH_VARARGS, (char *)"\n"
		"MechBc_show(MechBc self, us arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc const *\n"
		"    arg2: us\n"
		"\n"
		""},
	 { (char *)"MechBc_updateNf", _wrap_MechBc_updateNf, METH_VARARGS, (char *)"\n"
		"MechBc_updateNf(MechBc self)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::MechBc *\n"
		"\n"
		""},
	 { (char *)"MechBc_swigregister", MechBc_swigregister, METH_VARARGS, NULL},
	 { (char *)"Seg_copy", _wrap_Seg_copy, METH_VARARGS, (char *)"\n"
		"Seg_copy(Seg self, TaSystem arg3) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: segment::Seg const *\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_Seg", _wrap_delete_Seg, METH_VARARGS, (char *)"\n"
		"delete_Seg(Seg self)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::Seg *\n"
		"\n"
		""},
	 { (char *)"Seg_setPhaseContraint", _wrap_Seg_setPhaseContraint, METH_VARARGS, (char *)"\n"
		"Seg_setPhaseContraint(Seg self, PhaseConstraint arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: segment::Seg *\n"
		"    arg2: tasystem::PhaseConstraint\n"
		"\n"
		""},
	 { (char *)"Seg_swigregister", Seg_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PistonConfiguration", _wrap_new_PistonConfiguration, METH_VARARGS, (char *)"\n"
		"PistonConfiguration(d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm, d Stl=-1, d Str=-1)\n"
		"\n"
		"Parameters:\n"
		"    Sl: d\n"
		"    Sr: d\n"
		"    V0l: d\n"
		"    V0r: d\n"
		"    M: d\n"
		"    Km: d\n"
		"    Cm: d\n"
		"    Stl: d\n"
		"    Str: d\n"
		"\n"
		"PistonConfiguration(d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm, d Stl=-1)\n"
		"\n"
		"Parameters:\n"
		"    Sl: d\n"
		"    Sr: d\n"
		"    V0l: d\n"
		"    V0r: d\n"
		"    M: d\n"
		"    Km: d\n"
		"    Cm: d\n"
		"    Stl: d\n"
		"\n"
		"new_PistonConfiguration(d Sl, d Sr, d V0l, d V0r, d M, d Km, d Cm) -> PistonConfiguration\n"
		"\n"
		"Parameters:\n"
		"    Sl: d\n"
		"    Sr: d\n"
		"    V0l: d\n"
		"    V0r: d\n"
		"    M: d\n"
		"    Km: d\n"
		"    Cm: d\n"
		"\n"
		""},
	 { (char *)"delete_PistonConfiguration", _wrap_delete_PistonConfiguration, METH_VARARGS, (char *)"\n"
		"delete_PistonConfiguration(PistonConfiguration self)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_M_set", _wrap_PistonConfiguration_M_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_M_set(PistonConfiguration self, d M)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    M: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_M_get", _wrap_PistonConfiguration_M_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_M_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Sr_set", _wrap_PistonConfiguration_Sr_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Sr_set(PistonConfiguration self, d Sr)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Sr: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Sr_get", _wrap_PistonConfiguration_Sr_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Sr_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Sl_set", _wrap_PistonConfiguration_Sl_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Sl_set(PistonConfiguration self, d Sl)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Sl: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Sl_get", _wrap_PistonConfiguration_Sl_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Sl_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Km_set", _wrap_PistonConfiguration_Km_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Km_set(PistonConfiguration self, d Km)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Km: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Km_get", _wrap_PistonConfiguration_Km_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Km_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Cm_set", _wrap_PistonConfiguration_Cm_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Cm_set(PistonConfiguration self, d Cm)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Cm: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Cm_get", _wrap_PistonConfiguration_Cm_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Cm_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_V0l_set", _wrap_PistonConfiguration_V0l_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_V0l_set(PistonConfiguration self, d V0l)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    V0l: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_V0l_get", _wrap_PistonConfiguration_V0l_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_V0l_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_V0r_set", _wrap_PistonConfiguration_V0r_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_V0r_set(PistonConfiguration self, d V0r)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    V0r: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_V0r_get", _wrap_PistonConfiguration_V0r_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_V0r_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Stl_set", _wrap_PistonConfiguration_Stl_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Stl_set(PistonConfiguration self, d Stl)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Stl: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Stl_get", _wrap_PistonConfiguration_Stl_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Stl_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Str_set", _wrap_PistonConfiguration_Str_set, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Str_set(PistonConfiguration self, d Str)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"    Str: d\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_Str_get", _wrap_PistonConfiguration_Str_get, METH_VARARGS, (char *)"\n"
		"PistonConfiguration_Str_get(PistonConfiguration self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::PistonConfiguration *\n"
		"\n"
		""},
	 { (char *)"PistonConfiguration_swigregister", PistonConfiguration_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Piston", _wrap_new_Piston, METH_VARARGS, (char *)"\n"
		"new_Piston(PistonConfiguration pc) -> Piston\n"
		"\n"
		"Parameters:\n"
		"    pc: mech::PistonConfiguration const &\n"
		"\n"
		""},
	 { (char *)"delete_Piston", _wrap_delete_Piston, METH_VARARGS, (char *)"\n"
		"delete_Piston(Piston self)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston *\n"
		"\n"
		""},
	 { (char *)"Piston_copy", _wrap_Piston_copy, METH_VARARGS, (char *)"\n"
		"Piston_copy(Piston self, TaSystem s) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"Piston_setT0", _wrap_Piston_setT0, METH_VARARGS, (char *)"\n"
		"Piston_setT0(Piston self, d T01)\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston *\n"
		"    T01: d\n"
		"\n"
		""},
	 { (char *)"Piston_getT0", _wrap_Piston_getT0, METH_VARARGS, (char *)"\n"
		"Piston_getT0(Piston self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_getPc", _wrap_Piston_getPc, METH_VARARGS, (char *)"\n"
		"Piston_getPc(Piston self) -> PistonConfiguration\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_Fpiston", _wrap_Piston_Fpiston, METH_VARARGS, (char *)"\n"
		"Piston_Fpiston(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_xpiston", _wrap_Piston_xpiston, METH_VARARGS, (char *)"\n"
		"Piston_xpiston(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_upiston", _wrap_Piston_upiston, METH_VARARGS, (char *)"\n"
		"Piston_upiston(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_pl", _wrap_Piston_pl, METH_VARARGS, (char *)"\n"
		"Piston_pl(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_pr", _wrap_Piston_pr, METH_VARARGS, (char *)"\n"
		"Piston_pr(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_p", _wrap_Piston_p, METH_VARARGS, (char *)"\n"
		"Piston_p(Piston self, mech::Pos p) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"    p: enum mech::Pos\n"
		"\n"
		""},
	 { (char *)"Piston_m", _wrap_Piston_m, METH_VARARGS, (char *)"\n"
		"Piston_m(Piston self, mech::Pos p) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"    p: enum mech::Pos\n"
		"\n"
		""},
	 { (char *)"Piston_T", _wrap_Piston_T, METH_VARARGS, (char *)"\n"
		"Piston_T(Piston self, mech::Pos p) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"    p: enum mech::Pos\n"
		"\n"
		""},
	 { (char *)"Piston_mH", _wrap_Piston_mH, METH_VARARGS, (char *)"\n"
		"Piston_mH(Piston self, mech::Pos p) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"    p: enum mech::Pos\n"
		"\n"
		""},
	 { (char *)"Piston_rhol", _wrap_Piston_rhol, METH_VARARGS, (char *)"\n"
		"Piston_rhol(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_rhor", _wrap_Piston_rhor, METH_VARARGS, (char *)"\n"
		"Piston_rhor(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_Tl", _wrap_Piston_Tl, METH_VARARGS, (char *)"\n"
		"Piston_Tl(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_Tr", _wrap_Piston_Tr, METH_VARARGS, (char *)"\n"
		"Piston_Tr(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_Vl", _wrap_Piston_Vl, METH_VARARGS, (char *)"\n"
		"Piston_Vl(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_Vr", _wrap_Piston_Vr, METH_VARARGS, (char *)"\n"
		"Piston_Vr(Piston self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_error", _wrap_Piston_error, METH_VARARGS, (char *)"\n"
		"Piston_error(Piston self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: mech::Piston const *\n"
		"\n"
		""},
	 { (char *)"Piston_swigregister", Piston_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConnectorVolume", _wrap_new_ConnectorVolume, METH_VARARGS, (char *)"\n"
		"new_ConnectorVolume(d volume) -> ConnectorVolume\n"
		"\n"
		"Parameters:\n"
		"    volume: d\n"
		"\n"
		""},
	 { (char *)"delete_ConnectorVolume", _wrap_delete_ConnectorVolume, METH_VARARGS, (char *)"\n"
		"delete_ConnectorVolume(ConnectorVolume self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume *\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_copy", _wrap_ConnectorVolume_copy, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_copy(ConnectorVolume self, TaSystem s) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_p", _wrap_ConnectorVolume_p, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_p(ConnectorVolume self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume const *\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_rho", _wrap_ConnectorVolume_rho, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_rho(ConnectorVolume self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume const *\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_T", _wrap_ConnectorVolume_T, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_T(ConnectorVolume self) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume const *\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_addDuct", _wrap_ConnectorVolume_addDuct, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_addDuct(ConnectorVolume self, string const & segid, duct::Pos position)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume *\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_addPiston", _wrap_ConnectorVolume_addPiston, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_addPiston(ConnectorVolume self, string const & segid, duct::Pos position)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume *\n"
		"    segid: string const &\n"
		"    position: enum duct::Pos\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_error", _wrap_ConnectorVolume_error, METH_VARARGS, (char *)"\n"
		"ConnectorVolume_error(ConnectorVolume self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConnectorVolume const *\n"
		"\n"
		""},
	 { (char *)"ConnectorVolume_swigregister", ConnectorVolume_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Grid", _wrap_new_Grid, METH_VARARGS, (char *)"\n"
		"Grid(us gp, d L)\n"
		"\n"
		"Parameters:\n"
		"    gp: us\n"
		"    L: d\n"
		"\n"
		"new_Grid(Grid g) -> Grid\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"\n"
		""},
	 { (char *)"delete_Grid", _wrap_delete_Grid, METH_VARARGS, (char *)"\n"
		"delete_Grid(Grid self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid *\n"
		"\n"
		""},
	 { (char *)"Grid_setLeftBl", _wrap_Grid_setLeftBl, METH_VARARGS, (char *)"\n"
		"Grid_setLeftBl(Grid self, BoundaryLayer blleft)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid *\n"
		"    blleft: duct::BoundaryLayer const &\n"
		"\n"
		""},
	 { (char *)"Grid_setRightBl", _wrap_Grid_setRightBl, METH_VARARGS, (char *)"\n"
		"Grid_setRightBl(Grid self, BoundaryLayer blright)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid *\n"
		"    blright: duct::BoundaryLayer const &\n"
		"\n"
		""},
	 { (char *)"Grid_isLeftBl", _wrap_Grid_isLeftBl, METH_VARARGS, (char *)"\n"
		"Grid_isLeftBl(Grid self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid const *\n"
		"\n"
		""},
	 { (char *)"Grid_isRightBl", _wrap_Grid_isRightBl, METH_VARARGS, (char *)"\n"
		"Grid_isRightBl(Grid self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid const *\n"
		"\n"
		""},
	 { (char *)"Grid_getL", _wrap_Grid_getL, METH_VARARGS, (char *)"\n"
		"Grid_getL(Grid self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid const *\n"
		"\n"
		""},
	 { (char *)"Grid_getx", _wrap_Grid_getx, METH_VARARGS, (char *)"\n"
		"Grid_getx(Grid self) -> vd const &\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid const *\n"
		"\n"
		""},
	 { (char *)"Grid_getgp", _wrap_Grid_getgp, METH_VARARGS, (char *)"\n"
		"Grid_getgp(Grid self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Grid const *\n"
		"\n"
		""},
	 { (char *)"Grid_swigregister", Grid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoundaryLayer", _wrap_new_BoundaryLayer, METH_VARARGS, (char *)"\n"
		"BoundaryLayer(d dxb, d L, d alpha)\n"
		"\n"
		"Parameters:\n"
		"    dxb: d\n"
		"    L: d\n"
		"    alpha: d\n"
		"\n"
		"new_BoundaryLayer(d dxb, d L, us n) -> BoundaryLayer\n"
		"\n"
		"Parameters:\n"
		"    dxb: d\n"
		"    L: d\n"
		"    n: us\n"
		"\n"
		""},
	 { (char *)"BoundaryLayer_copy", _wrap_BoundaryLayer_copy, METH_VARARGS, (char *)"\n"
		"BoundaryLayer_copy(BoundaryLayer self) -> BoundaryLayer\n"
		"\n"
		"Parameters:\n"
		"    self: duct::BoundaryLayer const *\n"
		"\n"
		""},
	 { (char *)"delete_BoundaryLayer", _wrap_delete_BoundaryLayer, METH_VARARGS, (char *)"\n"
		"delete_BoundaryLayer(BoundaryLayer self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::BoundaryLayer *\n"
		"\n"
		""},
	 { (char *)"BoundaryLayer_swigregister", BoundaryLayer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AutoBoundaryLayer", _wrap_new_AutoBoundaryLayer, METH_VARARGS, (char *)"\n"
		"new_AutoBoundaryLayer(d dxb, d alpha, Grid g) -> AutoBoundaryLayer\n"
		"\n"
		"Parameters:\n"
		"    dxb: d\n"
		"    alpha: d\n"
		"    g: duct::Grid const &\n"
		"\n"
		""},
	 { (char *)"AutoBoundaryLayer_copy", _wrap_AutoBoundaryLayer_copy, METH_VARARGS, (char *)"\n"
		"AutoBoundaryLayer_copy(AutoBoundaryLayer self) -> BoundaryLayer\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AutoBoundaryLayer const *\n"
		"\n"
		""},
	 { (char *)"delete_AutoBoundaryLayer", _wrap_delete_AutoBoundaryLayer, METH_VARARGS, (char *)"\n"
		"delete_AutoBoundaryLayer(AutoBoundaryLayer self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::AutoBoundaryLayer *\n"
		"\n"
		""},
	 { (char *)"AutoBoundaryLayer_swigregister", AutoBoundaryLayer_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Geom", _wrap_delete_Geom, METH_VARARGS, (char *)"\n"
		"delete_Geom(Geom self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom *\n"
		"\n"
		""},
	 { (char *)"Geom_grid", _wrap_Geom_grid, METH_VARARGS, (char *)"\n"
		"Geom_grid(Geom self) -> Grid\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_show", _wrap_Geom_show, METH_VARARGS, (char *)"\n"
		"Geom_show(Geom self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_S", _wrap_Geom_S, METH_VARARGS, (char *)"\n"
		"Geom_S(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_phi", _wrap_Geom_phi, METH_VARARGS, (char *)"\n"
		"Geom_phi(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_rh", _wrap_Geom_rh, METH_VARARGS, (char *)"\n"
		"Geom_rh(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_copy", _wrap_Geom_copy, METH_VARARGS, (char *)"\n"
		"Geom_copy(Geom self) -> Geom\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_shape", _wrap_Geom_shape, METH_VARARGS, (char *)"\n"
		"Geom_shape(Geom self) -> string\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_setPrismatic", _wrap_Geom_setPrismatic, METH_VARARGS, (char *)"\n"
		"Geom_setPrismatic(Geom self, bool isprismatic)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom *\n"
		"    isprismatic: bool\n"
		"\n"
		""},
	 { (char *)"Geom_isPrismatic", _wrap_Geom_isPrismatic, METH_VARARGS, (char *)"\n"
		"Geom_isPrismatic(Geom self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_setBlApprox", _wrap_Geom_setBlApprox, METH_VARARGS, (char *)"\n"
		"Geom_setBlApprox(Geom self, bool b)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom *\n"
		"    b: bool\n"
		"\n"
		""},
	 { (char *)"Geom_isBlApprox", _wrap_Geom_isBlApprox, METH_VARARGS, (char *)"\n"
		"Geom_isBlApprox(Geom self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_nCells", _wrap_Geom_nCells, METH_VARARGS, (char *)"\n"
		"Geom_nCells(Geom self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_x", _wrap_Geom_x, METH_VARARGS, (char *)"\n"
		"x() -> vd const\n"
		"Geom_x(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_L", _wrap_Geom_L, METH_VARARGS, (char *)"\n"
		"Geom_L(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_gp", _wrap_Geom_gp, METH_VARARGS, (char *)"\n"
		"Geom_gp(Geom self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_Sleft", _wrap_Geom_Sleft, METH_VARARGS, (char *)"\n"
		"Geom_Sleft(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_Sright", _wrap_Geom_Sright, METH_VARARGS, (char *)"\n"
		"Geom_Sright(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_phileft", _wrap_Geom_phileft, METH_VARARGS, (char *)"\n"
		"Geom_phileft(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_phiright", _wrap_Geom_phiright, METH_VARARGS, (char *)"\n"
		"Geom_phiright(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_rhleft", _wrap_Geom_rhleft, METH_VARARGS, (char *)"\n"
		"Geom_rhleft(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_rhright", _wrap_Geom_rhright, METH_VARARGS, (char *)"\n"
		"Geom_rhright(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_vx", _wrap_Geom_vx, METH_VARARGS, (char *)"\n"
		"Geom_vx(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vSf_vec", _wrap_Geom_vSf_vec, METH_VARARGS, (char *)"\n"
		"Geom_vSf_vec(Geom self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_vS_vec", _wrap_Geom_vS_vec, METH_VARARGS, (char *)"\n"
		"Geom_vS_vec(Geom self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_vphi_vec", _wrap_Geom_vphi_vec, METH_VARARGS, (char *)"\n"
		"Geom_vphi_vec(Geom self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_vrh_vec", _wrap_Geom_vrh_vec, METH_VARARGS, (char *)"\n"
		"Geom_vrh_vec(Geom self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_vx_vec", _wrap_Geom_vx_vec, METH_VARARGS, (char *)"\n"
		"Geom_vx_vec(Geom self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_Sf", _wrap_Geom_Sf, METH_VARARGS, (char *)"\n"
		"Geom_Sf(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_Ss", _wrap_Geom_Ss, METH_VARARGS, (char *)"\n"
		"Geom_Ss(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vS", _wrap_Geom_vS, METH_VARARGS, (char *)"\n"
		"Geom_vS(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vSf", _wrap_Geom_vSf, METH_VARARGS, (char *)"\n"
		"Geom_vSf(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vSs", _wrap_Geom_vSs, METH_VARARGS, (char *)"\n"
		"Geom_vSs(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vVf", _wrap_Geom_vVf, METH_VARARGS, (char *)"\n"
		"Geom_vVf(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vVs", _wrap_Geom_vVs, METH_VARARGS, (char *)"\n"
		"Geom_vVs(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vphi", _wrap_Geom_vphi, METH_VARARGS, (char *)"\n"
		"Geom_vphi(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_vrh", _wrap_Geom_vrh, METH_VARARGS, (char *)"\n"
		"Geom_vrh(Geom self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Geom_getFluidVolume", _wrap_Geom_getFluidVolume, METH_VARARGS, (char *)"\n"
		"Geom_getFluidVolume(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_getSolidVolume", _wrap_Geom_getSolidVolume, METH_VARARGS, (char *)"\n"
		"Geom_getSolidVolume(Geom self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Geom const *\n"
		"\n"
		""},
	 { (char *)"Geom_swigregister", Geom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConeTube", _wrap_new_ConeTube, METH_VARARGS, (char *)"\n"
		"ConeTube(Grid g, d r1, d r2, bool blapprox=True)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    r1: d\n"
		"    r2: d\n"
		"    blapprox: bool\n"
		"\n"
		"ConeTube(Grid g, d r1, d r2)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    r1: d\n"
		"    r2: d\n"
		"\n"
		"new_ConeTube(ConeTube t) -> ConeTube\n"
		"\n"
		"Parameters:\n"
		"    t: duct::ConeTube const &\n"
		"\n"
		""},
	 { (char *)"ConeTube_S", _wrap_ConeTube_S, METH_VARARGS, (char *)"\n"
		"ConeTube_S(ConeTube self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"ConeTube_phi", _wrap_ConeTube_phi, METH_VARARGS, (char *)"\n"
		"ConeTube_phi(ConeTube self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"ConeTube_rh", _wrap_ConeTube_rh, METH_VARARGS, (char *)"\n"
		"ConeTube_rh(ConeTube self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"ConeTube_shape", _wrap_ConeTube_shape, METH_VARARGS, (char *)"\n"
		"ConeTube_shape(ConeTube self) -> string\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"\n"
		""},
	 { (char *)"ConeTube_copy", _wrap_ConeTube_copy, METH_VARARGS, (char *)"\n"
		"ConeTube_copy(ConeTube self) -> Geom\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"\n"
		""},
	 { (char *)"ConeTube_show", _wrap_ConeTube_show, METH_VARARGS, (char *)"\n"
		"ConeTube_show(ConeTube self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube const *\n"
		"\n"
		""},
	 { (char *)"delete_ConeTube", _wrap_delete_ConeTube, METH_VARARGS, (char *)"\n"
		"delete_ConeTube(ConeTube self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::ConeTube *\n"
		"\n"
		""},
	 { (char *)"ConeTube_swigregister", ConeTube_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CylindricalTube", _wrap_new_CylindricalTube, METH_VARARGS, (char *)"\n"
		"CylindricalTube(Grid g, d r, bool blapprox=True)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    r: d\n"
		"    blapprox: bool\n"
		"\n"
		"CylindricalTube(Grid g, d r)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    r: d\n"
		"\n"
		"new_CylindricalTube(CylindricalTube t) -> CylindricalTube\n"
		"\n"
		"Parameters:\n"
		"    t: duct::CylindricalTube const &\n"
		"\n"
		""},
	 { (char *)"CylindricalTube_copy", _wrap_CylindricalTube_copy, METH_VARARGS, (char *)"\n"
		"CylindricalTube_copy(CylindricalTube self) -> Geom\n"
		"\n"
		"Parameters:\n"
		"    self: duct::CylindricalTube const *\n"
		"\n"
		""},
	 { (char *)"CylindricalTube_show", _wrap_CylindricalTube_show, METH_VARARGS, (char *)"\n"
		"CylindricalTube_show(CylindricalTube self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::CylindricalTube const *\n"
		"\n"
		""},
	 { (char *)"delete_CylindricalTube", _wrap_delete_CylindricalTube, METH_VARARGS, (char *)"\n"
		"delete_CylindricalTube(CylindricalTube self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::CylindricalTube *\n"
		"\n"
		""},
	 { (char *)"CylindricalTube_swigregister", CylindricalTube_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VertPlates", _wrap_new_VertPlates, METH_VARARGS, (char *)"\n"
		"VertPlates(Grid g, d S, d phi, d y0, bool blapprox=False)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    S: d\n"
		"    phi: d\n"
		"    y0: d\n"
		"    blapprox: bool\n"
		"\n"
		"VertPlates(Grid g, d S, d phi, d y0)\n"
		"\n"
		"Parameters:\n"
		"    g: duct::Grid const &\n"
		"    S: d\n"
		"    phi: d\n"
		"    y0: d\n"
		"\n"
		"new_VertPlates(VertPlates t) -> VertPlates\n"
		"\n"
		"Parameters:\n"
		"    t: duct::VertPlates const &\n"
		"\n"
		""},
	 { (char *)"VertPlates_copy", _wrap_VertPlates_copy, METH_VARARGS, (char *)"\n"
		"VertPlates_copy(VertPlates self) -> Geom\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"\n"
		""},
	 { (char *)"VertPlates_show", _wrap_VertPlates_show, METH_VARARGS, (char *)"\n"
		"VertPlates_show(VertPlates self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"\n"
		""},
	 { (char *)"VertPlates_shape", _wrap_VertPlates_shape, METH_VARARGS, (char *)"\n"
		"VertPlates_shape(VertPlates self) -> string\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"\n"
		""},
	 { (char *)"VertPlates_S", _wrap_VertPlates_S, METH_VARARGS, (char *)"\n"
		"VertPlates_S(VertPlates self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"VertPlates_phi", _wrap_VertPlates_phi, METH_VARARGS, (char *)"\n"
		"VertPlates_phi(VertPlates self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"VertPlates_rh", _wrap_VertPlates_rh, METH_VARARGS, (char *)"\n"
		"VertPlates_rh(VertPlates self, us i) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates const *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"delete_VertPlates", _wrap_delete_VertPlates, METH_VARARGS, (char *)"\n"
		"delete_VertPlates(VertPlates self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::VertPlates *\n"
		"\n"
		""},
	 { (char *)"VertPlates_swigregister", VertPlates_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cell_gc_set", _wrap_Cell_gc_set, METH_VARARGS, (char *)"\n"
		"Cell_gc_set(Cell self, Globalconf gc)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    gc: tasystem::Globalconf const *\n"
		"\n"
		""},
	 { (char *)"Cell_gc_get", _wrap_Cell_gc_get, METH_VARARGS, (char *)"\n"
		"Cell_gc_get(Cell self) -> Globalconf\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_i_set", _wrap_Cell_i_set, METH_VARARGS, (char *)"\n"
		"Cell_i_set(Cell self, us i)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    i: us\n"
		"\n"
		""},
	 { (char *)"Cell_i_get", _wrap_Cell_i_get, METH_VARARGS, (char *)"\n"
		"Cell_i_get(Cell self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vx_set", _wrap_Cell_vx_set, METH_VARARGS, (char *)"\n"
		"Cell_vx_set(Cell self, d vx)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vx: d\n"
		"\n"
		""},
	 { (char *)"Cell_vx_get", _wrap_Cell_vx_get, METH_VARARGS, (char *)"\n"
		"Cell_vx_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_xl_set", _wrap_Cell_xl_set, METH_VARARGS, (char *)"\n"
		"Cell_xl_set(Cell self, d xl)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    xl: d\n"
		"\n"
		""},
	 { (char *)"Cell_xl_get", _wrap_Cell_xl_get, METH_VARARGS, (char *)"\n"
		"Cell_xl_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_xr_set", _wrap_Cell_xr_set, METH_VARARGS, (char *)"\n"
		"Cell_xr_set(Cell self, d xr)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    xr: d\n"
		"\n"
		""},
	 { (char *)"Cell_xr_get", _wrap_Cell_xr_get, METH_VARARGS, (char *)"\n"
		"Cell_xr_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vSf_set", _wrap_Cell_vSf_set, METH_VARARGS, (char *)"\n"
		"Cell_vSf_set(Cell self, d vSf)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vSf: d\n"
		"\n"
		""},
	 { (char *)"Cell_vSf_get", _wrap_Cell_vSf_get, METH_VARARGS, (char *)"\n"
		"Cell_vSf_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vSs_set", _wrap_Cell_vSs_set, METH_VARARGS, (char *)"\n"
		"Cell_vSs_set(Cell self, d vSs)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vSs: d\n"
		"\n"
		""},
	 { (char *)"Cell_vSs_get", _wrap_Cell_vSs_get, METH_VARARGS, (char *)"\n"
		"Cell_vSs_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vVf_set", _wrap_Cell_vVf_set, METH_VARARGS, (char *)"\n"
		"Cell_vVf_set(Cell self, d vVf)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vVf: d\n"
		"\n"
		""},
	 { (char *)"Cell_vVf_get", _wrap_Cell_vVf_get, METH_VARARGS, (char *)"\n"
		"Cell_vVf_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vVs_set", _wrap_Cell_vVs_set, METH_VARARGS, (char *)"\n"
		"Cell_vVs_set(Cell self, d vVs)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vVs: d\n"
		"\n"
		""},
	 { (char *)"Cell_vVs_get", _wrap_Cell_vVs_get, METH_VARARGS, (char *)"\n"
		"Cell_vVs_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_Sfl_set", _wrap_Cell_Sfl_set, METH_VARARGS, (char *)"\n"
		"Cell_Sfl_set(Cell self, d Sfl)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    Sfl: d\n"
		"\n"
		""},
	 { (char *)"Cell_Sfl_get", _wrap_Cell_Sfl_get, METH_VARARGS, (char *)"\n"
		"Cell_Sfl_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_Sfr_set", _wrap_Cell_Sfr_set, METH_VARARGS, (char *)"\n"
		"Cell_Sfr_set(Cell self, d Sfr)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    Sfr: d\n"
		"\n"
		""},
	 { (char *)"Cell_Sfr_get", _wrap_Cell_Sfr_get, METH_VARARGS, (char *)"\n"
		"Cell_Sfr_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_Ssl_set", _wrap_Cell_Ssl_set, METH_VARARGS, (char *)"\n"
		"Cell_Ssl_set(Cell self, d Ssl)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    Ssl: d\n"
		"\n"
		""},
	 { (char *)"Cell_Ssl_get", _wrap_Cell_Ssl_get, METH_VARARGS, (char *)"\n"
		"Cell_Ssl_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_Ssr_set", _wrap_Cell_Ssr_set, METH_VARARGS, (char *)"\n"
		"Cell_Ssr_set(Cell self, d Ssr)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    Ssr: d\n"
		"\n"
		""},
	 { (char *)"Cell_Ssr_get", _wrap_Cell_Ssr_get, METH_VARARGS, (char *)"\n"
		"Cell_Ssr_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_vrh_set", _wrap_Cell_vrh_set, METH_VARARGS, (char *)"\n"
		"Cell_vrh_set(Cell self, d vrh)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    vrh: d\n"
		"\n"
		""},
	 { (char *)"Cell_vrh_get", _wrap_Cell_vrh_get, METH_VARARGS, (char *)"\n"
		"Cell_vrh_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_rhl_set", _wrap_Cell_rhl_set, METH_VARARGS, (char *)"\n"
		"Cell_rhl_set(Cell self, d rhl)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    rhl: d\n"
		"\n"
		""},
	 { (char *)"Cell_rhl_get", _wrap_Cell_rhl_get, METH_VARARGS, (char *)"\n"
		"Cell_rhl_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_rhr_set", _wrap_Cell_rhr_set, METH_VARARGS, (char *)"\n"
		"Cell_rhr_set(Cell self, d rhr)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"    rhr: d\n"
		"\n"
		""},
	 { (char *)"Cell_rhr_get", _wrap_Cell_rhr_get, METH_VARARGS, (char *)"\n"
		"Cell_rhr_get(Cell self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_getValue", _wrap_Cell_getValue, METH_VARARGS, (char *)"\n"
		"Cell_getValue(Cell self, Varnr arg3) -> var\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell const *\n"
		"    arg2: enum Varnr\n"
		"\n"
		""},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, (char *)"\n"
		"delete_Cell(Cell self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Cell *\n"
		"\n"
		""},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Duct", _wrap_delete_Duct, METH_VARARGS, (char *)"\n"
		"delete_Duct(Duct self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct *\n"
		"\n"
		""},
	 { (char *)"Duct_init", _wrap_Duct_init, METH_VARARGS, (char *)"\n"
		"Duct_init(Duct self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct *\n"
		"\n"
		""},
	 { (char *)"Duct_setVarsEqs", _wrap_Duct_setVarsEqs, METH_VARARGS, (char *)"\n"
		"Duct_setVarsEqs(Duct self, Cell arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    arg2: duct::Cell &\n"
		"\n"
		""},
	 { (char *)"Duct_geom", _wrap_Duct_geom, METH_VARARGS, (char *)"\n"
		"Duct_geom(Duct self) -> Geom\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_setResVar", _wrap_Duct_setResVar, METH_VARARGS, (char *)"\n"
		"setResVar(Varnr arg2, us i, us freqnr, d value)\n"
		"\n"
		"Parameters:\n"
		"    arg2: enum Varnr\n"
		"    i: us\n"
		"    freqnr: us\n"
		"    value: d\n"
		"\n"
		"Duct_setResVar(Duct self, Varnr arg3, us freqnr, vd const & value)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct *\n"
		"    arg2: enum Varnr\n"
		"    freqnr: us\n"
		"    value: vd const &\n"
		"\n"
		""},
	 { (char *)"Duct_setPhaseContraint", _wrap_Duct_setPhaseContraint, METH_VARARGS, (char *)"\n"
		"Duct_setPhaseContraint(Duct self, PhaseConstraint v)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct *\n"
		"    v: tasystem::PhaseConstraint\n"
		"\n"
		""},
	 { (char *)"Duct_getx", _wrap_Duct_getx, METH_VARARGS, (char *)"\n"
		"Duct_getx(Duct self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_getValue", _wrap_Duct_getValue, METH_VARARGS, (char *)"\n"
		"Duct_getValue(Duct self, Varnr arg3, us freqnr) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    arg2: enum Varnr\n"
		"    freqnr: us\n"
		"\n"
		""},
	 { (char *)"Duct_getValueT", _wrap_Duct_getValueT, METH_VARARGS, (char *)"\n"
		"Duct_getValueT(Duct self, Varnr arg3, d timeinst) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    arg2: enum Varnr\n"
		"    timeinst: d\n"
		"\n"
		""},
	 { (char *)"Duct_getValueC", _wrap_Duct_getValueC, METH_VARARGS, (char *)"\n"
		"Duct_getValueC(Duct self, Varnr arg3, us freqnr) -> vc\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    arg2: enum Varnr\n"
		"    freqnr: us\n"
		"\n"
		""},
	 { (char *)"Duct_getErrorAt", _wrap_Duct_getErrorAt, METH_VARARGS, (char *)"\n"
		"Duct_getErrorAt(Duct self, us eqnr, us freqnr) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    eqnr: us\n"
		"    freqnr: us\n"
		"\n"
		""},
	 { (char *)"Duct_getNCells", _wrap_Duct_getNCells, METH_VARARGS, (char *)"\n"
		"Duct_getNCells(Duct self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct___repr__", _wrap_Duct___repr__, METH_VARARGS, (char *)"\n"
		"Duct___repr__(Duct self) -> char const *\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_providePhaseDof", _wrap_Duct_providePhaseDof, METH_VARARGS, (char *)"\n"
		"Duct_providePhaseDof(Duct self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_phaseDofValue", _wrap_Duct_phaseDofValue, METH_VARARGS, (char *)"\n"
		"Duct_phaseDofValue(Duct self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_error", _wrap_Duct_error, METH_VARARGS, (char *)"\n"
		"Duct_error(Duct self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"\n"
		""},
	 { (char *)"Duct_getCell", _wrap_Duct_getCell, METH_VARARGS, (char *)"\n"
		"Duct_getCell(Duct self, int i) -> Cell\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Duct const *\n"
		"    i: int\n"
		"\n"
		""},
	 { (char *)"Duct_swigregister", Duct_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IsentropicTube", _wrap_new_IsentropicTube, METH_VARARGS, (char *)"\n"
		"new_IsentropicTube(Geom geom) -> IsentropicTube\n"
		"\n"
		"Parameters:\n"
		"    geom: duct::Geom const &\n"
		"\n"
		""},
	 { (char *)"IsentropicTube_copy", _wrap_IsentropicTube_copy, METH_VARARGS, (char *)"\n"
		"IsentropicTube_copy(IsentropicTube self, TaSystem arg3) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsentropicTube const *\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_IsentropicTube", _wrap_delete_IsentropicTube, METH_VARARGS, (char *)"\n"
		"delete_IsentropicTube(IsentropicTube self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsentropicTube *\n"
		"\n"
		""},
	 { (char *)"IsentropicTube_setVarsEqs", _wrap_IsentropicTube_setVarsEqs, METH_VARARGS, (char *)"\n"
		"IsentropicTube_setVarsEqs(IsentropicTube self, Cell arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::IsentropicTube const *\n"
		"    arg2: duct::Cell &\n"
		"\n"
		""},
	 { (char *)"IsentropicTube_swigregister", IsentropicTube_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DuctWithSolid", _wrap_delete_DuctWithSolid, METH_VARARGS, (char *)"\n"
		"delete_DuctWithSolid(DuctWithSolid self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctWithSolid *\n"
		"\n"
		""},
	 { (char *)"DuctWithSolid_hasSolid", _wrap_DuctWithSolid_hasSolid, METH_VARARGS, (char *)"\n"
		"DuctWithSolid_hasSolid(DuctWithSolid self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctWithSolid const *\n"
		"\n"
		""},
	 { (char *)"DuctWithSolid_getSolid", _wrap_DuctWithSolid_getSolid, METH_VARARGS, (char *)"\n"
		"DuctWithSolid_getSolid(DuctWithSolid self) -> solids::Solid const &\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctWithSolid const *\n"
		"\n"
		""},
	 { (char *)"DuctWithSolid_setQsin", _wrap_DuctWithSolid_setQsin, METH_VARARGS, (char *)"\n"
		"DuctWithSolid_setQsin(DuctWithSolid self, d Qsin)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctWithSolid *\n"
		"    Qsin: d\n"
		"\n"
		""},
	 { (char *)"DuctWithSolid_setVarsEqs", _wrap_DuctWithSolid_setVarsEqs, METH_VARARGS, (char *)"\n"
		"DuctWithSolid_setVarsEqs(DuctWithSolid self, Cell c)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::DuctWithSolid const *\n"
		"    c: duct::Cell &\n"
		"\n"
		""},
	 { (char *)"DuctWithSolid_swigregister", DuctWithSolid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LaminarDuct", _wrap_new_LaminarDuct, METH_VARARGS, (char *)"\n"
		"LaminarDuct(Geom geom, d TwL, d Twr=-1)\n"
		"\n"
		"Parameters:\n"
		"    geom: duct::Geom const &\n"
		"    TwL: d\n"
		"    Twr: d\n"
		"\n"
		"LaminarDuct(Geom geom, d TwL)\n"
		"\n"
		"Parameters:\n"
		"    geom: duct::Geom const &\n"
		"    TwL: d\n"
		"\n"
		"new_LaminarDuct(Geom geom) -> LaminarDuct\n"
		"\n"
		"Parameters:\n"
		"    geom: duct::Geom const &\n"
		"\n"
		""},
	 { (char *)"delete_LaminarDuct", _wrap_delete_LaminarDuct, METH_VARARGS, (char *)"\n"
		"delete_LaminarDuct(LaminarDuct self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::LaminarDuct *\n"
		"\n"
		""},
	 { (char *)"LaminarDuct_setInsulated", _wrap_LaminarDuct_setInsulated, METH_VARARGS, (char *)"\n"
		"LaminarDuct_setInsulated(LaminarDuct self, bool i)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::LaminarDuct *\n"
		"    i: bool\n"
		"\n"
		""},
	 { (char *)"LaminarDuct_isInsulated", _wrap_LaminarDuct_isInsulated, METH_VARARGS, (char *)"\n"
		"LaminarDuct_isInsulated(LaminarDuct self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: duct::LaminarDuct const *\n"
		"\n"
		""},
	 { (char *)"LaminarDuct_copy", _wrap_LaminarDuct_copy, METH_VARARGS, (char *)"\n"
		"LaminarDuct_copy(LaminarDuct self, TaSystem s) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: duct::LaminarDuct const *\n"
		"    s: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"LaminarDuct_swigregister", LaminarDuct_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Stack", _wrap_new_Stack, METH_VARARGS, (char *)"\n"
		"Stack(Geom geom, string const & solid)\n"
		"\n"
		"Parameters:\n"
		"    geom: duct::Geom const &\n"
		"    solid: string const &\n"
		"\n"
		"new_Stack(Stack arg2, TaSystem arg3) -> Stack\n"
		"\n"
		"Parameters:\n"
		"    arg1: duct::Stack const &\n"
		"    arg2: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"delete_Stack", _wrap_delete_Stack, METH_VARARGS, (char *)"\n"
		"delete_Stack(Stack self)\n"
		"\n"
		"Parameters:\n"
		"    self: duct::Stack *\n"
		"\n"
		""},
	 { (char *)"Stack_swigregister", Stack_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TaSystem", _wrap_new_TaSystem, METH_VARARGS, (char *)"\n"
		"TaSystem()\n"
		"new_TaSystem(Globalconf g) -> TaSystem\n"
		"\n"
		"Parameters:\n"
		"    g: tasystem::Globalconf const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_setGc", _wrap_TaSystem_setGc, METH_VARARGS, (char *)"\n"
		"TaSystem_setGc(TaSystem self, Globalconf gc)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"    gc: tasystem::Globalconf const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_setMass", _wrap_TaSystem_setMass, METH_VARARGS, (char *)"\n"
		"TaSystem_setMass(TaSystem self, d mass)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"    mass: d\n"
		"\n"
		""},
	 { (char *)"TaSystem_getMass", _wrap_TaSystem_getMass, METH_VARARGS, (char *)"\n"
		"TaSystem_getMass(TaSystem self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"delete_TaSystem", _wrap_delete_TaSystem, METH_VARARGS, (char *)"\n"
		"delete_TaSystem(TaSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_copy", _wrap_TaSystem_copy, METH_VARARGS, (char *)"\n"
		"TaSystem_copy(TaSystem self) -> TaSystem\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"TaSystem_nSegs", _wrap_TaSystem_nSegs, METH_VARARGS, (char *)"\n"
		"TaSystem_nSegs(TaSystem self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"TaSystem_nConnectors", _wrap_TaSystem_nConnectors, METH_VARARGS, (char *)"\n"
		"TaSystem_nConnectors(TaSystem self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"TaSystem___iadd__", _wrap_TaSystem___iadd__, METH_VARARGS, (char *)"\n"
		"__iadd__(Connector c) -> TaSystem\n"
		"\n"
		"Parameters:\n"
		"    c: segment::Connector const &\n"
		"\n"
		"TaSystem___iadd__(TaSystem self, Seg s) -> TaSystem\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"    s: segment::Seg const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_showJac", _wrap_TaSystem_showJac, METH_VARARGS, (char *)"\n"
		"TaSystem_showJac(TaSystem self) -> dmat\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_show", _wrap_TaSystem_show, METH_VARARGS, (char *)"\n"
		"show(us detailnr=0)\n"
		"\n"
		"Parameters:\n"
		"    detailnr: us\n"
		"\n"
		"TaSystem_show(TaSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_init", _wrap_TaSystem_init, METH_VARARGS, (char *)"\n"
		"TaSystem_init(TaSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_checkInit", _wrap_TaSystem_checkInit, METH_VARARGS, (char *)"\n"
		"TaSystem_checkInit(TaSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_Error", _wrap_TaSystem_Error, METH_VARARGS, (char *)"\n"
		"TaSystem_Error(TaSystem self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_getRes", _wrap_TaSystem_getRes, METH_VARARGS, (char *)"\n"
		"TaSystem_getRes(TaSystem self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_setRes", _wrap_TaSystem_setRes, METH_VARARGS, (char *)"\n"
		"TaSystem_setRes(TaSystem self, vd const & resvec)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"    resvec: vd const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_updateNf", _wrap_TaSystem_updateNf, METH_VARARGS, (char *)"\n"
		"TaSystem_updateNf(TaSystem self, us arg3)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"    arg2: us\n"
		"\n"
		""},
	 { (char *)"TaSystem_resetHarmonics", _wrap_TaSystem_resetHarmonics, METH_VARARGS, (char *)"\n"
		"TaSystem_resetHarmonics(TaSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"TaSystem_getDuct", _wrap_TaSystem_getDuct, METH_VARARGS, (char *)"\n"
		"TaSystem_getDuct(TaSystem self, string const & ID) -> Duct\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"    ID: string const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_getConnnectorVolume", _wrap_TaSystem_getConnnectorVolume, METH_VARARGS, (char *)"\n"
		"TaSystem_getConnnectorVolume(TaSystem self, string const & ID) -> ConnectorVolume\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"    ID: string const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_getPiston", _wrap_TaSystem_getPiston, METH_VARARGS, (char *)"\n"
		"TaSystem_getPiston(TaSystem self, string const & ID) -> Piston\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"    ID: string const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_getNDofs", _wrap_TaSystem_getNDofs, METH_VARARGS, (char *)"\n"
		"TaSystem_getNDofs(TaSystem self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"TaSystem_getNEqs", _wrap_TaSystem_getNEqs, METH_VARARGS, (char *)"\n"
		"TaSystem_getNEqs(TaSystem self) -> us\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"\n"
		""},
	 { (char *)"TaSystem_getConnector", _wrap_TaSystem_getConnector, METH_VARARGS, (char *)"\n"
		"TaSystem_getConnector(TaSystem self, string const & id) -> Connector\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"    id: string const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_getSeg", _wrap_TaSystem_getSeg, METH_VARARGS, (char *)"\n"
		"TaSystem_getSeg(TaSystem self, string const & id) -> Seg\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::TaSystem const *\n"
		"    id: string const &\n"
		"\n"
		""},
	 { (char *)"TaSystem_swigregister", TaSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EngineSystem", _wrap_new_EngineSystem, METH_VARARGS, (char *)"\n"
		"EngineSystem(Globalconf gc)\n"
		"\n"
		"Parameters:\n"
		"    gc: tasystem::Globalconf const &\n"
		"\n"
		"EngineSystem(EngineSystem arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::EngineSystem const &\n"
		"\n"
		"new_EngineSystem(TaSystem arg2) -> EngineSystem\n"
		"\n"
		"Parameters:\n"
		"    arg1: tasystem::TaSystem const &\n"
		"\n"
		""},
	 { (char *)"EngineSystem_copy", _wrap_EngineSystem_copy, METH_VARARGS, (char *)"\n"
		"EngineSystem_copy(EngineSystem self) -> TaSystem\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem const *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_Error", _wrap_EngineSystem_Error, METH_VARARGS, (char *)"\n"
		"EngineSystem_Error(EngineSystem self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_setRes", _wrap_EngineSystem_setRes, METH_VARARGS, (char *)"\n"
		"EngineSystem_setRes(EngineSystem self, vd const & res)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"    res: vd const &\n"
		"\n"
		""},
	 { (char *)"EngineSystem_getRes", _wrap_EngineSystem_getRes, METH_VARARGS, (char *)"\n"
		"EngineSystem_getRes(EngineSystem self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_init", _wrap_EngineSystem_init, METH_VARARGS, (char *)"\n"
		"EngineSystem_init(EngineSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_show", _wrap_EngineSystem_show, METH_VARARGS, (char *)"\n"
		"show(us detailnr=0)\n"
		"\n"
		"Parameters:\n"
		"    detailnr: us\n"
		"\n"
		"EngineSystem_show(EngineSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_domg", _wrap_EngineSystem_domg, METH_VARARGS, (char *)"\n"
		"EngineSystem_domg(EngineSystem self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"delete_EngineSystem", _wrap_delete_EngineSystem, METH_VARARGS, (char *)"\n"
		"delete_EngineSystem(EngineSystem self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::EngineSystem *\n"
		"\n"
		""},
	 { (char *)"EngineSystem_swigregister", EngineSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ErrorVals", _wrap_new_ErrorVals, METH_VARARGS, (char *)"\n"
		"ErrorVals(d fe, d re)\n"
		"\n"
		"Parameters:\n"
		"    fe: d\n"
		"    re: d\n"
		"\n"
		"new_ErrorVals(ErrorVals e) -> ErrorVals\n"
		"\n"
		"Parameters:\n"
		"    e: tasystem::ErrorVals const &\n"
		"\n"
		""},
	 { (char *)"ErrorVals_getFuner", _wrap_ErrorVals_getFuner, METH_VARARGS, (char *)"\n"
		"ErrorVals_getFuner(ErrorVals self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::ErrorVals const *\n"
		"\n"
		""},
	 { (char *)"ErrorVals_getReler", _wrap_ErrorVals_getReler, METH_VARARGS, (char *)"\n"
		"ErrorVals_getReler(ErrorVals self) -> d\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::ErrorVals const *\n"
		"\n"
		""},
	 { (char *)"delete_ErrorVals", _wrap_delete_ErrorVals, METH_VARARGS, (char *)"\n"
		"delete_ErrorVals(ErrorVals self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::ErrorVals *\n"
		"\n"
		""},
	 { (char *)"ErrorVals_swigregister", ErrorVals_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SolProgress", _wrap_new_SolProgress, METH_VARARGS, (char *)"new_SolProgress() -> SolProgress"},
	 { (char *)"delete_SolProgress", _wrap_delete_SolProgress, METH_VARARGS, (char *)"\n"
		"delete_SolProgress(SolProgress self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolProgress *\n"
		"\n"
		""},
	 { (char *)"SolProgress___iadd__", _wrap_SolProgress___iadd__, METH_VARARGS, (char *)"\n"
		"SolProgress___iadd__(SolProgress self, ErrorVals e) -> SolProgress\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolProgress *\n"
		"    e: tasystem::ErrorVals const &\n"
		"\n"
		""},
	 { (char *)"SolProgress_Funer", _wrap_SolProgress_Funer, METH_VARARGS, (char *)"\n"
		"SolProgress_Funer(SolProgress self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolProgress const *\n"
		"\n"
		""},
	 { (char *)"SolProgress_Reler", _wrap_SolProgress_Reler, METH_VARARGS, (char *)"\n"
		"SolProgress_Reler(SolProgress self) -> vd\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolProgress const *\n"
		"\n"
		""},
	 { (char *)"SolProgress_swigregister", SolProgress_swigregister, METH_VARARGS, NULL},
	 { (char *)"SolverConfiguration_setWait", _wrap_SolverConfiguration_setWait, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setWait(SolverConfiguration self, bool w)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    w: bool\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setMaxiter", _wrap_SolverConfiguration_setMaxiter, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setMaxiter(SolverConfiguration self, us maxiter1)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    maxiter1: us\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setFuntol", _wrap_SolverConfiguration_setFuntol, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setFuntol(SolverConfiguration self, d ft)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    ft: d\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setReltol", _wrap_SolverConfiguration_setReltol, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setReltol(SolverConfiguration self, d ft)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    ft: d\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setDampfac", _wrap_SolverConfiguration_setDampfac, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setDampfac(SolverConfiguration self, d df)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    df: d\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setMindampfac", _wrap_SolverConfiguration_setMindampfac, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setMindampfac(SolverConfiguration self, d df)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    df: d\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_setMaxdampfac", _wrap_SolverConfiguration_setMaxdampfac, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_setMaxdampfac(SolverConfiguration self, d df)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"    df: d\n"
		"\n"
		""},
	 { (char *)"new_SolverConfiguration", _wrap_new_SolverConfiguration, METH_VARARGS, (char *)"\n"
		"SolverConfiguration(SolverConfiguration o)\n"
		"\n"
		"Parameters:\n"
		"    o: tasystem::SolverConfiguration const &\n"
		"\n"
		"SolverConfiguration(bool wait1)\n"
		"\n"
		"Parameters:\n"
		"    wait1: bool\n"
		"\n"
		"SolverConfiguration(us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1, d maxdampfac=1, bool wait=True)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"    funtol: d\n"
		"    reltol: d\n"
		"    mindampfac: d\n"
		"    maxdampfac: d\n"
		"    wait: bool\n"
		"\n"
		"SolverConfiguration(us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1, d maxdampfac=1)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"    funtol: d\n"
		"    reltol: d\n"
		"    mindampfac: d\n"
		"    maxdampfac: d\n"
		"\n"
		"SolverConfiguration(us maxiter=100, d funtol=1e-6, d reltol=1e-6, d mindampfac=1)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"    funtol: d\n"
		"    reltol: d\n"
		"    mindampfac: d\n"
		"\n"
		"SolverConfiguration(us maxiter=100, d funtol=1e-6, d reltol=1e-6)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"    funtol: d\n"
		"    reltol: d\n"
		"\n"
		"SolverConfiguration(us maxiter=100, d funtol=1e-6)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"    funtol: d\n"
		"\n"
		"SolverConfiguration(us maxiter=100)\n"
		"\n"
		"Parameters:\n"
		"    maxiter: us\n"
		"\n"
		"new_SolverConfiguration() -> SolverConfiguration\n"
		""},
	 { (char *)"SolverConfiguration_show", _wrap_SolverConfiguration_show, METH_VARARGS, (char *)"\n"
		"SolverConfiguration_show(SolverConfiguration self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration const *\n"
		"\n"
		""},
	 { (char *)"delete_SolverConfiguration", _wrap_delete_SolverConfiguration, METH_VARARGS, (char *)"\n"
		"delete_SolverConfiguration(SolverConfiguration self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::SolverConfiguration *\n"
		"\n"
		""},
	 { (char *)"SolverConfiguration_swigregister", SolverConfiguration_swigregister, METH_VARARGS, NULL},
	 { (char *)"doIter", _wrap_doIter, METH_VARARGS, (char *)"\n"
		"doIter(TaSystem sys, SolverConfiguration sc=None) -> ErrorVals\n"
		"\n"
		"Parameters:\n"
		"    sys: tasystem::TaSystem *\n"
		"    sc: tasystem::SolverConfiguration *\n"
		"\n"
		"doIter(TaSystem sys) -> ErrorVals\n"
		"\n"
		"Parameters:\n"
		"    sys: tasystem::TaSystem *\n"
		"\n"
		""},
	 { (char *)"new_Solver", _wrap_new_Solver, METH_VARARGS, (char *)"\n"
		"Solver(SolverConfiguration sc)\n"
		"\n"
		"Parameters:\n"
		"    sc: tasystem::SolverConfiguration const\n"
		"\n"
		"new_Solver() -> Solver\n"
		""},
	 { (char *)"Solver_setSc", _wrap_Solver_setSc, METH_VARARGS, (char *)"\n"
		"Solver_setSc(Solver self, SolverConfiguration sc)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Solver *\n"
		"    sc: tasystem::SolverConfiguration const &\n"
		"\n"
		""},
	 { (char *)"Solver_stop", _wrap_Solver_stop, METH_VARARGS, (char *)"\n"
		"Solver_stop(Solver self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Solver *\n"
		"\n"
		""},
	 { (char *)"Solver_solve", _wrap_Solver_solve, METH_VARARGS, (char *)"\n"
		"solve(TaSystem arg2) -> SolProgress\n"
		"\n"
		"Parameters:\n"
		"    arg2: tasystem::TaSystem &\n"
		"\n"
		"Solver_solve(Solver self, TaSystem arg3, SolverConfiguration sc) -> SolProgress\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Solver *\n"
		"    arg2: tasystem::TaSystem &\n"
		"    sc: tasystem::SolverConfiguration const &\n"
		"\n"
		""},
	 { (char *)"Solver_getSp", _wrap_Solver_getSp, METH_VARARGS, (char *)"\n"
		"Solver_getSp(Solver self) -> SolProgress\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Solver const *\n"
		"\n"
		""},
	 { (char *)"delete_Solver", _wrap_delete_Solver, METH_VARARGS, (char *)"\n"
		"delete_Solver(Solver self)\n"
		"\n"
		"Parameters:\n"
		"    self: tasystem::Solver *\n"
		"\n"
		""},
	 { (char *)"Solver_swigregister", Solver_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_duct__AutoBoundaryLayerTo_p_duct__BoundaryLayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::BoundaryLayer *)  ((duct::AutoBoundaryLayer *) x));
}
static void *_p_duct__DuctTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *)  ((duct::Duct *) x));
}
static void *_p_duct__IsentropicTubeTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *) (duct::Duct *) ((duct::IsentropicTube *) x));
}
static void *_p_duct__StackTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *) (duct::Duct *)(duct::DuctWithSolid *) ((duct::Stack *) x));
}
static void *_p_mech__PistonTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *)  ((mech::Piston *) x));
}
static void *_p_duct__ConnectorVolumeTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *)  ((duct::ConnectorVolume *) x));
}
static void *_p_duct__DuctWithSolidTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *) (duct::Duct *) ((duct::DuctWithSolid *) x));
}
static void *_p_duct__LaminarDuctTo_p_segment__Seg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Seg *) (duct::Duct *) ((duct::LaminarDuct *) x));
}
static void *_p_duct__StackTo_p_duct__DuctWithSolid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctWithSolid *)  ((duct::Stack *) x));
}
static void *_p_duct__IsentropicTubeTo_p_duct__Duct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Duct *)  ((duct::IsentropicTube *) x));
}
static void *_p_duct__StackTo_p_duct__Duct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Duct *) (duct::DuctWithSolid *) ((duct::Stack *) x));
}
static void *_p_duct__DuctWithSolidTo_p_duct__Duct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Duct *)  ((duct::DuctWithSolid *) x));
}
static void *_p_duct__LaminarDuctTo_p_duct__Duct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Duct *)  ((duct::LaminarDuct *) x));
}
static void *_p_duct__ImpedanceBcTo_p_duct__DuctBc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctBc *)  ((duct::ImpedanceBc *) x));
}
static void *_p_duct__PressureBcTo_p_duct__DuctBc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctBc *)  ((duct::PressureBc *) x));
}
static void *_p_duct__AdiabaticWallTo_p_duct__DuctBc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctBc *)  ((duct::AdiabaticWall *) x));
}
static void *_p_duct__IsoTWallTo_p_duct__DuctBc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctBc *)  ((duct::IsoTWall *) x));
}
static void *_p_duct__VelocityBcTo_p_duct__DuctBc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::DuctBc *)  ((duct::VelocityBc *) x));
}
static void *_p_tasystem__SolverTo_p_tasystem__SolverConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tasystem::SolverConfiguration *)  ((tasystem::Solver *) x));
}
static void *_p_duct__CylindricalTubeTo_p_duct__ConeTube(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::ConeTube *)  ((duct::CylindricalTube *) x));
}
static void *_p_duct__VertPlatesTo_p_duct__Geom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Geom *)  ((duct::VertPlates *) x));
}
static void *_p_duct__ConeTubeTo_p_duct__Geom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Geom *)  ((duct::ConeTube *) x));
}
static void *_p_duct__CylindricalTubeTo_p_duct__Geom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::Geom *) (duct::ConeTube *) ((duct::CylindricalTube *) x));
}
static void *_p_duct__StackTo_p_duct__LaminarDuct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((duct::LaminarDuct *)  ((duct::Stack *) x));
}
static void *_p_tasystem__TaSystemTo_p_tasystem__Globalconf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tasystem::Globalconf *)  ((tasystem::TaSystem *) x));
}
static void *_p_tasystem__EngineSystemTo_p_tasystem__Globalconf(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tasystem::Globalconf *) (tasystem::TaSystem *) ((tasystem::EngineSystem *) x));
}
static void *_p_tasystem__EngineSystemTo_p_tasystem__TaSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tasystem::TaSystem *)  ((tasystem::EngineSystem *) x));
}
static void *_p_duct__DuctBcTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *)  ((duct::DuctBc *) x));
}
static void *_p_duct__ImpedanceBcTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *) (duct::DuctBc *) ((duct::ImpedanceBc *) x));
}
static void *_p_mech__MechBcTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *)  ((mech::MechBc *) x));
}
static void *_p_duct__PressureBcTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *) (duct::DuctBc *) ((duct::PressureBc *) x));
}
static void *_p_duct__AdiabaticWallTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *) (duct::DuctBc *) ((duct::AdiabaticWall *) x));
}
static void *_p_duct__IsoTWallTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *) (duct::DuctBc *) ((duct::IsoTWall *) x));
}
static void *_p_duct__DuctConnectorTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *)  ((duct::DuctConnector *) x));
}
static void *_p_mech__DuctPistonConnectorTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *)  ((mech::DuctPistonConnector *) x));
}
static void *_p_duct__VelocityBcTo_p_segment__Connector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::Connector *) (duct::DuctBc *) ((duct::VelocityBc *) x));
}
static void *_p_duct__VelocityBcTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *)(duct::DuctBc *) ((duct::VelocityBc *) x));
}
static void *_p_segment__SegTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *)  ((segment::Seg *) x));
}
static void *_p_duct__DuctTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *) ((duct::Duct *) x));
}
static void *_p_mech__PistonTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *) ((mech::Piston *) x));
}
static void *_p_duct__IsoTWallTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *)(duct::DuctBc *) ((duct::IsoTWall *) x));
}
static void *_p_duct__DuctBcTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *) ((duct::DuctBc *) x));
}
static void *_p_duct__IsentropicTubeTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *)(duct::Duct *) ((duct::IsentropicTube *) x));
}
static void *_p_duct__AdiabaticWallTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *)(duct::DuctBc *) ((duct::AdiabaticWall *) x));
}
static void *_p_duct__PressureBcTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *)(duct::DuctBc *) ((duct::PressureBc *) x));
}
static void *_p_mech__MechBcTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *) ((mech::MechBc *) x));
}
static void *_p_duct__DuctWithSolidTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *)(duct::Duct *) ((duct::DuctWithSolid *) x));
}
static void *_p_duct__ImpedanceBcTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *)(duct::DuctBc *) ((duct::ImpedanceBc *) x));
}
static void *_p_mech__DuctPistonConnectorTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *) ((mech::DuctPistonConnector *) x));
}
static void *_p_duct__DuctConnectorTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Connector *) ((duct::DuctConnector *) x));
}
static void *_p_segment__ConnectorTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *)  ((segment::Connector *) x));
}
static void *_p_duct__StackTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *)(duct::Duct *)(duct::DuctWithSolid *) ((duct::Stack *) x));
}
static void *_p_duct__ConnectorVolumeTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *) ((duct::ConnectorVolume *) x));
}
static void *_p_duct__LaminarDuctTo_p_segment__SegConBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((segment::SegConBase *) (segment::Seg *)(duct::Duct *) ((duct::LaminarDuct *) x));
}
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dmat = {"_p_dmat", "dmat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__AdiabaticWall = {"_p_duct__AdiabaticWall", "duct::AdiabaticWall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__AutoBoundaryLayer = {"_p_duct__AutoBoundaryLayer", "duct::AutoBoundaryLayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__BoundaryLayer = {"_p_duct__BoundaryLayer", "duct::BoundaryLayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__Cell = {"_p_duct__Cell", "duct::Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__ConeTube = {"_p_duct__ConeTube", "duct::ConeTube *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__ConnectorVolume = {"_p_duct__ConnectorVolume", "duct::ConnectorVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__CylindricalTube = {"_p_duct__CylindricalTube", "duct::CylindricalTube *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__Duct = {"_p_duct__Duct", "duct::Duct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__DuctBc = {"_p_duct__DuctBc", "duct::DuctBc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__DuctConnector = {"_p_duct__DuctConnector", "duct::DuctConnector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__DuctWithSolid = {"_p_duct__DuctWithSolid", "duct::DuctWithSolid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__Geom = {"_p_duct__Geom", "duct::Geom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__Grid = {"_p_duct__Grid", "duct::Grid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__ImpedanceBc = {"_p_duct__ImpedanceBc", "duct::ImpedanceBc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__IsentropicTube = {"_p_duct__IsentropicTube", "duct::IsentropicTube *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__IsoTWall = {"_p_duct__IsoTWall", "duct::IsoTWall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__LaminarDuct = {"_p_duct__LaminarDuct", "duct::LaminarDuct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__PressureBc = {"_p_duct__PressureBc", "duct::PressureBc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__Stack = {"_p_duct__Stack", "duct::Stack *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__VelocityBc = {"_p_duct__VelocityBc", "duct::VelocityBc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_duct__VertPlates = {"_p_duct__VertPlates", "duct::VertPlates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gases__Gas = {"_p_gases__Gas", "gases::Gas *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mech__DuctPistonConnector = {"_p_mech__DuctPistonConnector", "mech::DuctPistonConnector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mech__MechBc = {"_p_mech__MechBc", "mech::MechBc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mech__Piston = {"_p_mech__Piston", "mech::Piston *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mech__PistonConfiguration = {"_p_mech__PistonConfiguration", "mech::PistonConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment__Connector = {"_p_segment__Connector", "segment::Connector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment__Pos = {"_p_segment__Pos", "enum segment::Pos *|mech::Pos *|tasystem::Pos *|duct::Pos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment__Seg = {"_p_segment__Seg", "segment::Seg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment__SegConBase = {"_p_segment__SegConBase", "segment::SegConBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_solids__Solid = {"_p_solids__Solid", "solids::Solid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "c *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__EngineSystem = {"_p_tasystem__EngineSystem", "tasystem::EngineSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__ErrorVals = {"_p_tasystem__ErrorVals", "tasystem::ErrorVals *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__Globalconf = {"_p_tasystem__Globalconf", "tasystem::Globalconf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__Jacobian = {"_p_tasystem__Jacobian", "tasystem::Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__PhaseConstraint = {"_p_tasystem__PhaseConstraint", "tasystem::PhaseConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__SolProgress = {"_p_tasystem__SolProgress", "tasystem::SolProgress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__Solver = {"_p_tasystem__Solver", "tasystem::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__SolverConfiguration = {"_p_tasystem__SolverConfiguration", "tasystem::SolverConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__TaSystem = {"_p_tasystem__TaSystem", "tasystem::TaSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tasystem__var = {"_p_tasystem__var", "tasystem::var *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|us *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_dmat,
  &_swigt__p_double,
  &_swigt__p_duct__AdiabaticWall,
  &_swigt__p_duct__AutoBoundaryLayer,
  &_swigt__p_duct__BoundaryLayer,
  &_swigt__p_duct__Cell,
  &_swigt__p_duct__ConeTube,
  &_swigt__p_duct__ConnectorVolume,
  &_swigt__p_duct__CylindricalTube,
  &_swigt__p_duct__Duct,
  &_swigt__p_duct__DuctBc,
  &_swigt__p_duct__DuctConnector,
  &_swigt__p_duct__DuctWithSolid,
  &_swigt__p_duct__Geom,
  &_swigt__p_duct__Grid,
  &_swigt__p_duct__ImpedanceBc,
  &_swigt__p_duct__IsentropicTube,
  &_swigt__p_duct__IsoTWall,
  &_swigt__p_duct__LaminarDuct,
  &_swigt__p_duct__PressureBc,
  &_swigt__p_duct__Stack,
  &_swigt__p_duct__VelocityBc,
  &_swigt__p_duct__VertPlates,
  &_swigt__p_gases__Gas,
  &_swigt__p_mech__DuctPistonConnector,
  &_swigt__p_mech__MechBc,
  &_swigt__p_mech__Piston,
  &_swigt__p_mech__PistonConfiguration,
  &_swigt__p_segment__Connector,
  &_swigt__p_segment__Pos,
  &_swigt__p_segment__Seg,
  &_swigt__p_segment__SegConBase,
  &_swigt__p_solids__Solid,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_tasystem__EngineSystem,
  &_swigt__p_tasystem__ErrorVals,
  &_swigt__p_tasystem__Globalconf,
  &_swigt__p_tasystem__Jacobian,
  &_swigt__p_tasystem__PhaseConstraint,
  &_swigt__p_tasystem__SolProgress,
  &_swigt__p_tasystem__Solver,
  &_swigt__p_tasystem__SolverConfiguration,
  &_swigt__p_tasystem__TaSystem,
  &_swigt__p_tasystem__var,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dmat[] = {  {&_swigt__p_dmat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__AdiabaticWall[] = {  {&_swigt__p_duct__AdiabaticWall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__AutoBoundaryLayer[] = {  {&_swigt__p_duct__AutoBoundaryLayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__BoundaryLayer[] = {  {&_swigt__p_duct__BoundaryLayer, 0, 0, 0},  {&_swigt__p_duct__AutoBoundaryLayer, _p_duct__AutoBoundaryLayerTo_p_duct__BoundaryLayer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__Cell[] = {  {&_swigt__p_duct__Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__ConeTube[] = {  {&_swigt__p_duct__ConeTube, 0, 0, 0},  {&_swigt__p_duct__CylindricalTube, _p_duct__CylindricalTubeTo_p_duct__ConeTube, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__ConnectorVolume[] = {  {&_swigt__p_duct__ConnectorVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__CylindricalTube[] = {  {&_swigt__p_duct__CylindricalTube, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__Duct[] = {  {&_swigt__p_duct__IsentropicTube, _p_duct__IsentropicTubeTo_p_duct__Duct, 0, 0},  {&_swigt__p_duct__Stack, _p_duct__StackTo_p_duct__Duct, 0, 0},  {&_swigt__p_duct__Duct, 0, 0, 0},  {&_swigt__p_duct__DuctWithSolid, _p_duct__DuctWithSolidTo_p_duct__Duct, 0, 0},  {&_swigt__p_duct__LaminarDuct, _p_duct__LaminarDuctTo_p_duct__Duct, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__DuctBc[] = {  {&_swigt__p_duct__ImpedanceBc, _p_duct__ImpedanceBcTo_p_duct__DuctBc, 0, 0},  {&_swigt__p_duct__DuctBc, 0, 0, 0},  {&_swigt__p_duct__PressureBc, _p_duct__PressureBcTo_p_duct__DuctBc, 0, 0},  {&_swigt__p_duct__AdiabaticWall, _p_duct__AdiabaticWallTo_p_duct__DuctBc, 0, 0},  {&_swigt__p_duct__IsoTWall, _p_duct__IsoTWallTo_p_duct__DuctBc, 0, 0},  {&_swigt__p_duct__VelocityBc, _p_duct__VelocityBcTo_p_duct__DuctBc, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__DuctConnector[] = {  {&_swigt__p_duct__DuctConnector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__DuctWithSolid[] = {  {&_swigt__p_duct__Stack, _p_duct__StackTo_p_duct__DuctWithSolid, 0, 0},  {&_swigt__p_duct__DuctWithSolid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__Geom[] = {  {&_swigt__p_duct__Geom, 0, 0, 0},  {&_swigt__p_duct__VertPlates, _p_duct__VertPlatesTo_p_duct__Geom, 0, 0},  {&_swigt__p_duct__ConeTube, _p_duct__ConeTubeTo_p_duct__Geom, 0, 0},  {&_swigt__p_duct__CylindricalTube, _p_duct__CylindricalTubeTo_p_duct__Geom, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__Grid[] = {  {&_swigt__p_duct__Grid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__ImpedanceBc[] = {  {&_swigt__p_duct__ImpedanceBc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__IsentropicTube[] = {  {&_swigt__p_duct__IsentropicTube, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__IsoTWall[] = {  {&_swigt__p_duct__IsoTWall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__LaminarDuct[] = {  {&_swigt__p_duct__Stack, _p_duct__StackTo_p_duct__LaminarDuct, 0, 0},  {&_swigt__p_duct__LaminarDuct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__PressureBc[] = {  {&_swigt__p_duct__PressureBc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__Stack[] = {  {&_swigt__p_duct__Stack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__VelocityBc[] = {  {&_swigt__p_duct__VelocityBc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duct__VertPlates[] = {  {&_swigt__p_duct__VertPlates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gases__Gas[] = {  {&_swigt__p_gases__Gas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mech__DuctPistonConnector[] = {  {&_swigt__p_mech__DuctPistonConnector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mech__MechBc[] = {  {&_swigt__p_mech__MechBc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mech__Piston[] = {  {&_swigt__p_mech__Piston, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mech__PistonConfiguration[] = {  {&_swigt__p_mech__PistonConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment__Connector[] = {  {&_swigt__p_duct__ImpedanceBc, _p_duct__ImpedanceBcTo_p_segment__Connector, 0, 0},  {&_swigt__p_duct__DuctBc, _p_duct__DuctBcTo_p_segment__Connector, 0, 0},  {&_swigt__p_duct__PressureBc, _p_duct__PressureBcTo_p_segment__Connector, 0, 0},  {&_swigt__p_mech__MechBc, _p_mech__MechBcTo_p_segment__Connector, 0, 0},  {&_swigt__p_duct__AdiabaticWall, _p_duct__AdiabaticWallTo_p_segment__Connector, 0, 0},  {&_swigt__p_duct__IsoTWall, _p_duct__IsoTWallTo_p_segment__Connector, 0, 0},  {&_swigt__p_segment__Connector, 0, 0, 0},  {&_swigt__p_duct__VelocityBc, _p_duct__VelocityBcTo_p_segment__Connector, 0, 0},  {&_swigt__p_duct__DuctConnector, _p_duct__DuctConnectorTo_p_segment__Connector, 0, 0},  {&_swigt__p_mech__DuctPistonConnector, _p_mech__DuctPistonConnectorTo_p_segment__Connector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment__Pos[] = {  {&_swigt__p_segment__Pos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment__Seg[] = {  {&_swigt__p_duct__IsentropicTube, _p_duct__IsentropicTubeTo_p_segment__Seg, 0, 0},  {&_swigt__p_duct__Stack, _p_duct__StackTo_p_segment__Seg, 0, 0},  {&_swigt__p_duct__ConnectorVolume, _p_duct__ConnectorVolumeTo_p_segment__Seg, 0, 0},  {&_swigt__p_duct__Duct, _p_duct__DuctTo_p_segment__Seg, 0, 0},  {&_swigt__p_mech__Piston, _p_mech__PistonTo_p_segment__Seg, 0, 0},  {&_swigt__p_segment__Seg, 0, 0, 0},  {&_swigt__p_duct__DuctWithSolid, _p_duct__DuctWithSolidTo_p_segment__Seg, 0, 0},  {&_swigt__p_duct__LaminarDuct, _p_duct__LaminarDuctTo_p_segment__Seg, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment__SegConBase[] = {  {&_swigt__p_mech__Piston, _p_mech__PistonTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__VelocityBc, _p_duct__VelocityBcTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__DuctBc, _p_duct__DuctBcTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_mech__MechBc, _p_mech__MechBcTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__IsoTWall, _p_duct__IsoTWallTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__IsentropicTube, _p_duct__IsentropicTubeTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_segment__SegConBase, 0, 0, 0},  {&_swigt__p_segment__Seg, _p_segment__SegTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__DuctWithSolid, _p_duct__DuctWithSolidTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__AdiabaticWall, _p_duct__AdiabaticWallTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__PressureBc, _p_duct__PressureBcTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__ImpedanceBc, _p_duct__ImpedanceBcTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__Duct, _p_duct__DuctTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_mech__DuctPistonConnector, _p_mech__DuctPistonConnectorTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__DuctConnector, _p_duct__DuctConnectorTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_segment__Connector, _p_segment__ConnectorTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__ConnectorVolume, _p_duct__ConnectorVolumeTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__Stack, _p_duct__StackTo_p_segment__SegConBase, 0, 0},  {&_swigt__p_duct__LaminarDuct, _p_duct__LaminarDuctTo_p_segment__SegConBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_solids__Solid[] = {  {&_swigt__p_solids__Solid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__EngineSystem[] = {  {&_swigt__p_tasystem__EngineSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__ErrorVals[] = {  {&_swigt__p_tasystem__ErrorVals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__Globalconf[] = {  {&_swigt__p_tasystem__Globalconf, 0, 0, 0},  {&_swigt__p_tasystem__TaSystem, _p_tasystem__TaSystemTo_p_tasystem__Globalconf, 0, 0},  {&_swigt__p_tasystem__EngineSystem, _p_tasystem__EngineSystemTo_p_tasystem__Globalconf, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__Jacobian[] = {  {&_swigt__p_tasystem__Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__PhaseConstraint[] = {  {&_swigt__p_tasystem__PhaseConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__SolProgress[] = {  {&_swigt__p_tasystem__SolProgress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__Solver[] = {  {&_swigt__p_tasystem__Solver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__SolverConfiguration[] = {  {&_swigt__p_tasystem__Solver, _p_tasystem__SolverTo_p_tasystem__SolverConfiguration, 0, 0},  {&_swigt__p_tasystem__SolverConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__TaSystem[] = {  {&_swigt__p_tasystem__TaSystem, 0, 0, 0},  {&_swigt__p_tasystem__EngineSystem, _p_tasystem__EngineSystemTo_p_tasystem__TaSystem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tasystem__var[] = {  {&_swigt__p_tasystem__var, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_dmat,
  _swigc__p_double,
  _swigc__p_duct__AdiabaticWall,
  _swigc__p_duct__AutoBoundaryLayer,
  _swigc__p_duct__BoundaryLayer,
  _swigc__p_duct__Cell,
  _swigc__p_duct__ConeTube,
  _swigc__p_duct__ConnectorVolume,
  _swigc__p_duct__CylindricalTube,
  _swigc__p_duct__Duct,
  _swigc__p_duct__DuctBc,
  _swigc__p_duct__DuctConnector,
  _swigc__p_duct__DuctWithSolid,
  _swigc__p_duct__Geom,
  _swigc__p_duct__Grid,
  _swigc__p_duct__ImpedanceBc,
  _swigc__p_duct__IsentropicTube,
  _swigc__p_duct__IsoTWall,
  _swigc__p_duct__LaminarDuct,
  _swigc__p_duct__PressureBc,
  _swigc__p_duct__Stack,
  _swigc__p_duct__VelocityBc,
  _swigc__p_duct__VertPlates,
  _swigc__p_gases__Gas,
  _swigc__p_mech__DuctPistonConnector,
  _swigc__p_mech__MechBc,
  _swigc__p_mech__Piston,
  _swigc__p_mech__PistonConfiguration,
  _swigc__p_segment__Connector,
  _swigc__p_segment__Pos,
  _swigc__p_segment__Seg,
  _swigc__p_segment__SegConBase,
  _swigc__p_solids__Solid,
  _swigc__p_std__complexT_double_t,
  _swigc__p_tasystem__EngineSystem,
  _swigc__p_tasystem__ErrorVals,
  _swigc__p_tasystem__Globalconf,
  _swigc__p_tasystem__Jacobian,
  _swigc__p_tasystem__PhaseConstraint,
  _swigc__p_tasystem__SolProgress,
  _swigc__p_tasystem__Solver,
  _swigc__p_tasystem__SolverConfiguration,
  _swigc__p_tasystem__TaSystem,
  _swigc__p_tasystem__var,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  TRACE(10, "Import array called");
  import_array();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

